<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<prerequisites>
		<maven>3.3</maven>
	</prerequisites>

	<parent>
		<groupId>gov.hhs.cms.bluebutton</groupId>
		<artifactId>bluebutton-parent</artifactId>
		<version>1.1.0</version>
	</parent>

	<groupId>gov.hhs.cms.bluebutton.datapipeline</groupId>
	<artifactId>bluebutton-data-pipeline</artifactId>
	<version>0.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>bluebutton-data-pipeline</name>
	<description>
		A parent POM for the CMS/MyMedicare.gov ETL: migrates data from the CCW data warehouse to the Blue Button FHIR server.
	</description>
	<url>https://github.com/HHSIDEAlab/bluebutton-data-pipeline</url>

	<issueManagement>
		<!-- There doesn't seem to be any tooling support for this yet, but it 
			doesn't hurt to include it. -->
		<system>GitHub Issues</system>
		<url>https://github.com/HHSIDEAlab/bluebutton-data-pipeline/issues</url>
	</issueManagement>

	<ciManagement>
		<!-- Per http://stackoverflow.com/questions/14754372/whats-the-purpose-of-the-maven-3-cimanagement-configuration#comment20752353_14762245, 
			Sonar (at least) can use this information. -->
		<system>jenkins</system>
		<url>http://builds.hhsdevcloud.us/job/HHSIDEALab/job/bluebutton-data-pipeline/</url>
	</ciManagement>

	<scm>
		<!-- URL format taken from http://www.sonatype.com/people/2009/09/maven-tips-and-tricks-using-github/ -->
		<connection>scm:git:git@github.com:HHSIDEAlab/bluebutton-data-pipeline.git</connection>
		<developerConnection>scm:git:git@github.com:HHSIDEAlab/bluebutton-data-pipeline.git</developerConnection>
		<url>https://github.com/HHSIDEAlab/bluebutton-data-pipeline</url>
		<tag>HEAD</tag>
	</scm>

	<modules>
		<module>bluebutton-data-pipeline-desynpuf</module>
		<module>bluebutton-data-pipeline-ccw</module>
		<module>bluebutton-data-pipeline-ccw-test</module>
		<module>bluebutton-data-pipeline-sampledata</module>
		<module>bluebutton-data-pipeline-ccw-extract</module>
		<module>bluebutton-data-pipeline-rif</module>
		<module>bluebutton-data-pipeline-rif-extract</module>
		<module>bluebutton-data-pipeline-fhir-load</module>
		<module>bluebutton-data-pipeline-app</module>
		<module>bluebutton-data-pipeline-fhir-sampledata</module>
	</modules>

	<properties>
		<hapi-fhir.version>1.4-SNAPSHOT</hapi-fhir.version>
		<metrics.version>3.1.2</metrics.version>

		<!-- The version of the capsule library for the capsule-maven-plugin to 
			use. We need to override the default, to avoid https://github.com/puniverse/capsule/issues/90, 
			as this is seen in whichever version of the library is used by default in 
			the 1.0.1 version of the plugin. -->
		<capsule.version>1.0.1</capsule.version>

		<!-- The version of the Blue Button FHIR server to test against. -->
		<bbonfhir-server.version>0.1.0-45</bbonfhir-server.version>

		<!-- Configure the Blue Button FHIR Server, as it will be run via the Jetty 
			plugin. These settings are pulled out as POM properties so that they can 
			be adjusted via profiles. This is required because the CI server doesn't 
			have enough RAM to run with an in-mem DB, and so requires a different configuration. -->
		<its.bbfhir.server.jvmargs>-Xmx4g</its.bbfhir.server.jvmargs>
		<its.bbfhir.db.url>jdbc:hsqldb:mem:test</its.bbfhir.db.url>
		<its.bbfhir.db.username></its.bbfhir.db.username>
		<its.bbfhir.db.password></its.bbfhir.db.password>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Provides the FHIR client being used to create/push resources to 
					the server. -->
				<groupId>ca.uhn.hapi.fhir</groupId>
				<artifactId>hapi-fhir-base</artifactId>
				<version>${hapi-fhir.version}</version>
			</dependency>
			<dependency>
				<!-- At least one "structures" JAR must also be included -->
				<groupId>ca.uhn.hapi.fhir</groupId>
				<artifactId>hapi-fhir-structures-dstu2.1</artifactId>
				<version>${hapi-fhir.version}</version>
			</dependency>

			<dependency>
				<!-- Provides various utilities, particularly for managing DB connections. -->
				<groupId>com.justdavis.karl.jessentials</groupId>
				<artifactId>jessentials-misc</artifactId>
				<version>3.2.0</version>
			</dependency>

			<dependency>
				<!-- Provides a sane facade for the giant mess of incompatible logging 
					frameworks in Java. -->
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>1.7.7</version>
			</dependency>

			<dependency>
				<!-- Locks the versions of all Spring modules that are used in child 
					projects to ones that are actually compatible with each other. We're not 
					using most of those modules, but this is our ticket out of dependency-mismatch 
					hell. -->
				<groupId>io.spring.platform</groupId>
				<artifactId>platform-bom</artifactId>
				<version>2.0.3.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<!-- The JDO API is a more flexible alternative to JPA: an ORM for working 
					with databases in Java. DataNucleus provides an implementation of the JDO 
					API. -->
				<groupId>org.datanucleus</groupId>
				<artifactId>datanucleus-accessplatform-jdo-rdbms</artifactId>
				<version>5.0.0-m1</version>
				<type>pom</type>
			</dependency>

			<dependency>
				<!-- Used to measure performance and collect other runtime statistics 
					within these projects. -->
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-core</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<dependency>
				<!-- Used to monitor the JVM's memory usage, garbage collection, etc. 
					at runtime. -->
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jvm</artifactId>
				<version>${metrics.version}</version>
			</dependency>

			<dependency>
				<!-- Provides utilities for working with Java 8 streams, including batching 
					features that are used in this project. -->
				<groupId>io.reactivex</groupId>
				<artifactId>rxjava</artifactId>
				<version>1.1.1</version>
			</dependency>

			<dependency>
				<!-- JDBC driver for working with PostgreSQL DBs on Java 8 (JDBC 4.2). -->
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>9.4.1208</version>
			</dependency>

			<dependency>
				<!-- Lock & harmonize the versions of the various AWS SDK components, 
					per http://docs.aws.amazon.com/java-sdk/latest/developer-guide/setup-project-maven.html. -->
				<groupId>com.amazonaws</groupId>
				<artifactId>aws-java-sdk-bom</artifactId>
				<version>1.10.43</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<!-- Used to run our unit and integration tests. -->
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- In-memory database that is used in some tests to speed things up. -->
				<groupId>org.hsqldb</groupId>
				<artifactId>hsqldb</artifactId>
				<version>2.2.4</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Can be used to run the DataNucleus/JDO bytecode enhancer on projects' 
						compiled classes. -->
					<groupId>org.datanucleus</groupId>
					<artifactId>datanucleus-maven-plugin</artifactId>
					<version>4.0.2</version>
					<configuration>
						<api>JDO</api>
						<verbose>true</verbose>
					</configuration>
				</plugin>
				<plugin>
					<!-- Configure the dependency plugin such that it can be used to grab 
						the Blue Button FHIR Server and its config, for manual testing or for use 
						in integration tests. -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.10</version>
					<configuration>
						<artifactItems>
							<artifactItem>
								<groupId>gov.hhs.cms.bluebutton.fhir</groupId>
								<artifactId>bbonfhir-server-app</artifactId>
								<version>${bbonfhir-server.version}</version>
								<type>war</type>
								<outputDirectory>${project.build.directory}/bbonfhir-server</outputDirectory>
							</artifactItem>
							<artifactItem>
								<groupId>gov.hhs.cms.bluebutton.fhir</groupId>
								<artifactId>bbonfhir-server-app</artifactId>
								<version>${bbonfhir-server.version}</version>
								<type>xml</type>
								<classifier>jetty-config</classifier>
								<outputDirectory>${project.build.directory}/bbonfhir-server</outputDirectory>
							</artifactItem>
						</artifactItems>
						<outputDirectory>${project.build.directory}/wars</outputDirectory>
						<overWriteReleases>false</overWriteReleases>
						<overWriteSnapshots>true</overWriteSnapshots>
					</configuration>
				</plugin>
				<plugin>
					<!-- Configure the Jetty plugin such that it can be used to launch the 
						Blue Button FHIR Server, for manual testing or for use in integration tests. -->
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.3.11.v20160721</version>
					<configuration>
						<!-- The Jetty config file to use. -->
						<jettyXml>${project.build.directory}/bbonfhir-server/bbonfhir-server-app-${bbonfhir-server.version}-jetty-config.xml</jettyXml>
						
						<!-- Ensure that the run-forked goal is non-blocking. -->
						<waitForChild>false</waitForChild>

						<!-- Configure the JVM to: -->
						<!-- * Set the JVM's max heap size. -->
						<!-- * Set the HTTP(S) ports for Jetty to use. If you modify these, 
							be sure to also update `FhirTestUtilities.FHIR_API`. -->
						<!-- * Configure Jetty's SSL keystores. These were just manually copied 
							from `bbonfhir-server.git/dev/ssl-stores/`, for convenience. -->
						<!-- * Specify the WAR to run. -->
						<!-- * Configure the DB to be used by the FHIR server. The defaults 
							(above) are to use a temporary in-mem DB. Can be overridden if needed by 
							properties specified in devs' settings.xml. -->
						<!-- Notes on how this property is handled: 1) Don't let auto-formatting 
							of this POm add extra spaces or line breaks: you'll get weird errors if you 
							do, 2) don't quote any of the values: you'll get weird errors if you do. -->
						<jvmArgs>${its.bbfhir.server.jvmargs} -Djetty.ssl.port=9094 -Djetty.sslContext.keyStorePath=${project.build.directory}/../../dev/ssl-stores/server.keystore -Djetty.sslContext.trustStorePath=${project.build.directory}/../../dev/ssl-stores/server.truststore -Dbbfhir.war.path=${project.build.directory}/bbonfhir-server/bbonfhir-server-app-${bbonfhir-server.version}.war -Dbbfhir.db.url=${its.bbfhir.db.url} -Dbbfhir.db.username=${its.bbfhir.db.username} -Dbbfhir.db.password=${its.bbfhir.db.password}</jvmArgs>

						<!-- Used by the 'stop' goal. -->
						<stopPort>9966</stopPort>
						<stopKey>doesntmatter</stopKey>
						<stopWait>120</stopWait>

						<!-- Don't run any of this plugin's goals if the ITs are being skipped. -->
						<skip>${skipITs}</skip>
					</configuration>
				</plugin>
				<plugin>
					<!-- Can be used to run any `*IT.java` integration tests in a project. -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<redirectTestOutputToFile>true</redirectTestOutputToFile>
					</configuration>
				</plugin>
				<plugin>
					<!-- Used to build executable JARs, with all dependencies included in 
						them. -->
					<groupId>com.github.chrischristo</groupId>
					<artifactId>capsule-maven-plugin</artifactId>
					<version>1.0.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-scm-plugin</artifactId>
					<configuration>
						<!-- This default config is used in the Jenkinsfile CI build. -->
						<tag>${project.artifactId}-${project.version}</tag>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<!-- Always generate a source JAR. This is a best practice, but is 
							also required by OSSRH/Maven Central. -->
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<!-- Always generate a Javadoc JAR. This is a best practice, but is 
							also required by OSSRH/Maven Central. -->
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- This profile will only be active for builds inside of Eclipse (managed 
				by m2e). It's primarily used to manage the execution of plugins in that environment. -->
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<!--This plugin's configuration is used to store Eclipse m2e settings 
								only. It has no influence on the Maven build itself. -->
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[1.0.0,)</versionRange>
												<goals>
													<goal>copy</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<!-- Don't run this plugin inside m2e; necessary to disable a 
													POM warning in Eclipse, caused by https://issues.apache.org/jira/browse/MDEP-187. -->
												<ignore />
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

</project>

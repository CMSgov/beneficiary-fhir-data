---

##
# Ensures that an ELB load balancer exists for the Data Servers in each
# environment.
##

- name: Provision/Update ELB for Data Servers
  hosts: localhost
  connection: local

  tasks:

    - name: Lookup EC2 Subnets
      ec2_vpc_subnet_facts:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ item.subnet_name }}"
      # This module doesn't return subnet names/tags, so we have to query
      # separately for each subnet (so we can build those associations
      # ourselves).
      with_items: "{{ aws_subnets }}"
      register: ec2_vpc_subnets
    # Add a 'facts' value to each `aws_subnet` entry, with the subnet details from `ec2_vpc_subnets`.
    - name: Combine Subnet Specifications with Data From AWS API
      set_fact:
        aws_subnets: "{{ item | combine({ 'facts': (ec2_vpc_subnets.results | selectattr('item.subnet_name', 'equalto', item.subnet_name) | list)[0].subnets[0] }) }}"
      with_items: "{{ aws_subnets }}"

    - name: Query AWS API for EC2 Instances
      ec2_instance_facts:
        region: "{{ aws_region }}"
      register: ec2_instances
    - name: Initialize Lists of Data Servers by Env
      set_fact:
        data_servers_by_env:
          ts: []
    - name: Populate Lists of Data Servers by Env
      set_fact:
        data_servers_by_env:
          ts: "{{ data_servers_by_env.ts if (item.tags.Name) not in deployment_environment_ts.data_server_elb.ec2_instance_names else (data_servers_by_env.ts + [item]) }}"
      with_items: "{{ ec2_instances.instances }}"

    - name: Create EC2 Elastic Load Balancer (ELB) for Data Servers
      elb_classic_lb:
        name: "{{ item.data_server_elb.elb_name }}"
        state: 'present'
        connection_draining_timeout: 300
        idle_timeout: 60
        scheme: "{{ 'internet-facing' if item.data_server_elb.internet_facing else 'internal' }}"
        region: "{{ aws_region }}"
        subnets: "{{ aws_subnets | selectattr('vpc_name', 'equalto', item.data_server_elb.vpc_name) | map(attribute='facts.subnet_id') }}"
        purge_subnets: true
        cross_az_load_balancing: false
        security_group_names: "{{ item.data_server_elb.security_group_names }}"
        instance_ids: "{{ data_servers_by_env[item.env_name] | map(attribute='instance_id') | list }}"
        purge_instance_ids: true
        listeners:
          - protocol: 'tcp'
            load_balancer_port: "{{ vault_data_server_port_load_balancer }}"
            instance_port: "{{ vault_data_server_port_internal }}"
        health_check:
          ping_protocol: tcp
          ping_port: "{{ vault_data_server_port_internal }}"
          response_timeout: 5
          interval: 10
          unhealthy_threshold: 2
          healthy_threshold: 5
        access_logs:
          interval: 5 # minutes (default is 60 minutes)
          s3_location: "{{ item.data_server_elb.access_logs_s3_bucket_name }}"
          s3_prefix: "elb_access_logs/{{ item.env_name }}"
        wait: true
      with_items: "{{ deployment_environments }}"

// These are the basic imports that Jenkins interactive script console
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;


//
// Define the Helper Functions for Managing Projects
//

//
// Check/Update the Project
//
def createOrUpdateProject = { projectName ->
  // Hardcode these values for all the Blue Button projects.
  projectParent = Jenkins.instance
  gitHubOrg = 'CMSgov'
  buildBranchesWithoutPullRequests = true
  buildBranchesWithPullRequests = true
  credentialsId = 'github-personal-access-token'

  boolean updated = false
  project = projectParent.getItem(projectName)

  if (project == null) {
    println "Project doesn't exist yet: '${projectName}'."
    project = new org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject(Jenkins.instance, projectName)
    projectParent.add(project, projectName)
    updated = true
  }

  source = project.getSourcesList().find {
    it instanceof jenkins.branch.BranchSource &&
    it.source instanceof org.jenkinsci.plugins.github_branch_source.GitHubSCMSource &&
    it.source.repoOwner == gitHubOrg &&
    it.source.repository == projectName
  }

  if (source == null) {
    println "Matching source config not found for project: '${projectName}'."
    source = new jenkins.branch.BranchSource(new org.jenkinsci.plugins.github_branch_source.GitHubSCMSource(gitHubOrg, projectName))
    project.getSourcesList().add(source)
    updated = true
  }

  if (source.source.credentialsId != credentialsId) {
    println "Source config did not have correct credentials on project: '${projectName}'."
    source.source.credentialsId = credentialsId
    updated = true
  }

  branchDiscoveryTrait = source.source.traits.find { it instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait }
  if (branchDiscoveryTrait == null) {
    println "Source config did not have branch discovery trait on project: '${projectName}'."
    branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(buildBranchesWithoutPullRequests, buildBranchesWithPullRequests)
    source.source.traits.add(branchDiscoveryTrait)
    updated = true
  }

  for (int scmTraitIndex = 0; scmTraitIndex < source.source.traits.size(); scmTraitIndex++) {
    scmTrait = source.source.traits.get(scmTraitIndex)
    if (
        scmTrait instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait &&
        scmTrait.isBuildBranch() != buildBranchesWithoutPullRequests &&
        scmTrait.isBuildBranchesWithPR() != buildBranchesWithPullRequests
    ) {
      println "Source config did not have correct branch discovery trait on project: '${projectName}'."
      source.source.traits.remove(scmTraitIndex)
      branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(
          buildBranchesWithoutPullRequests,
          buildBranchesWithPullRequests
      )
      source.source.traits.add(branchDiscoveryTrait)
      updated = true
    }
  }

  if (updated) {
    project.save()
    println "Changed project: '${projectName}'."
  }
}


//
// Create/Update All of the Projects
//

projectNames = [
  'bluebutton-parent-pom',
  'bluebutton-data-model',
  'bluebutton-data-pipeline',
  'bluebutton-data-server',
  'bluebutton-ansible-playbooks-data'
]

for (projectName in projectNames) {
  createOrUpdateProject(projectName)
}

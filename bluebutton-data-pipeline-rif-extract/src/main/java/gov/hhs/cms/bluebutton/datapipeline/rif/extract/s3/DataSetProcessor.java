package gov.hhs.cms.bluebutton.datapipeline.rif.extract.s3;

import gov.hhs.cms.bluebutton.datapipeline.rif.model.RifFilesEvent;

/**
 * Implementations of this event/callback interface will be handed each of the
 * {@link RifFilesEvent}s that are generated by the application's
 * {@link DataSetMonitorWorker}. They are responsible for processing that data set.
 */
public interface DataSetProcessor {

	/**
	 * <p>
	 * This callback will be fired when a new {@link RifFilesEvent} data set is
	 * available for processing. It's this method's responsibility to actually
	 * <em>do</em> that processing, presumably by transforming the data and
	 * pushing it to a FHIR server.
	 * </p>
	 * <p>
	 * <strong>It is very important</strong> that this method block until the
	 * data set has finished processing. If it did not, the application might
	 * start processing another data set at the same time, which will likely
	 * lead to updates being applied in the wrong order, and an inconsistent
	 * resulting database. That would be very bad, and unrecoverable.
	 * </p>
	 * 
	 * @param rifFilesEvent
	 *            the new {@link RifFilesEvent} data set to be processed
	 */
	void process(RifFilesEvent rifFilesEvent);
}

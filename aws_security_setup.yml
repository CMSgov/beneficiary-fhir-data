---

##
# Creates the IAM roles, IAM policies, and KMS keys that will be needed by the 
# other plays.
#
# References:
# 
# * [IAM Policies and Bucket Policies and ACLs! Oh, My! (Controlling Access to S3 Resources)](https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/)
#     * Opted to go with the policy-on-users/roles option, as it's simpler.
# * [Keeping Secrets Safe With KMS](http://www.rightbrainnetworks.com/blog/keeping-secrets-safe-with-kms/)
#     * Not really using these concepts yet, but this is the way to go if it's 
#       decided that the SSL keys need to be better secured.
# * [Encrypted Amazon EC2 boot volumes with Packer and Ansible](http://www.davekonopka.com/2016/ec2-encrypted-boot-volumes.html)
#     * For now, we're just using the default EBS key as all AWS admins should
#       have access to the data encrypted in this sandbox environment.
##

- name: Configure AWS Security
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:

    - name: Create IAM Role for Blue Button Backend Data Pipeline
      iam:
        iam_type: role
        name: BlueButtonBackend-DataPipeline
        state: present
        # The `trust_policy` only defines what/who can assume/become this role; it
        # doesn't define what the role will have access to.
        trust_policy:
          Version: '2012-10-17'
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com

    - name: Create IAM Role for Blue Button Backend Data Server
      iam:
        iam_type: role
        name: BlueButtonBackend-DataServer
        state: present
        # The `trust_policy` only defines what/who can assume/become this role; it
        # doesn't define what the role will have access to.
        trust_policy:
          Version: '2012-10-17'
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com

    - name: Give BlueButtonBackend-* Write Access to CloudWatch
      iam_policy:
        iam_type: role
        iam_name: "{{ item }}"
        policy_name: BlueButtonBackend-CloudWatch-Write
        state: present
        policy_document: files/bluebutton_backend_cloudwatch_write_policy.json
      with_items:
        - BlueButtonBackend-DataPipeline
        - BlueButtonBackend-DataServer

    - name: Give BlueButtonBackend-DataPipeline Access to Blue Button S3 Buckets
      iam_policy:
        iam_type: role
        iam_name: BlueButtonBackend-DataPipeline
        policy_name: "BlueButtonBackend-DataPipeline-S3"
        state: present
        policy_json: "{{ lookup('template','bluebutton_backend_data_pipeline_s3_policy.json.j2') | to_json }}"
    
    - name: "Provision EC2 Security Group 'default'"
      ec2_group:
        name: 'default'
        description: 'default VPC security group'
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        rules:
          - proto: 'all'
            group_name: 'default'
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: ec2_group_default
    - set_fact:
        ec2_group_default_id: "{{ ec2_group_default.group_id }}"
    
    - name: Provision EC2 Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: ec2_group_ssh_all
    - set_fact:
        ec2_group_ssh_all_id: "{{ ec2_group_ssh_all.group_id }}"
    
    - name: Provision EC2 Security Group 'bluebutton-backend-fhir-internal'
      ec2_group:
        name: bluebutton-backend-fhir-internal
        description: "Allows incoming traffic on port {{ backend_fhir_port_internal }}  (from subnet IPs)."
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        rules:
          - proto: tcp
            from_port: "{{ backend_fhir_port_internal }}"
            to_port: "{{ backend_fhir_port_internal }}"
            group_name: default
      register: ec2_group_backend_fhir_internal
    - set_fact:
        ec2_group_backend_fhir_internal_id: "{{ ec2_group_backend_fhir_internal.group_id }}"
    
    - name: Provision EC2 Security Group 'bluebutton-backend-fhir-external'
      ec2_group:
        name: bluebutton-backend-fhir-external
        description: "Allows incoming traffic on port {{ backend_fhir_port_external }}  (from all IPs)."
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        rules:
          - proto: tcp
            from_port: "{{ backend_fhir_port_external }}"
            to_port: "{{ backend_fhir_port_external }}"
            cidr_ip: 0.0.0.0/0
      register: ec2_group_backend_fhir_external
    - set_fact:
        ec2_group_backend_fhir_external_id: "{{ ec2_group_backend_fhir_external.group_id }}"


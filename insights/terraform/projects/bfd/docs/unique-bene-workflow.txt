@startuml
database "Glue Catalog" {
  frame "api_requests" as api_requests {
  }
  frame "benes" as benes {
  }
  frame "benes_unique" as benes_unique {
  }
}

note right of api_requests
  unified historical and incoming raw api data
end note

note right of benes
  * filter out non-200s
  * reduce field selections
  * pivot out bene_id arrays (one bene per record)
  * stored in Parquet format (columnar store)
end note

note right of benes_unique
  * reduce field selections
  * only stores the "first seen" record for a bene
end note

package "Cloud Watch" {
  [ Log Group\n(access.json) ] as L
  L --> () Export
  L --> () Subscription
}

note left of Export
   CW Exports have a very inconvenient format
   that do not match the subscription format.
   Furthermore they cannot be exported into
   S3 buckets that use KMS, so we have to have
   a separate process to ingest them. This should
   be an infrequent operation to initially populate
   historical data.
end note

package "Athena" {
  (Queries)
}

package "Kinesis Firehose" {
(Lambda)
}

Export --> Queries
Queries --> api_requests

Subscription --> (Lambda)
Lambda --> api_requests

note right of Lambda
  Flatten the JSON schema so that
  we have one column for each MDC
  structure field.
end note

api_requests --> benes : Glue:Populate
benes <--> benes_unique : Glue: Combine

package "Analysis" {
  [ Athena ] as A
  A --> [ QuickSight ]
  benes --> A
  benes_unique --> A
}

note right of A
  dahboards can be built on either table
  for the use case but queries against the
  benes table may become unwieldy
end note
@enduml
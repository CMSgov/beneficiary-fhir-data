<script type="text/javascript">
    addEventListener("DOMContentLoaded", function () {
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }

        const min = 150;
        const table = document.querySelector('table');
        // initialize computed pixel values
        table.style.gridTemplateColumns = getComputedStyle(table).gridTemplateColumns;
        const tableContainer = document.getElementById('table-container');

        /*
          The following will soon be filled with column objects containing
          the header element and their size value for grid-template-columns 
        */
        const columns = [];
        let headerBeingResized;

        // The next three functions are mouse event callbacks

        // Where the magic happens. I.e. when they're actually resizing
        const onMouseMove = (e) => requestAnimationFrame(() => {

            // Calculate the desired width
            horizontalScrollOffset = tableContainer.scrollLeft;
            const width = (horizontalScrollOffset + e.clientX) - headerBeingResized.offsetLeft;

            // Update the column object with the new size value
            const column = columns.find(({ header }) => header === headerBeingResized);
            column.size = Math.max(min, width) + 'px'; // Enforce our minimum

            /* 
              Update the column sizes
              Reminder: grid-template-columns sets the width for all columns in one value
            */

            table.style.gridTemplateColumns = columns
                .map(({ header, size }) => size)
                .join(' ');
        });

        // Clean up event listeners, classes, etc.
        const onMouseUp = () => {
            window.removeEventListener('mousemove', onMouseMove);
            window.removeEventListener('mouseup', onMouseUp);
            headerBeingResized.classList.remove('header--being-resized');
            headerBeingResized = null;
        };

        // Get ready, they're about to resize
        const initResize = ({ target }) => {


            headerBeingResized = target.parentNode;
            window.addEventListener('mousemove', onMouseMove);
            window.addEventListener('mouseup', onMouseUp);
            headerBeingResized.classList.add('header--being-resized');
        };

        // Let's populate that columns array and add listeners to the resize handles
        document.querySelectorAll('th').forEach((header) => {
            columns.push({
                header,
                // The initial size value for grid-template-columns:
                size: header.clientWidth + 'px'
            });
            header.querySelector('.resize-handle').addEventListener('mousedown', initResize);
        });
    })
    // Our real web app uses Vue.js but I'll stick to plain JavaScript here


</script>

<style type="text/css">
    table {
        display: grid;
        border-collapse: collapse;
        min-width: 300em;
        width: auto;
        flex: 1;
        grid-template-columns:
            /* Name */
            minmax(150px, 3fr)
            /* Description */
            minmax(150px, 6fr)
            /* Applies To */
            minmax(150px, 1fr)
            /* Supplied In */
            minmax(150px, 2fr)
            /* Table Type */
            minmax(150px, 1fr)
            /* Columm Name */
            minmax(150px, 2fr)
            /* Data Type */
            minmax(150px, 1fr)
            /* Size */
            minmax(150px, 1fr)
            /* Field Name */
            minmax(150px, 2fr)
            /* CCW Mapping */
            minmax(150px, 2fr)
            /* CCLF Mapping */
            minmax(150px, 2fr)
            /* Version */
            minmax(150px, 1fr)
            /* Resource */
            minmax(150px, 2fr)
            /* Element */
            minmax(150px, 3fr)
             /* Discriminator */
            minmax(150px, 5fr)
            /* Additional */
            minmax(150px, 5fr)
             /* Derived */
            minmax(150px, 3fr)
            /* Note */
            minmax(150px, 3fr)
            {% if include.version == 'v2' %}
            /* Path */
            minmax(150px, 5fr)
            /* Example */
            minmax(150px, 6fr)
            {% endif %}
            ;
    }

    thead,
    tbody,
    tr {
        display: contents;
    }

    th,
    td {
        padding: 15px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    th {
        position: sticky;
        top: 0;
        background: #6c7ae0;
        text-align: left;
        font-weight: normal;
        font-size: 1.1rem;
        height: 1.5em;
    }

    .wrap {
        overflow: auto; 
        word-wrap: break-word; 
        white-space: unset;
    }

    .resize-handle {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        background: black;
        opacity: 0;
        width: 3px;
        cursor: col-resize;
    }

    .resize-handle:hover,
    /* The following selector is needed so the handle is visible during resize even if the mouse isn't over the handle anymore */
    .header--being-resized .resize-handle {
        opacity: 0.5;
    }

    th:hover .resize-handle {
        opacity: 0.3;
    }

    #table-container {
        /* this needs to be 2x the table header height */
        scroll-padding-top: 3em;
    }

    .collapsible {
        cursor: pointer;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        padding-left: 8px;
        font-size: 24px;
    }

    .collapsible-content {
        display: none;
        overflow: hidden;
    }

    .border-none {
        border-collapse: collapse;
        border: none;
    }

    .border-none td {
        border: 1px solid lightgray;
    }

    .border-none tr:first-child td {
        border-top: none;
    }

    .border-none tr:last-child td {
        border-bottom: none;
    }

    .border-none tr td:first-child {
        border-left: none;
    }

    .border-none tr td:last-child {
        border-right: none;
    }
</style>

<div id="table-container" style="width: 100%; height: 100%; overflow: auto;">
    <table class="border-none">
        <thead>
            <tr>
                <th>Name<span class="resize-handle"></span></th>
                <th>Description<span class="resize-handle"></span></th>
                <th>Applies To<span class="resize-handle"></span></th>
                <th>Supplied In<span class="resize-handle"></span></th>
                <th>Table Type<span class="resize-handle"></span></th>
                <th>Column Name<span class="resize-handle"></span></th>
                <th>Data Type<span class="resize-handle"></span></th>
                <th>Size<span class="resize-handle"></span></th>
                <th>Field Name<span class="resize-handle"></span></th>
                <th>CCW Mapping<span class="resize-handle"></span></th>
                <th>CCLF Mapping<span class="resize-handle"></span></th>
                <th>Version<span class="resize-handle"></span></th>
                <th>Resource<span class="resize-handle"></span></th>
                <th>Element<span class="resize-handle"></span></th>
                <th>Discriminator<span class="resize-handle"></span></th>
                <th>Additional<span class="resize-handle"></span></th>
                <th>Derived<span class="resize-handle"></span></th>
                <th>Note<span class="resize-handle"></span></th>
                {% if include.version == 'v2' %}
                <th>Path<span class="resize-handle"></span></th>
                <th>Example<span class="resize-handle"></span></th>
                {% endif %}

            </tr>
        </thead>

        <tbody>
            {% if include.version == 'v2' %}
                {% for item in site.data.data-dictionary-v2 %}
                    {% include dd-table-row.liquid version=include.version %}
                {% endfor %}
            {% else %}
                {% for item in site.data.data-dictionary-v1 %}
                    {% include dd-table-row.liquid version=include.version %}
                {% endfor %}
            {% endif %}
        </tbody>
    </table>
</div>

// These are the basic imports that Jenkins interactive script console
// automatically includes.
import jenkins.*
import jenkins.model.*
import hudson.model.*
import java.util.logging.Logger
import jenkins.security.s2m.AdminWhitelistRule

// Disable CLI remoting, as its insecure and Jenkins yells about it.
// Reference: <://support.cloudbees.com/hc/en-us/articles/234709648-Disable-Jenkins-CLI>
Logger logger = Logger.getLogger("cli-shutdown.groovy")
logger.info("Disabling the Jenkins CLI...")

// disabled CLI access over TCP listener (separate port)
def p = AgentProtocol.all()
p.each { x ->
  if (x.name?.contains("CLI")) {
    logger.info("Removing protocol ${x.name}")
    p.remove(x)
  }
}

// disable CLI access over /cli URL
def removal = { lst ->
    lst.each { x ->
        if (x.getClass().name.contains("CLIAction")) {
            logger.info("Removing extension ${x.getClass().name}")
            lst.remove(x)
        }
    }
}
def j = Jenkins.instance
removal(j.getExtensionList(RootAction.class))
removal(j.actions)
logger.info("CLI disabled")

// Disable deprecated agent protocols.
// Reference: <https://github.com/jenkinsci/jenkins/commit/efdd52e9e78cc057ea49a7d338ee575d131c1959>
def agentProtocolWasDisabled = false
def agentProtocolNames = new HashSet(Jenkins.instance.getAgentProtocols())
jenkins.AgentProtocol.all().each { agentProtocol ->
    println "Checking: " + agentProtocol.name
    if (agentProtocol.isDeprecated() && agentProtocolNames.contains(agentProtocol.name)) {
        agentProtocolNames.remove(agentProtocol.name)
        agentProtocolWasDisabled = true
        println "Changed protocols: removed protocol: " + agentProtocol.name
    }
}
if (agentProtocolWasDisabled) {
  Jenkins.instance.setAgentProtocols(agentProtocolNames)
  Jenkins.instance.save()
}

// Enable CSRF, as its strongly recommended.
// Reference: <https://wiki.jenkins.io/display/JENKINS/CSRF+Protection>
if (Jenkins.instance.getCrumbIssuer() == null ) {
  Jenkins.instance.setCrumbIssuer(new hudson.security.csrf.DefaultCrumbIssuer(true))
  Jenkins.instance.save()
  println "Changed CSRF: enabled."
}

// This enabled slave -> master access control 
println "--> enabling slave master access control"
Jenkins.instance.injector.getInstance(AdminWhitelistRule.class)
    .setMasterKillSwitch(false);
Jenkins.instance.save()

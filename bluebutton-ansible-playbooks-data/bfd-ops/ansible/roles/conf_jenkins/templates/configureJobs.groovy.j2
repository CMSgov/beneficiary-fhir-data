// These are the basic imports that Jenkins interactive script console
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;


//
// Define the Helper Functions for Managing Projects
//

//
// Checks/updates the specified project.
//
def createOrUpdateProject = { projectName ->
  // Hardcode these values for all the Blue Button projects.
  projectParent = Jenkins.instance
  gitHubOrg = 'CMSgov'
  buildBranchesWithoutPullRequests = true
  buildBranchesWithPullRequests = true
  credentialsId = 'github-personal-access-token'

  boolean updated = false
  project = projectParent.getItem(projectName)

  if (project == null) {
    println "Project doesn't exist yet: '${projectName}'."
    project = new org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject(Jenkins.instance, projectName)
    projectParent.add(project, projectName)
    updated = true
  }

  source = project.getSourcesList().find {
    it instanceof jenkins.branch.BranchSource &&
    it.source instanceof org.jenkinsci.plugins.github_branch_source.GitHubSCMSource &&
    it.source.repoOwner == gitHubOrg &&
    it.source.repository == projectName
  }

  if (source == null) {
    println "Matching source config not found for project: '${projectName}'."
    source = new jenkins.branch.BranchSource(new org.jenkinsci.plugins.github_branch_source.GitHubSCMSource(gitHubOrg, projectName))
    project.getSourcesList().add(source)
    updated = true
  }

  if (source.source.credentialsId != credentialsId) {
    println "Source config did not have correct credentials on project: '${projectName}'."
    source.source.credentialsId = credentialsId
    updated = true
  }

  branchDiscoveryTrait = source.source.traits.find { it instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait }
  if (branchDiscoveryTrait == null) {
    println "Source config did not have branch discovery trait on project: '${projectName}'."
    branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(buildBranchesWithoutPullRequests, buildBranchesWithPullRequests)
    source.source.traits.add(branchDiscoveryTrait)
    updated = true
  }

  for (int scmTraitIndex = 0; scmTraitIndex < source.source.traits.size(); scmTraitIndex++) {
    scmTrait = source.source.traits.get(scmTraitIndex)
    if (
        scmTrait instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait &&
        scmTrait.isBuildBranch() != buildBranchesWithoutPullRequests &&
        scmTrait.isBuildBranchesWithPR() != buildBranchesWithPullRequests
    ) {
      println "Source config did not have correct branch discovery trait on project: '${projectName}'."
      source.source.traits.remove(scmTraitIndex)
      branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(
          buildBranchesWithoutPullRequests,
          buildBranchesWithPullRequests
      )
      source.source.traits.add(branchDiscoveryTrait)
      updated = true
    }
  }

  if (updated) {
    project.save()
    println "Changed project: '${projectName}'."
  }
}

//
// Creates/updates the specified file credentials.
//
def createOrUpdateFileCredentials = { newSecret ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    org.jenkinsci.plugins.plaincredentials.FileCredentials.class,
    Jenkins.instance
  )

  id = newSecret.id
  matchingSecret = secrets.find { secret -> secret.id == id }
  if (matchingSecret) {
    println "Secret found: ${matchingSecret.id}"

    if (newSecret.scope != matchingSecret.scope ||
        newSecret.description != matchingSecret.description ||
        newSecret.fileName != matchingSecret.fileName ||
        newSecret.secretBytes != matchingSecret.secretBytes) {
      updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
      if (updateResult) {
        println "Changed: secret updated: ${id}"
      } else {
        println "Secret failed to update: ${id}"
      }
    }
  } else {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed: secret created: ${id}"
  }
}

//
// Creates/updates the specified String credentials.
//
def createOrUpdateStringCredentials = { newSecret ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()
  
  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    org.jenkinsci.plugins.plaincredentials.StringCredentials.class,
    Jenkins.instance
  )
  
  id = newSecret.id
  matchingSecret = secrets.find { secret -> secret.id == id }
  
  if (matchingSecret) {
    println "Secret found: ${matchingSecret.id}"
    
    if (hudson.util.Secret.toString(newSecret.secret) != hudson.util.Secret.toString(matchingSecret.secret)) {
      updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)  
      if (updateResult) {
        println "Changed: secret updated: ${id}" 
      } else {
        println "Secret failed to update: ${id}"
      }
    }
  } else {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed: secret created: ${id}"
  }
}


//
// Create/Update All of the Projects
//

createOrUpdateFileCredentials(
  new org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'bluebutton-ansible-playbooks-data-ansible-vault-password',
    'bluebutton-ansible-playbooks-data-ansible-vault-password',
    'vault.password',
    com.cloudbees.plugins.credentials.SecretBytes.fromString('{{ vault_jenkins_bluebutton_ansible_playbooks_data_ansible_vault_password | b64encode }}')
  )
)

createOrUpdateFileCredentials(
  new org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'bluebutton-data-server-perf-tests-ansible-vault-password',
    'bluebutton-data-server-perf-tests-ansible-vault-password',
    'vault.password',
    com.cloudbees.plugins.credentials.SecretBytes.fromString('{{ vault_jenkins_bluebutton_data_server_perf_tests_ansible_vault_password | b64encode }}')
  )
)

createOrUpdateStringCredentials(
  new org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'proxy-host',
    'The HTTP/S proxy server host to use.',
    hudson.util.Secret.fromString('{{ vault_proxy_host }}')
  )
)

createOrUpdateStringCredentials(
  new org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'proxy-port',
    'The HTTP/S proxy server port to use.',
    hudson.util.Secret.fromString('{{ vault_proxy_port }}')
  )
)

projectNames = [
  'bluebutton-parent-pom',
  'bluebutton-data-model',
  'bluebutton-data-pipeline',
  'bluebutton-data-server',
  'bluebutton-ansible-playbooks-data',
  'bluebutton-data-server-perf-tests'
]

for (projectName in projectNames) {
  createOrUpdateProject(projectName)
}

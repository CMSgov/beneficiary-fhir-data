---
- name: Read Jenkins Config File
  slurp:
    src: "{{ jenkins_home }}/config.xml"
  become: true
  changed_when: false
  register: slurp_jenkins_config

- name: Determine Active Security Settings
  set_fact:
    # Yes, I'm parsing XML with a regex, and yes that's bad. But it's almost
    # certainly "good enough" in this instance, so.
    jenkins_active_security_realm: "{{ slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<securityRealm class=\"([^\"]+)\".*', '\\1') }}"
    # Note: this will be a string value; use the `| bool` filter on it if a boolean is needed.
    jenkins_security_enabled: "{{ true if (slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<useSecurity>([^<].*)</useSecurity>.*', '\\1')) == 'true' else false }}"

- name: Calculate API Connection Variables
  set_fact:
    # All communication with the Jenkins API will be done over localhost, for security.
    jenkins_url_local: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path }}"
    # The actual username and password used are dynamic to ensure that anon logins are used post-install (before security has been configured).
    jenkins_dynamic_admin_username: "{{ (vault_jenkins_admin_username | default(None)) if (jenkins_security_enabled | bool) else None }}"
    jenkins_dynamic_admin_password: "{{ (vault_jenkins_admin_password | default(None)) if (jenkins_security_enabled | bool) else None }}"

- name: Create Jenkins Init Script Directory
  # Reference: https://wiki.jenkins-ci.org/display/JENKINS/Post-initialization+script
  file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  become: true

- name: Configure Jenkins (Miscellaneous Settings)
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: "{{ lookup('template', 'templates/configMiscSettings.groovy.j2') }}"
  register: shell_jenkins_config_misc
  changed_when: "(shell_jenkins_config_misc is success) and 'Changed' in shell_jenkins_config_misc.output"

- name: Configure Security Recommendations
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: "{{ lookup('template', 'templates/configSecrec.groovy.j2') }}"
  register: shell_jenkins_security_recommendations
  changed_when: "(shell_jenkins_security_recommendations is success) and 'Changed' in shell_jenkins_security_recommendations.output"

- name: Configure File Provider Plugin
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: "{{ lookup('template', 'templates/configureFileProvider.groovy.j2') }}"
  register: jenkins_script_file_provider
  changed_when: "(jenkins_script_file_provider is success) and 'Changed' in jenkins_script_file_provider.output"

 - name: Install Maven with Autoinstaller
   jenkins_script:
     url: "{{ jenkins_url_local }}"
     user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
     password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
     script: "{{ lookup('template', 'templates/configMavenAutoinstaller.groovy.j2') }}"
   register: jenkins_script_maven
   changed_when: "(jenkins_script_maven is success) and 'Changed' in jenkins_script_maven.output"
  
- name: Configure GitHub Settings
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: "{{ lookup('template', 'templates/configureGitHub.groovy.j2') }}"
  register: jenkins_script_github
  changed_when: "(jenkins_script_github is success) and 'Changed' in jenkins_script_github.output"

- name: Configure Basic Auth
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: "{{ lookup('template', 'templates/basicauth.groovy.j2') }}"
  register: jenkins_script_basicauth
  changed_when: "(jenkins_script_basicauth is success) and 'Changed' in jenkins_script_basicauth.output"
  
# This keypair was created per the instructions here:
# <http://central.sonatype.org/pages/working-with-pgp-signatures.html>.
- name: GPG Key - Copy
  copy:
    dest: "/var/lib/jenkins/{{ item.dest_name }}"
    content: "{{ item.content }}"
    owner: jenkins
    group: jenkins
    mode: u=r,g=,o=
  register: copy_gpg_build_key
  become: true
  no_log: true
  with_items:
    - dest_name: gpg-bluebutton-build-key-public.asc
      content: "{{ lookup('file', 'files/gpg-bluebutton-build-key-public.asc') }}"
    - dest_name: gpg-bluebutton-build-key-private.asc
      content: "{{ vault_gpg_bluebutton_build_key_private }}"

- name: GPG Key - Import
  command: gpg --no-tty --import "/var/lib/jenkins/{{ item }}"
  when: copy_gpg_build_key.changed
  become: true
  become_user: jenkins
  with_items:
    - gpg-bluebutton-build-key-public.asc
    - gpg-bluebutton-build-key-private.asc
    
#Fire any pending restart handlers now, or else the tests below here may not be valid.
- meta: flush_handlers

- name: Ensure Service 'jenkins' Is Running
  service:
    name: jenkins
    state: started
    enabled: yes
  become: true

- name: Grab Jenkins Web UI Content
  # By default, Jenkins 2 is set to require auth, so the only page we can grab
  # without getting a 403 and redirect is the login page.
  uri:
    url: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }}/login"
    return_content: true
  environment:
    no_proxy: localhost
  register: jenkins_ui

- name: Verify Jenkins Web UI Content
  action: fail
  when: "'Jenkins' not in jenkins_ui.content"
  
- name: Create/Update Jenkins Jobs
  import_tasks: jobs.yml

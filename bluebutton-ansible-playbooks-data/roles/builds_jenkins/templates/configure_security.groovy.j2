// These are the basic imports that Jenkins interactive script console
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;


//
// Define the Helper Functions for Comparing Configurations
//

//
// Determines if two List<ActiveDirectoryDomain> instances are equal.
//
def areDomainListsEqual = { domainList1, domainList2 ->
  if (domainList1 == null && domainList2 != null) return false
  if (domainList2 == null && domainList1 != null) return false
  if (domainList1 == null) return true
  if (domainList1.size() != domainList2.size()) return false

  for (int i = 0; i < domainList1.size(); i++) {
    hudson.plugins.active_directory.ActiveDirectoryDomain domain1 = domainList1.get(i);
    hudson.plugins.active_directory.ActiveDirectoryDomain domain2 = domainList2.get(i);
    if (domain1 == null && domain2 != null) return false
    if (domain2 == null && domain1 != null) return false
	if (domain1 == null) continue

    if (domain1.getName() != domain2.getName()) return false
    if (domain1.getServers() != domain2.getServers()) return false
    if (domain1.getBindName() != domain2.getBindName()) return false
    if ((domain1.getBindPassword() == null) != (domain2.getBindPassword() == null)) return false
	if (domain1.getBindPassword() != null) {
	  if (domain1.getBindPassword().getPlainText() != domain2.getBindPassword().getPlainText()) return false
    }
    if (domain1.getSite() != domain2.getSite()) return false
  }
  return true
}

//
// Determines if two SecurityRealms are equal.
//
def areSecurityRealmsEqual = { realm1, realm2 ->
  if (realm1 == null && realm2 != null) return false
  if (realm2 == null && realm1 != null) return false
  if (realm1.getClass() != realm2.getClass()) return false

  if (realm1.getClass() == hudson.security.HudsonPrivateSecurityRealm.class) {
    if (realm1.allowsSignup() != realm2.allowsSignup()) return false
    if (realm1.isEnableCaptcha() != realm2.isEnableCaptcha()) return false
  } else if (realm1.getClass() == hudson.plugins.active_directory.ActiveDirectorySecurityRealm.class) {
    if (!areDomainListsEqual(realm1.getDomains(), realm2.getDomains())) return false
    if (realm1.isStartTls() != realm2.isStartTls()) return false
    if (realm1.getGroupLookupStrategy() != realm2.getGroupLookupStrategy()) return false
    if (realm1.removeIrrelevantGroups != realm2.removeIrrelevantGroups) return false
    if (realm1.getSize() != realm2.getSize()) return false
    if (realm1.getTtl() != realm2.getTtl()) return false
	if (hudson.plugins.active_directory.ActiveDirectorySecurityRealm.EnvironmentProperty.toMap(realm1.getEnvironmentProperties()) != hudson.plugins.active_directory.ActiveDirectorySecurityRealm.EnvironmentProperty.toMap(realm2.getEnvironmentProperties())) return false
	if (realm1.getTlsConfiguration() != realm2.getTlsConfiguration()) return false
    if (realm1.getJenkinsInternalUser() != realm2.getJenkinsInternalUser()) return false
  } else {
    throw new IllegalArgumentException()
  }
  return true
}

//
// Determines if two AuthorizationStrategy instances are equal.
//
def areAuthorizationStrategiesEqual = { authzStrat1, authzStrat2 ->
  if (authzStrat1 == null && authzStrat2 != null) return false
  if (authzStrat2 == null && authzStrat1 != null) return false
  if (authzStrat1.getClass() != authzStrat2.getClass()) return false

  if (authzStrat1.getClass() != hudson.security.FullControlOnceLoggedInAuthorizationStrategy.class) throw new IllegalArgumentException()
  if (authzStrat1.isAllowAnonymousRead() != authzStrat2.isAllowAnonymousRead()) return false
  return true
}


//
// Configure Jenkins authentication and authorization (using above methods).
//

// Configure the security realm, which handles authentication.
def domain = new hudson.plugins.active_directory.ActiveDirectoryDomain(
  '{{ vault_jenkins_domain.name }}',
  '{{ vault_jenkins_domain.server }}',
  null, // param: site
  '{{ vault_jenkins_domain.bind_user_dn }}',
  '{{ vault_jenkins_domain.bind_user_password }}'
)
def securityRealm = new hudson.plugins.active_directory.ActiveDirectorySecurityRealm(
  null, // param: domain
  [domain],
  null, // param: site
  null, // param: bindName
  null, // param: bindPassword
  null, // param: server
  hudson.plugins.active_directory.GroupLookupStrategy.AUTO,
  false, // param: removeIrrelevantGroups
  null, // param: customDomain
  null, // param: cacheConfiguration
  true // param: startTls
)
if(!areSecurityRealmsEqual(securityRealm, Jenkins.instance.getSecurityRealm())) {
  Jenkins.instance.setSecurityRealm(securityRealm)
  Jenkins.instance.save()
  println "Changed authentication."
} else { println("Authentication already correct.") }

// Configure the authorization strategy, which specifies who can do what.
def authorizationStrategy = new hudson.security.FullControlOnceLoggedInAuthorizationStrategy()
authorizationStrategy.setAllowAnonymousRead(false)
if(!areAuthorizationStrategiesEqual(authorizationStrategy, Jenkins.instance.getAuthorizationStrategy())) {
  Jenkins.instance.setAuthorizationStrategy(authorizationStrategy)
  Jenkins.instance.save()
  println "Changed authorization."
} else { println("Authorization already correct.") }

---
- name: Prepare
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Create Local Results Directory 
      file:
        path: results
        state: directory

    - name: Create Local Support Directory 
      file:
        path: support
        state: directory
        
    # The EC2 instances created within this AWS environment are not internet
    # facing. So, assuming the host running this script is internet facing,
    # download the jmeter package locally so it can be uploaded to the instances
    # from this host.  Another strategy would be to just create an AMI used by
    # the EC2 instances that already includes this package.
    - name: Download JMeter locally
      get_url:
        url: "http://archive.apache.org/dist/jmeter/binaries/apache-jmeter-{{ jmeter_version }}.tgz"
        dest: "support/apache-jmeter-{{ jmeter_version }}.tgz"

- name: Configure Systems for Ansible Pipelining
  hosts: client:servers
  vars:
    ansible_ssh_pipelining: false
  roles:
    - rhel_ansible_pipelining

- name: Configure roles common to all servers 
  hosts: client:servers
  become: True
  gather_facts: True
#  environment: "{{proxy_env}}"
  roles:
    - common

- name: Configure roles specific to jmeter client instance
  hosts: client
  become: True
  gather_facts: True
#  environment: "{{proxy_env}}"
  roles:
    - client 

- name: Configure roles specific to jmeter server instance(s)
  hosts: servers
  become: True
  gather_facts: True
#  environment: "{{proxy_env}}"
  roles:
    - server 

- name: Launch JMeter servers
  hosts: servers
  become: True
#  environment: "{{proxy_env}}"
  gather_facts: True
  
  tasks:
    - name: Launch JMeter Server in Background
      # The "JMeter Server" is what the distributed testing nodes run.
      shell: "nohup {{ remote_jmeter_dir }}/bin/jmeter -s 
        -Djava.rmi.server.hostname={{ ansible_eth0.ipv4.address }}
        -Dserver.rmi.localport={{ jmeter_server_rmi_local_port }} 
        -Dserver_port={{ jmeter_server_port }} 
        -j {{ remote_test_dir }}/log-jmeter.txt
        &> {{ remote_test_dir }}/log-jmeter-console.txt &" 

- name: Launch JMeter client and start tests
  hosts: client
  become: True
#  environment: "{{proxy_env}}"
  gather_facts: True
  
  tasks:
    
    - name: 'Run Stress'
      # Command Line Docs: http://jmeter.apache.org/usermanual/get-started.html
      command: "{{ remote_jmeter_dir }}/bin/jmeter -n -X 
        -Dclient.rmi.localport={{ jmeter_client_rmi_local_port }} 
        -Dserver_port={{ jmeter_server_port }} 
        -t{{ remote_test_dir }}/jmeter-fhir-test.jmx 
        -l{{ remote_test_dir }}/log.jtl 
        -j{{ remote_test_dir }}/log-jmeter.txt 
        -R{{ hostvars | get_members(groups, 'servers') | map(attribute='ansible_fqdn') | list | join(',') }}
        -Jfhir_server={{ fhir_server }} 
        -Jthread_count={{ thread_count }} 
        -Jthread_loops={{ thread_loops }} 
        -Gcontinue_forever={{ continue_forever | bool | lower }} 
        -Gscheduler={{ scheduler | bool | lower }} 
        -Gduration={{ duration }}"

      # Added async and polling  because some servers will disconnect the ssh 
      # connection prior to test completion causing the ansible script to fail
      async: "{{ duration + (2*poll) }}" 
      poll: "{{ poll }}" 

    - name: Collect Results
      fetch: 
        src: "{{ remote_test_dir }}/log.jtl"
        dest: "results/"
        fail_on_missing: yes
        flat: yes
    
    - name: Collect Logs
      fetch: 
        src: "{{ remote_test_dir }}/log-jmeter.txt"
        dest: "results/"
        fail_on_missing: yes
        flat: yes

---
##
# Provisions temporary test clients and servers in the active AWS account
# Runs the stress test, and tears down test clients and servers

- name: AWS - Provision Resources and Instances
  hosts: localhost
  connection: local
  gather_facts: false


  # Needs to be specified here, as it's not configured properly on the host
  # itself. (Note: `169.254.169.254` is the EC2 instance metadata address, per
  # <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html>.)
  environment:
    no_proxy: 'localhost,169.254.169.254'
    http_proxy: "http://{{ vault_proxy_host }}:{{ vault_proxy_port }}"
    https_proxy: "http://{{ vault_proxy_host }}:{{ vault_proxy_port }}"

  vars_files: 
    - vars/{{ target_env }}.yml
  vars:
    # "Compute Optimized" with 4 vCPUs, 7.5 GB RAM, $0.209/hour
    ec2_instance_type: "c4.xlarge"
  
  tasks:
    
    - name: Local - whoami
      local_action: command whoami
      register: whoami

    # TODO: Fix this
    #- name: Acquire a session token
    #  sts_session_token:
    #    profile: "{{ profile }}"
    #    region: "{{ region }}"
    #    mfa_serial_number: "{{ mfa_sn }}"
    #    mfa_token: "{{ mfa }}"
    #  register: session_credentials

    - name: EC2 - Provision 'bluebutton-stress' client
      ec2:
        key_name: "{{ ec2_key_name }}"
        group_id: "{{ security_group_ids }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ami_id_rhel }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id }}" 
        wait: true
        exact_count: 1
        count_tag:
          Name: bluebutton-stress-client
          Application: "{{ app_tag }}"
        instance_tags:
          Name: bluebutton-stress-client
          APPLICATION: "{{ app_tag }}"
          TIER: "{{ tier_tag }}"
          PURPOSE: bluebutton-stress-client
          ENVIRONMENT: "{{ env_tag }}"
          CreatedBy: "{{ whoami.stdout }}"
          CONTRACT: BBAPI
      register: ec2_client
    
    - name: EC2 - Provision 'bluebutton-stress' servers
      ec2:
        key_name: "{{ ec2_key_name }}"
        group_id: "{{ security_group_ids }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ami_id_rhel }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id }}" 
        wait: true
        # The default of 300s here wasn't cutting it for 8 servers.
        wait_timeout: 600
        exact_count: "{{ num_servers }}" 
        count_tag:
          Name: bluebutton-stress-server
          Application: "{{ app_tag }}"
        instance_tags:
          Name: bluebutton-stress-server
          APPLICATION: "{{ app_tag }}"
          TIER: "{{ tier_tag }}"
          PURPOSE: bluebutton-stress-server
          ENVIRONMENT: "{{ env_tag }}"
          CreatedBy: "{{ whoami.stdout }}"
          CONTRACT: BBAPI
      register: ec2_servers
    
    - name: Create inventory group 'client'
      add_host:
        hostname: "{{ item.private_dns_name }}"
        ansible_user: "{{ vault_ssh_user }}"
        groupname: client
      with_items: "{{ ec2_client.instances }}"

    - name: Create inventory group 'servers'
      add_host:
        hostname: "{{ item.private_dns_name }}"
        ansible_user: "{{ vault_ssh_user }}"
        groupname: servers
      with_items: "{{ ec2_servers.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        timeout: 320
        host: "{{ item.private_dns_name }}"
        port: 22
        state: started
      with_flattened:
        - "{{ ec2_client.instances }}"
        - "{{ ec2_servers.instances }}"

- import_playbook: fhir-stress-test.yml

- name: Terminate instances
  hosts: localhost
  connection: local
  vars_files: 
    - vars/{{ target_env }}.yml
  tasks:
    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        region: "{{ region }}"
        instance_ids: '{{ item }}'
      with_flattened:
        - "{{ ec2_client.instance_ids }}"
        - "{{ ec2_servers.instance_ids }}"

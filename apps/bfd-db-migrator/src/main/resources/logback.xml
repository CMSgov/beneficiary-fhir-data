<?xml version="1.0"?>
<configuration scan="false">
  <!-- Required to ensure that JUL respects log level changes. -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
      <!-- We output the application log as newline-delimited JSON objects (NDJSON). This allows us to easily parse and search our logs. More importantly, it pairs very nicely with Logback's MDC: values added to the MDC will be available as separate keys in the JSON log events, which makes it super easy to extract them from the logs. -->
      <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
        <jsonFormatter class="ch.qos.logback.contrib.jackson.JacksonJsonFormatter">
          <!-- If you need things pretty-printed, pipe the log into jq or something like that. -->
          <prettyPrint>false</prettyPrint>
        </jsonFormatter>
        <!-- Add line breaks between each entry, to make tailing the log simpler (and so it's actually NDJSON). -->
        <appendLineSeparator>true</appendLineSeparator>
        <!-- Format timestamps per ISO8601. -->
        <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSZ</timestampFormat>
        <timestampFormatTimezoneId>UTC</timestampFormatTimezoneId>
      </layout>
    </encoder>
  </appender>
  <!-- Configure the root logger to filter to 'info' and more severe, and send all events to 'STDOUT'. -->
  <root level="info">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>

package gov.cms.bfd.sharedutils.database;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import javax.sql.DataSource;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Value;
import software.amazon.jdbc.ConnectionPluginFactory;
import software.amazon.jdbc.ds.AwsWrapperDataSource;
import software.amazon.jdbc.plugin.AuroraConnectionTrackerPluginFactory;
import software.amazon.jdbc.plugin.AuroraInitialConnectionStrategyPluginFactory;
import software.amazon.jdbc.plugin.AwsSecretsManagerConnectionPluginFactory;
import software.amazon.jdbc.plugin.ConnectTimeConnectionPluginFactory;
import software.amazon.jdbc.plugin.DataCacheConnectionPluginFactory;
import software.amazon.jdbc.plugin.DriverMetaDataConnectionPluginFactory;
import software.amazon.jdbc.plugin.ExecutionTimeConnectionPluginFactory;
import software.amazon.jdbc.plugin.LogQueryConnectionPluginFactory;
import software.amazon.jdbc.plugin.dev.DeveloperConnectionPluginFactory;
import software.amazon.jdbc.plugin.efm.HostMonitoringConnectionPluginFactory;
import software.amazon.jdbc.plugin.failover.FailoverConnectionPluginFactory;
import software.amazon.jdbc.plugin.federatedauth.FederatedAuthPluginFactory;
import software.amazon.jdbc.plugin.federatedauth.OktaAuthPluginFactory;
import software.amazon.jdbc.plugin.iam.IamAuthConnectionPluginFactory;
import software.amazon.jdbc.plugin.readwritesplitting.ReadWriteSplittingPluginFactory;
import software.amazon.jdbc.plugin.staledns.AuroraStaleDnsPluginFactory;
import software.amazon.jdbc.plugin.strategy.fastestresponse.FastestResponseStrategyPluginFactory;

/** The user-configurable options that specify how to access the application's database. */
@Getter
@EqualsAndHashCode
public final class DatabaseOptions {
  /** Regex that matches proper JDBC URLs and extracts groups containing their host and port. */
  private static final Pattern URL_PATTERN =
      Pattern.compile("^jdbc:[a-z]+://([^:/]+)(:([0-9]+))?/", Pattern.CASE_INSENSITIVE);

  /** Group number for host matched by {@link #URL_PATTERN}. */
  private static final int URL_HOST_GROUP = 1;

  /** Group number for port matched by {@link #URL_PATTERN}. */
  private static final int URL_PORT_GROUP = 3;

  /** Used to define how to authenticate with the database. */
  public enum AuthenticationType {
    /** Authenticate using plain JDBC authentication with a provided password. * */
    JDBC,
    /** Authentication using an RDS generated token in place of a provided password. * */
    RDS
  }

  /**
   * Used to define which type of {@link DataSource} is used by the application to connect to the
   * database.
   */
  public enum DataSourceType {
    /** Specifies that a {@link HikariDataSource} should be used. */
    HIKARI,
    /** Specifies that a {@link AwsWrapperDataSource} should be used. */
    AWS_WRAPPER
  }

  /** How to authenticate with the database. */
  private final AuthenticationType authenticationType;

  /** Which type of {@link DataSource} to use. */
  private final DataSourceType dataSourceType;

  /** The JDBC URL of the database. */
  private final String databaseUrl;

  /** The username for the database. */
  private final String databaseUsername;

  /** The password for the database. */
  private final String databasePassword;

  /**
   * Options configuring either an "external" {@link HikariDataSource} or the internal Hikari
   * connection pool of the {@link AwsWrapperDataSource}.
   */
  private final HikariOptions hikariOptions;

  /**
   * Options configuring the {@link AwsWrapperDataSource}, if specified by {@link #dataSourceType}.
   * Nullable, as these options can be omitted in the case where {@link #dataSourceType} is {@link
   * DataSourceType#HIKARI}.
   */
  @Nullable private final AwsJdbcWrapperOptions awsJdbcWrapperOptions;

  /**
   * Initializes an instance. The builder class generated by lombok calls this constructor.
   *
   * @param authenticationType optional value to use for {@link #authenticationType}
   * @param dataSourceType optional value to use for {@link #dataSourceType}
   * @param databaseUrl the value to use for {@link #databaseUrl}
   * @param databaseUsername the value to use for {@link #databaseUsername}
   * @param databasePassword optional value to use for {@link #databasePassword}
   * @param hikariOptions the value to use for {@link #hikariOptions}
   * @param awsJdbcWrapperOptions the value to use for {@link #awsJdbcWrapperOptions}
   */
  @Builder(toBuilder = true)
  private DatabaseOptions(
      @Nullable AuthenticationType authenticationType,
      @Nullable DataSourceType dataSourceType,
      String databaseUrl,
      String databaseUsername,
      @Nullable String databasePassword,
      HikariOptions hikariOptions,
      @Nullable AwsJdbcWrapperOptions awsJdbcWrapperOptions) {
    Preconditions.checkArgument(
        !Strings.isNullOrEmpty(databaseUrl), "databaseUrl must be non-empty");
    Preconditions.checkNotNull(databaseUsername, "databaseUsername must not be null");
    Preconditions.checkArgument(
        authenticationType == AuthenticationType.RDS || databasePassword != null);
    Preconditions.checkArgument(
        dataSourceType != DataSourceType.AWS_WRAPPER || awsJdbcWrapperOptions != null,
        "AWS JDBC Wrapper options must be specified if the dataSourceType is specified as AWS_WRAPPER");
    Preconditions.checkNotNull(hikariOptions, "hikariOptions must not be null");
    this.dataSourceType = dataSourceType != null ? dataSourceType : DataSourceType.HIKARI;
    this.authenticationType =
        authenticationType != null ? authenticationType : AuthenticationType.JDBC;
    this.databaseUrl = databaseUrl;
    this.databaseUsername = databaseUsername;
    this.databasePassword = databasePassword;
    this.hikariOptions = hikariOptions;
    this.awsJdbcWrapperOptions = awsJdbcWrapperOptions;
  }

  /**
   * Parses the database host from the {@link #databaseUrl}. Used with RDS authentication.
   *
   * @return host or empty if parsing fails
   */
  public Optional<String> getDatabaseHost() {
    return parseUrl(URL_HOST_GROUP);
  }

  /**
   * Parses the database port from the {@link #databaseUrl}. Used with RDS authentication.
   *
   * @return port or empty if parsing fails
   */
  public Optional<Integer> getDatabasePort() {
    return parseUrl(URL_PORT_GROUP).map(Integer::parseInt);
  }

  /**
   * Parses {@link #databaseUrl} to obtain a match group.
   *
   * @param groupNumber number of the match group to return
   * @return matched group value from the URL (if any)
   */
  private Optional<String> parseUrl(int groupNumber) {
    final Matcher matcher = URL_PATTERN.matcher(databaseUrl);
    if (matcher.find() && matcher.groupCount() >= groupNumber) {
      return Optional.of(matcher.group(groupNumber));
    } else {
      return Optional.empty();
    }
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("DatabaseOptions [databaseUrl=");
    builder.append(databaseUrl);
    builder.append(", databaseUsername=");
    builder.append("***");
    builder.append(", databasePassword=");
    builder.append("***");
    builder.append(", hikariOptions=");
    builder.append(hikariOptions);
    if (awsJdbcWrapperOptions != null) {
      builder.append(", awsJdbcWrapperOptions=");
      builder.append(awsJdbcWrapperOptions);
    }
    builder.append("]");
    return builder.toString();
  }

  /**
   * User-configurable options for a subset of relevant HikariCP configuration consumed by all
   * supported {@link DataSource} types.
   */
  @Value
  public static class HikariOptions {
    /** Maximum size of the connection pool. Corresponds to {@link HikariConfig#maxPoolSize}. */
    int maximumPoolSize;

    /**
     * Minimum number of idle connections to always maintain in the pool. Corresponds to {@link
     * HikariConfig#minIdle}.
     */
    int minimumIdleConnections;

    /**
     * Maximum amount of time a connection is allowed to sit idle in the pool. Corresponds to {@link
     * HikariConfig#idleTimeout}.
     */
    long idleTimeoutMs;

    /**
     * Determines how the connection pool handles initial connection failures. A positive number
     * specifies the timeout for attempting to acquire an initial connection; if unsuccessful within
     * this period, an exception is thrown. Only applies after the "connection timeout" ({@link
     * #connectionTimeoutMs}) Corresponds to {@link HikariConfig#initializationFailTimeout}.
     */
    long initializationFailTimeoutMs;

    /**
     * Maximum amount of time the application will wait for a connection from the pool. Corresponds
     * to {@link HikariConfig#connectionTimeout}.
     */
    long connectionTimeoutMs;

    /**
     * How frequently HikariCP will attempt to keep a connection alive in order to prevent it from
     * being timed out. Must be less than the "max lifetime" ({@link #maxConnectionLifetimeMs}).
     * Corresponds to {@link HikariConfig#keepaliveTime}.
     */
    long keepaliveTimeMs;

    /**
     * Controls the maximum amount of time a connection will be tested for aliveness. Must be less
     * than the "connection timeout" {@link #connectionTimeoutMs}. Corresponds to {@link
     * HikariConfig#validationTimeout}.
     */
    long validationTimeoutMs;

    /**
     * Maximum lifetime of a connection in the pool. Corresponds to {@link
     * HikariConfig#maxLifetime}.
     */
    long maxConnectionLifetimeMs;

    /**
     * Initializes an instance. The builder class generated by lombok calls this constructor.
     *
     * @param maximumPoolSize the value to use for {@link #maximumPoolSize}
     * @param minimumIdleConnections the value to use for {@link #minimumIdleConnections}
     * @param idleTimeoutMs the value to use for {@link #idleTimeoutMs}
     * @param initializationFailTimeoutMs the value to use for {@link #initializationFailTimeoutMs}
     * @param connectionTimeoutMs the value to use for {@link #connectionTimeoutMs}
     * @param keepaliveTimeMs the value to use for {@link #keepaliveTimeMs}
     * @param validationTimeoutMs the value to use for {@link #validationTimeoutMs}
     * @param maxConnectionLifetimeMs the value to use for {@link #maxConnectionLifetimeMs}
     */
    @Builder(toBuilder = true)
    private HikariOptions(
        int maximumPoolSize,
        int minimumIdleConnections,
        long idleTimeoutMs,
        long initializationFailTimeoutMs,
        long connectionTimeoutMs,
        long keepaliveTimeMs,
        long validationTimeoutMs,
        long maxConnectionLifetimeMs) {
      this.maximumPoolSize = maximumPoolSize;
      this.minimumIdleConnections = minimumIdleConnections;
      this.idleTimeoutMs = idleTimeoutMs;
      this.initializationFailTimeoutMs = initializationFailTimeoutMs;
      this.connectionTimeoutMs = connectionTimeoutMs;
      this.keepaliveTimeMs = keepaliveTimeMs;
      this.validationTimeoutMs = validationTimeoutMs;
      this.maxConnectionLifetimeMs = maxConnectionLifetimeMs;
    }
  }

  /**
   * User-configurable options for a subset of relevant AWS JDBC Wrapper configuration consumed by
   * the {@link AwsWrapperDataSource}.
   */
  @Value
  public static class AwsJdbcWrapperOptions {
    /**
     * Static map of JDBC wrapper plugins names to their respective factories. Used to configure the
     * custom preset. Taken directly from {@link software.amazon.jdbc.ConnectionPluginChainBuilder}.
     */
    private static final Map<String, Class<? extends ConnectionPluginFactory>>
        pluginFactoriesByCode =
            new HashMap<>() {
              {
                put("executionTime", ExecutionTimeConnectionPluginFactory.class);
                put("logQuery", LogQueryConnectionPluginFactory.class);
                put("dataCache", DataCacheConnectionPluginFactory.class);
                put("efm", HostMonitoringConnectionPluginFactory.class);
                put(
                    "efm2",
                    software.amazon.jdbc.plugin.efm2.HostMonitoringConnectionPluginFactory.class);
                put("failover", FailoverConnectionPluginFactory.class);
                put("iam", IamAuthConnectionPluginFactory.class);
                put("awsSecretsManager", AwsSecretsManagerConnectionPluginFactory.class);
                put("federatedAuth", FederatedAuthPluginFactory.class);
                put("okta", OktaAuthPluginFactory.class);
                put("auroraStaleDns", AuroraStaleDnsPluginFactory.class);
                put("readWriteSplitting", ReadWriteSplittingPluginFactory.class);
                put("auroraConnectionTracker", AuroraConnectionTrackerPluginFactory.class);
                put("driverMetaData", DriverMetaDataConnectionPluginFactory.class);
                put("connectTime", ConnectTimeConnectionPluginFactory.class);
                put("dev", DeveloperConnectionPluginFactory.class);
                put("fastestResponseStrategy", FastestResponseStrategyPluginFactory.class);
                put("initialConnection", AuroraInitialConnectionStrategyPluginFactory.class);
              }
            };

    /**
     * Whether a custom preset should be generated based upon the given {@link #basePresetCode} and
     * configuration values from this class and {@link HikariOptions}. If {@literal false}, the
     * preset specified by {@link #basePresetCode} will be used, and all configuration (including
     * {@link HikariOptions}) besides {@link #hostSelectionStrategy} and {@link
     * #initialConnectionStrategy} will be ignored in favor of the defaults provided by the
     * specified preset.
     */
    boolean useCustomPreset;

    /**
     * The AWS JDBC Wrapper configuration preset to either base a custom preset off of, if {@link
     * #useCustomPreset} is {@literal true}, or the preset to use it its entirety.
     */
    String basePresetCode;

    /** List of "plugin factories" that specify the plugins used by the AWS JDBC Wrapper. */
    ImmutableList<Class<? extends ConnectionPluginFactory>> plugins;

    /**
     * The host selection strategy determining how the internal connection pooling mechanisms of the
     * {@link AwsWrapperDataSource} will choose a node to connect to.
     */
    String hostSelectionStrategy;

    /**
     * The initial connection strategy determining how the internal connection pooling mechanisms of
     * the {@link AwsWrapperDataSource} will choose which node to initially connect to.
     */
    String initialConnectionStrategy;

    /**
     * Initializes an instance. The builder class generated by lombok calls this constructor.
     *
     * @param useCustomPreset the value to use for {@link #useCustomPreset}
     * @param basePresetCode the value to use for {@link #basePresetCode}
     * @param pluginsCsv comma-separated list of plugin codes that will be used to populate {@link
     *     #plugins}. Invalid plugin codes will be discarded
     * @param hostSelectionStrategy the value to use for {@link #hostSelectionStrategy}
     * @param initialConnectionStrategy the value to use for {@link #initialConnectionStrategy}
     */
    @Builder()
    public AwsJdbcWrapperOptions(
        boolean useCustomPreset,
        String basePresetCode,
        String pluginsCsv,
        String hostSelectionStrategy,
        String initialConnectionStrategy) {
      Preconditions.checkArgument(
          !Strings.isNullOrEmpty(basePresetCode), "basePresetCode must not be null or empty");
      Preconditions.checkArgument(
          !Strings.isNullOrEmpty(hostSelectionStrategy),
          "hostSelectionStrategy must not be null or empty");
      Preconditions.checkArgument(
          !Strings.isNullOrEmpty(initialConnectionStrategy),
          "initialConnectionStrategy must not be null or empty");
      this.useCustomPreset = useCustomPreset;
      this.basePresetCode = basePresetCode;
      this.plugins =
          Arrays.stream(pluginsCsv.split(","))
              .map(pluginName -> pluginFactoriesByCode.getOrDefault(pluginName.trim(), null))
              .filter(Objects::nonNull)
              .collect(ImmutableList.toImmutableList());
      this.hostSelectionStrategy = hostSelectionStrategy;
      this.initialConnectionStrategy = initialConnectionStrategy;
    }
  }
}

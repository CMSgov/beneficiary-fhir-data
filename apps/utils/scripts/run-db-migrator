#!/bin/bash
# Runs the latest version of BFD db migrator using build artifacts from your git workspace.
# Requires a directory to copy build artifacts into and use as working directory.
# Run with -h option to see command line options.

set -e

if [[ x$BFD_PATH = x ]] ; then
  echo "Please set BFD_PATH environment variable to root of source tree." 1>&2
  echo "It should be the directory containing the ops and apps subdirectories." 1>&1
  exit 1
fi

if [[ x$BFD_EXEC = x ]] ; then
  echo "Please set BFD_EXEC environment variable to a directory scripts can run in." 1>&2
  echo "It should be outside of $BFD_PATH." 1>&2
  exit 1
fi

##############################################################################
#
# BEGIN Local environment configuration.
#
project_dir=$BFD_PATH/apps

# Directory to store binaries and data files when running.
# Also where the script cd's to before running.
# Should be outside of your git workspace to avoid hassles with git.
exec_dir=$BFD_EXEC/db-migrator

# Directory containing your local maven artifacts cache.
repo_dir=$HOME/.m2/repository

# Maximum heap size to use when running
max_heap=512m

if [[ ! -d $project_dir ]] ; then
  echo ERROR: $project_dir does not exist. 1>&2
  echo Please set BFD_PATH to the root of the BFD source tree. 1>&2
  exit 1
fi

if [[ ! -d $BFD_EXEC ]] ; then
  echo ERROR: $BFD_EXEC does not exist. 1>&2
  echo Please create it or set BFD_EXEC to a different path. 1>&2
  exit 1
fi

if [[ ! -d $repo_dir ]] ; then
  echo ERROR: $repo_dir does not exist. 1>&2
  echo Please create it or modify this script with alternative path. 1>&2
  exit 1
fi

# ensure that the migrator specific exec directory exists
mkdir -p $exec_dir

#
# END Local environment configuration.
#
##############################################################################

#
# Generic code using settings begins here.
#

# Default option values.
debug_enabled=false
debug_suspend=n
db_host=localhost
db_port=5432
install=true
image_tag=
image_name=bfd-db-migrator
localstack_ip=localhost

usage() {
  script_name=`basename $0`
  cat 1>&2 <<EOF
Runs BFD database migrator.  Use command line options to change behaviors.

$script_name [options]
-d db_host[:db_port]  Name of database host.  Optional :n uses port n.
-i image_tag          Runs the migrator as a containing using the image with given tag.
-l localstack_ip      Localstack IP address (for bridge networking).
-x                    Do not install latest version before running.
-z                    Enable debugger support but start immediately.
-Z                    Enable debugger support and wait for debugger to connect.
-h                    Prints this help message.

Option defaults:
  -d $db_host:$db_port
EOF
}

while getopts "d:i:l:xzZh" option ; do
  case $option in
  d) IFS=':' read h p <<<"$OPTARG"
     db_host=${h:=$db_host}
     db_port=${p:=$db_port}
     unset h p
     ;;
  i) image_tag=$OPTARG ; install=false ;;
  l) localstack_ip=$OPTARG ;;
  x) install=false ;;
  z) debug_enabled=true ;;
  Z) debug_enabled=true ; debug_suspend=y ;;
  h) usage ; exit 0 ;;
  *) usage ; exit 1 ;;
  esac
done
shift $((OPTIND - 1))

# No other command line arguments are permitted.
if [[ $# != 0 ]] ; then
  usage
  exit 1
fi

if [[ x$image_tag != x ]] ; then
  echo "using docker image $image_name:$image_tag"
fi

# Autodetect if localstack is running based on whether we can connect to its port locally.
if lsof -Pi :4566 -sTCP:LISTEN -t >/dev/null ; then
  echo "using localstack"
  export AWS_REGION=us-east-1
  export AWS_ENDPOINT=http://${localstack_ip}:4566
  SSM_PARAMETER_PATH=/bfd-db-migrator
  export CONFIG_SETTINGS_JSON=$(cat <<EOF
{
  "ssmHierarchies": [ "$SSM_PARAMETER_PATH" ]
}
EOF)
  export DB_MIGRATOR_SQS_QUEUE=migrator-status
  echo "ensuring migrator progress queue exists in SQS"
  aws --endpoint-url=$AWS_ENDPOINT sqs create-queue --queue-name=$DB_MIGRATOR_SQS_QUEUE
fi

# Either export an environment variable (if not using SSM for config) or set the appropriate
# parameter in SSM if we are using it.  Used to allow localstack based config to simulate using
# SSM in the cloud.
function setvar() {
  name="$1"
  value="$2"
  if [[ -z "$AWS_REGION" ]] ; then
    eval "export ${name}=\"${value}\""
  else
    echo put-parameter $name
    aws ssm put-parameter --overwrite --endpoint-url http://localhost:4566 --name "${SSM_PARAMETER_PATH}/${name}" --value "${value}" > /dev/null
  fi
}

ARGS="-Xms${max_heap} -Xmx${max_heap}"
ARGS="$ARGS -Dorg.jboss.logging.provider=slf4j"

# If debug_enabled is true an IDE can connect its debugger on port 5005 to debug the pipeline.
# If debug_suspend is y the pipeline app will wait for a debugger to connect before doing any work.
if [[ $debug_enabled = "true" ]] ; then
  ARGS="$ARGS -agentlib:jdwp=transport=dt_socket,server=y,suspend=${debug_suspend},address=*:5005"
fi

# The migrator app project will contain our runtime artifacts.
target_name=bfd-db-migrator
lib_dir=$exec_dir/lib

cd $exec_dir

# Don't just assume the version will always be 1.0.0-SNAPSHOT, get it dynamically from mvn instead.
project_version=`cd $project_dir ; mvn help:evaluate -Dexpression=project.version | grep -e '^[^\[]'`

# Install has to be true at least once so that the exec_dir can be populated with runtime artifacts.
# Subsequent runs have the option of skipping the install step for slightly faster turn around.
# Here we just copy the application zip file and extract its contents into the exec_dir for use
# in running the application.
if [[ $install = "true" ]] ; then
  binaries_dir=$repo_dir/gov/cms/bfd/${target_name}/${project_version}
  zip_file=${binaries_dir}/${target_name}-${project_version}.zip

  if [[ ! -r $zip_file ]] ; then
    echo ERROR: missing zip file: $zip_file 1>&2
    echo Build $target_name and try again. 1>&2
    exit 1
  fi

  app_name=`basename $zip_file .zip`
  unzip_dir=$app_name

  if [[ -r $unzip_dir ]] ; then
    echo ERROR: unzip root dir already exists - remove it: $unzip_dir 1>&2
    exit 1
  fi

  unzip $zip_file
  if [[ ! -r $unzip_dir ]] ; then
    echo ERROR: $zip_file did not contain expected root dir: $unzip_dir 1>&2
    exit 1
  fi

  jar_file=${exec_dir}/${app_name}.jar
  [[ -r $jar_file ]] && rm -f $jar_file
  [[ -d $lib_dir ]] && rm -rf $lib_dir
  [[ -r $run_script ]] && rm -f $run_script
  mv $unzip_dir/* $exec_dir
  rmdir $unzip_dir
  if [[ ! -r $jar_file ]] || [[ ! -d $lib_dir ]] ; then
    echo "ERROR: Missing jar file or lib directory.  Was zip file valid? (${zip_file})" 1>&2
    exit 1
  fi
else
  # Just check to be sure we can run without installing and fail if we can't.
  jar_file=`echo ${exec_dir}/${target_name}-${project_version}.jar`
  if [[ ! -r $jar_file ]] || [[ ! -d $lib_dir ]] ; then
    echo "ERROR: Missing $jar_file or lib directory." 1>&2
    echo "Run again without -x option to install binaries." 1>&2
    exit 1
  fi
fi

# Set up the configuration variables using the setvar function.
setvar BFD_ENV_NAME laptop
setvar DATABASE_URL "jdbc:postgresql://${db_host}:${db_port}/bfd"
setvar DATABASE_USERNAME 'bfd'
setvar DATABASE_PASSWORD 'InsecureLocalDev'

classpath="${jar_file}:${exec_dir}/lib/*"
mainClass="gov.cms.bfd.migrator.app.MigratorApp"
[ -n "${JAVA_HOME}" ] && java=${JAVA_HOME}/bin/java || java=java

if [[ x$image_tag = x ]] ; then
  export CLASSPATH="$classpath"
  exec $java $ARGS $mainClass
else
  echo running container
  docker \
    run \
    --rm \
    --name $image_name \
    --env AWS_REGION \
    --env AWS_ENDPOINT \
    --env CONFIG_SETTINGS_JSON \
    --env DB_MIGRATOR_SQS_QUEUE \
    --env HOME=/home/app \
    -v $HOME/.aws/credentials:/home/app/.aws/credentials:ro \
    $image_name:$image_tag
fi

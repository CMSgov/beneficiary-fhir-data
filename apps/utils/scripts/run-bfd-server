#!/bin/bash
# Runs the latest version of BFD server using build artifacts from your git workspace.
# Requires a directory to copy build artifacts into and use as working directory.
# Can run the server in remote debugging mode to enable setting breakpoints and debuging in IDEA.
# Run with -h option to see command line options.

set -e

if [[ x$BFD_PATH = x ]] ; then
  echo "Please set BFD_PATH environment variable to root of source tree." 1>&2
  echo "It should be the directory containing the ops and apps subdirectories." 1>&1
  exit 1
fi

if [[ x$BFD_EXEC = x ]] ; then
  echo "Please set BFD_EXEC environment variable to a directory scripts can run in." 1>&2
  echo "It should be outside of $BFD_PATH." 1>&2
  exit 1
fi

##############################################################################
#
# BEGIN Local environment configuration.
#
project_dir=$BFD_PATH/apps

# Directory to store binaries and data files when running.
# Also where the script cd's to before running.
# Should be outside of your git workspace to avoid hassles with git.
exec_dir=$BFD_EXEC/bfd-server

# Directory containing your local maven artifacts cache.
repo_dir=$HOME/.m2/repository

# Maximum heap size to use when running
max_heap=4g

# Where to store binaries extracted from build artifacts.
bin_dir=$exec_dir/binaries

# Name of the JKS files used for SSL configuration.
truststore_file=server-truststore.pfx
keystore_file=server-keystore.pfx

# Runtime settings
max_heap=4g
bfd_port=6500
debug_port=5005

# Location of kubernetes configurations.
kubernetes_root=$BFD_PATH/ops/k8s/helm

if [[ ! -d $project_dir ]] ; then
  echo ERROR: $project_dir does not exist. 1>&2
  echo Please set BFD_PATH to the root of the BFD source tree. 1>&2
  exit 1
fi

if [[ ! -d $BFD_EXEC ]] ; then
  echo ERROR: $BFD_EXEC does not exist. 1>&2
  echo Please create it or set BFD_EXEC to a different path. 1>&2
  exit 1
fi

if [[ ! -d $repo_dir ]] ; then
  echo ERROR: $repo_dir does not exist. 1>&2
  echo Please create it or modify this script with alternative path. 1>&2
  exit 1
fi

# ensure that the bfd-server specific exec directory exists
mkdir -p $exec_dir $bin_dir

#
# END Local environment configuration.
#
##############################################################################

#
# Generic code using settings begins here.
#

# Default option values.
debug_enabled=true
debug_suspend=n
db_host=localhost
db_port=5432
install=true
image_tag=
image_name=bfd-server
localstack_ip=localhost
kubernetes=false

function usage() {
  script_name=`basename $0`
  cat 1>&2 <<EOF
Runs a BFD server.  Use command line options to change behaviors.

$script_name [options]
-d db_host[:db_port]      Name of database host.  Optional :n uses port n.
-i image_tag              Runs the server as a containing using the image with given tag.
-k                       Run using kubernetes (using ops/k8s).
-l localstack_ip          Localstack IP address (for bridge networking).
-x                        Do not install latest version before running.
-z                        Enable debugger support but start immediately.
-Z                        Enable debugger support and wait for debugger to connect.
-h                        Prints this help message.

Option defaults:
  -d $db_host:$db_port
EOF
}

while getopts "d:i:kl:xzZh" option ; do
  case $option in
  d) IFS=':' read h p <<<"$OPTARG"
     db_host=${h:=$db_host}
     db_port=${p:=$db_port}
     unset h p
     ;;
  i) image_tag=$OPTARG ; install=false ;;
  k) kubernetes=true ; install=false ; db_host=dev-postgres ;;
  l) localstack_ip=$OPTARG ;;
  x) install=false ;;
  z) debug_enabled=true ;;
  Z) debug_enabled=true ; debug_suspend=y ;;
  h) usage ; exit 0 ;;
  ?) usage ; exit 1 ;;
  esac
done
shift $((OPTIND - 1))

# No other command line arguments are permitted.
if [[ $# != 0 ]] ; then
  usage
  exit 1
fi

if [[ x$image_tag != x ]] ; then
  echo "using docker image $image_name:$image_tag"
fi

# Autodetect if localstack is running based on whether we can connect to its port locally.
if lsof -Pi :4566 -sTCP:LISTEN -t >/dev/null ; then
  echo "using localstack"
  export AWS_REGION=us-east-1
  export AWS_ENDPOINT=http://${localstack_ip}:4566
  # bfd environment variables
  export AWS_ACCESS_KEY=000000000042
  export AWS_SECRET_KEY=LSIAQAAAAAAVNCBMPNSG
  # aws cli environment variables
  export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
  export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
  SSM_PARAMETER_PATH=/bfd-server
  export CONFIG_SETTINGS_JSON=$(cat <<EOF
{
  "ssmHierarchies": [ "$SSM_PARAMETER_PATH" ]
}
EOF
)
fi

# Either export an environment variable (if not using SSM for config) or set the appropriate
# parameter in SSM if we are using it.  Used to allow localstack based config to simulate using
# SSM in the cloud.
function setvar() {
  ssm_name="$1"
  value="$2"
  if [[ -z "$AWS_REGION" ]] ; then
    # env var names are ssm paths converted upper case and with / replaced by _.
    env_name=`echo "BFD_${ssm_name}" | tr '/' '_' | tr '[a-z]' '[A-Z]'`
    echo export $env_name
    eval "export ${env_name}=\"${value}\""
  else
    full_ssm_name="${SSM_PARAMETER_PATH}/${ssm_name}"
    echo put-parameter $full_ssm_name
    aws ssm put-parameter --overwrite --endpoint-url http://localhost:4566 --name "${full_ssm_name}" --value "${value}" # > /dev/null
  fi
}

ARGS="-Xms${max_heap} -Xmx${max_heap}"
ARGS="$ARGS -Dorg.jboss.logging.provider=slf4j"

# If debug_enabled is true an IDE can connect its debugger on port 5005 to debug the pipeline.
# If debug_suspend is y the pipeline app will wait for a debugger to connect before doing any work.
if [[ $debug_enabled = "true" ]] ; then
  ARGS="$ARGS -agentlib:jdwp=transport=dt_socket,server=y,suspend=${debug_suspend},address=*:5005"
fi

cd $exec_dir

# Don't just assume the version will always be 1.0.0-SNAPSHOT, get it dynamically from mvn instead.
project_version=`cd $project_dir ; mvn help:evaluate -Dexpression=project.version | grep -e '^[^\[]'`

# Install has to be true at least once so that the exec_dir can be populated with runtime artifacts.
# Subsequent runs have the option of skipping the install step for slightly faster turn around.
# Here we just copy the application zip file and extract its contents into the exec_dir for use
# in running the application.
if [[ $install = "true" ]] ; then
  launcher_dir=$project_dir/bfd-server/bfd-server-launcher/target
  zip_file=$launcher_dir/bfd-server-launcher-${project_version}.zip

  server_dir=$project_dir/bfd-server/bfd-server-war/target
  war_file=$server_dir/bfd-server-war-${project_version}.war

  unzip_dir=bfd-server-launcher-${project_version}

  ssl_dir=$project_dir/bfd-server/dev/ssl-stores

  for i in $zip_file $war_file $ssl_dir/$truststore_file $ssl_dir/$keystore_file $exec_dir ; do
    if [ ! -r $i ] ; then
      echo ERROR: missing resource $i 2>&1
      exit 1
    fi
  done

  unzip -o $zip_file
  if [ ! -r $unzip_dir ] ; then
    echo ERROR: missing unzip root dir: $unzip_dir 1>&2
    exit 1
  fi

  rm -rf $bin_dir
  mkdir $bin_dir
  mkdir $bin_dir/ssl
  mv $unzip_dir/* $bin_dir
  cp $ssl_dir/* $bin_dir/ssl
  cp $war_file $bin_dir
  rmdir $unzip_dir
fi
if [[ x$image_tag = x ]] && [[ x$kubernetes = xfalse ]] ; then
  lib_dir=${bin_dir}/lib
  launcher_jar="${bin_dir}/bfd-server-launcher-${project_version}.jar"
  if [[ ! -r $launcher_jar ]] || [[ ! -d $lib_dir ]] ; then
    # Just check to be sure we can run without installing and fail if we can't.
    echo "ERROR: Missing $launcher_jar or lib directory." 1>&2
    echo "Run again without -x option to install binaries." 1>&2
    exit 1
  fi
fi

war_file_name=bfd-server-war-${project_version}.war

# Set up the configuration variables using the setvar function.
export BFD_ENV_NAME="laptop"
setvar port $bfd_port
setvar paths/files/truststore "$bin_dir/ssl/${truststore_file}"
setvar paths/files/keystore "$bin_dir/ssl/${keystore_file}"
setvar paths/files/war "$bin_dir/$war_file_name"

setvar db/url "jdbc:postgresql://${db_host}:${db_port}/fhirdb?logServerErrorDetail=false"
setvar db/username "bfd"
setvar db/password "InsecureLocalDev"

setvar pac/enabled true
setvar pac/claim_source_types "fiss,mcs"

classpath="${launcher_jar}:${bin_dir}/lib/*:${exec_dir}/lib/*"
mainClass="gov.cms.bfd.server.launcher.DataServerLauncherApp"
[ -n "${JAVA_HOME}" ] && java=${JAVA_HOME}/bin/java || java=java

if [[ x$kubernetes = xtrue ]] ; then
  cd $kubernetes_root
  if [[ ! -r server/Chart.yaml ]] ; then
    echo ERROR: unable to find kubernetes resource files in $kubernetes_root 1>&2
    exit 1
  fi
  echo running kubernetes service
  ssl_dir=$project_dir/bfd-server/dev/ssl-stores
  echo Ignore \"secrets dev-server-ssl-files not found\" message if this is first time running in cluster.
  kubectl -n dev delete secret bfd-server-ssl-files || true
  kubectl -n dev create secret generic bfd-server-ssl-files\
     --from-file $ssl_dir/${truststore_file}\
     --from-file $ssl_dir/${keystore_file}
  app_root=/app
  ssl_mount=${app_root}/ssl
  war_file=${app_root}/$war_file_name
  setvar paths/files/truststore "$ssl_mount/${truststore_file}"
  setvar paths/files/keystore "$ssl_mount/${keystore_file}"
  setvar paths/files/war "$app_root/$war_file_name"
  echo Ignore \"release: not found\" message if this is first time running in cluster.
  helm -n dev uninstall server || true
  helm -n dev install server server
elif [[ x$image_tag = x ]] ; then
  echo running application directly
  export CLASSPATH="$classpath"
  exec $java $properties $ARGS $mainClass
else
  ssl_mount=/home/app/ssl
  echo running container
  docker \
    run \
    --rm \
    --name $image_name \
    --env AWS_REGION \
    --env AWS_ENDPOINT \
    --env AWS_ACCESS_KEY \
    --env AWS_SECRET_KEY \
    --env CONFIG_SETTINGS_JSON \
    --env HOME=/home/app \
    --env BFD_PATHS_FILES_TRUSTSTORE=$ssl_mount/$truststore_file \
    --env BFD_PATHS_FILES_KEYSTORE=$ssl_mount/$keystore_file \
    --env BFD_PATHS_FILES_WAR=/app/$war_file_name \
    --env BFD_ENV_NAME="$BFD_ENV_NAME" \
    -v $bin_dir/ssl:$ssl_mount \
    -v $HOME/.aws/credentials:/home/app/.aws/credentials:ro \
    -p $bfd_port:$bfd_port \
    $image_name:$image_tag
fi

#!/usr/bin/env groovy

// Global variable where the base deploy.groovy script will be loaded
def baseScripts
// Global variable where the terraform variable map will be stored
def terraformVars

pipeline {
  agent {
    kubernetes {
      defaultContainer 'bfd-cbc-build'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk11-mvn3-an29-tfenv-aeaa61fa6'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
    }
  }

  parameters {
    choice(name: 'ENVIRONMENT',
           choices: ['test', 'prod-sbx', 'prod'],
           description: 'The BFD SDLC environment to run against')

    string(name: 'TEST_HOST',
           defaultValue: 'https://%s.bfd.cms.gov',
           description: 'The URL under test -- should match the given environment. "%s" will be '
                        + 'replaced with the chosen environment')

    string(name: 'INITIAL_WORKER_NODES',
           defaultValue: '0',
           description: 'The number of initial Locust worker nodes to spawn before checking for '
                        + 'stop signals. Useful for static load tests')

    string(name: 'NODE_SPAWN_TIME',
           defaultValue: '10',
           description: 'The amount of time to wait between spawning more Lambda Locust worker '
                        + 'nodes. Does not affect initial spawned nodes')

    string(name: 'MAX_SPAWNED_NODES',
           defaultValue: '80',
           description: 'The maximum number of Lambda worker nodes to spawn over the lifetime of a '
                        + 'given test run. Does not account for failed nodes or nodes that reach '
                        + 'their Lambda timeout')

    string(name: 'MAX_SPAWNED_USERS',
           defaultValue: '5000',
           description: 'The maximum number of simulated Locust users (not worker nodes) to spawn. '
                        + 'Use this and spawn rate to constrain the load during a test run. '
                        + 'Generally speaking, at any moment the ratio of simulated users to '
                        + 'worker nodes should not exceed 10:1 (10 users to 1 worker) in order to '
                        + 'get the best performance. Try to adjust NODE_SPAWN_TIME, '
                        + 'INITIAL_WORKER_NODES, MAX_SPAWNED_NODES, and USER_SPAWN_RATE such that '
                        + 'at any given time during the test run this ratio is not exceeded')

    string(name: 'USER_SPAWN_RATE',
           defaultValue: '1',
           description: 'The rate at which simulated Locust users (not worker nodes) will spawn. '
                        + 'Set this equal to max_spawned_users if all users should be spawned '
                        + 'immediately')

    string(name: 'TEST_RUNTIME_LIMIT',
           defaultValue: '630',
           description: 'Runtime limit in seconds. If STOP_ON_SCALING is false, this limit is the '
                        + 'total amount of time the load test has to run. If STOP_ON_SCALING is '
                        + 'true, this limit indicates the amount of time to check for scaling '
                        + 'notifications during a test run before stopping. In this case, the '
                        + 'total maximum runtime is assumed to be '
                        + 'TEST_RUNTIME_LIMIT + COASTING_TIME')

    string(name: 'COASTING_TIME',
           defaultValue: '10',
           description: 'The amount of time, in seconds, the load test should continue for after '
                        + 'receiving a scaling notification. Ignored if STOP_ON_SCALING is false. '
                        + 'Ends immediately on operator stop signal')

    string(name: 'WARM_INSTANCE_TARGET',
           defaultValue: '7',
           description: 'The number of BFD Server instances to target before scaling causes the '
                        + 'load test to stop')

    booleanParam(name: 'STOP_ON_SCALING',
                 defaultValue: true,
                 description: 'Whether the load test run should end, if COASTING_TIME is zero, or '
                              + 'start coasting once receiving a scaling notification. Set to '
                              + 'false for scenarios where a static load test is desired')

    booleanParam(name: 'STOP_ON_NODE_LIMIT',
                 defaultValue: true,
                 description: 'Whether the load test run should end once the maximum Lambda worker '
                              + 'node limit is reached. Set to false for scenarios where a static '
                              + 'load test is desired')
  }

  stages {
    stage('Run Load Tests') {
      steps {
        script {
          baseScripts = load 'ops/terraform/services/base/deploy.groovy'

          hostUnderTest = String.format(params.TEST_HOST, params.ENVIRONMENT)
          terraformVars = params.findAll { it.key != 'ENVIRONMENT' && it.key != 'TEST_HOST' }
                                .collectEntries { key, value -> [(key.toLowerCase()): value] }
          terraformVars.putAll(['test_host': hostUnderTest])

          awsAuth.assumeRole()
          baseScripts.deployTerraservice(
            env: params.ENVIRONMENT,
            directory: 'ops/terraform/services/server/server-load',
            tfVars: terraformVars + ['create_locust_instance': true]
          )

          echo ("The load test should start running soon. View the logs in realtime in Cloudwatch, "
                + "under the /bfd/${params.ENVIRONMENT}/bfd-server-load/server-load-controller.log "
                + "log group. Note that it can take a few moments for the controller to begin "
                + "running tests")

          runtimeLimit = params.TEST_RUNTIME_LIMIT.toInteger()
          coastingTime = params.COASTING_TIME.toInteger()
          maxRuntime = params.STOP_ON_SCALING ? runtimeLimit + coastingTime
                                              : runtimeLimit
          try {
            timeout(time: (maxRuntime + 600), unit: 'SECONDS') {
              input 'Once the run is finished, click either Abort or Proceed to cleanup the test'
            }
          } catch(err) {}
        }
      }
    }
  }

  post {
    cleanup {
      script {
        if (env.NODE_NAME != null) {
          awsAuth.assumeRole()
          queueName = "bfd-${params.ENVIRONMENT}-server-load"
          queueUrl = awsSqs.getQueueUrl(queueName)
          stopMessage = writeJSON(returnText: true, json: [
            'Stop': 'Signal'
          ])

          echo "Sending stop signal to ${queueName} to stop any remaining Locust processes..."
          awsSqs.sendMessage(
            sqsQueueUrl: queueUrl,
            sqsMessage: stopMessage
          )
          echo "Stop signal sent successfully"

          awsAuth.assumeRole()
          echo 'Tearing down controller EC2 instance...'
          baseScripts.deployTerraservice(
            env: params.ENVIRONMENT,
            directory: 'ops/terraform/services/server/server-load',
            tfVars: terraformVars + ['create_locust_instance': false]
          )
          echo 'Controller teardown successful'
        } else {
          echo 'Build ended prior to node being created'
        }
      }
    }
  }
}

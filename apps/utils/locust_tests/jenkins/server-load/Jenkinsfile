#!/usr/bin/env groovy

pipeline {
    agent {
        kubernetes {
            defaultContainer "bfd-cbc-build"
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk11-mvn3-an29-tfenv-aeaa61fa6'
    command:
    - cat
    resources:
        requests:
            memory: "16384Mi"
            cpu: "8000m"
        limits:
            memory: "16384Mi"
            cpu: "8000m"
    imagePullPolicy: IfNotPresent
    tty: true
"""
        }
    }
    stages {
        stage('Run Scaling Load Test') {
            steps {
                awsAuth.assumeRole()

                dir("${workspace}/ops/terraform/services/server/server-load")

                // Debug output terraform version
                sh "terraform --version"

                // Initilize terraform
                sh "terraform init -no-color"

                // - Attempt to create the desired workspace
                // - Select the desired workspace
                // NOTE: this is the terraform concept of workspace **NOT** Jenkins
                sh """
terraform workspace new "$bfdEnv" 2> /dev/null || true &&\
terraform workspace select "$bfdEnv" -no-color
"""
                // Gathering terraform plan
                echo "Timestamp: ${java.time.LocalDateTime.now().toString()}"
                if (dockerImageTagOverride != null) {
                    sh """
terraform plan \
-var='create_locust_instance=true' \
-no-color -out=tfplan
"""
                } else {
                    sh "terraform plan -no-color -out=tfplan"
                }

                // Apply Terraform plan
                echo "Timestamp: ${java.time.LocalDateTime.now().toString()}"
                sh '''
terraform apply \
-no-color -input=false tfplan
'''
                controller_ip = sh(returnStdout: true, script: 'terraform output | grep -E \'^controller_ip = "[0-9.]*"$\' | grep -Eo "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"')
                if(controller_ip){
                    def controller = [:]
                    controller.host = controller_ip
                    // TODO: Need to get a username and password here or figure out how to pass a key?
                    controller.user = 'user'
                    controller.password = 'password'
                    // TODO: Does the SSH Pipeline plugin need to be installed or is this a dead end?
                    sshCommand remote: controller, command: "cd /beneficiary-fhir-data/apps/utils/locust_tests/lambda/server-load/ && run_controller.sh"
                } else {
                    error "Unable to get IP address of deployed locust controller."
                }
            }
        }
    }
}

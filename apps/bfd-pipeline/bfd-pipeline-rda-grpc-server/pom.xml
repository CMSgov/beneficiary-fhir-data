<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>gov.cms.bfd</groupId>
        <artifactId>bfd-pipeline-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>bfd-pipeline-rda-grpc-server</artifactId>
    <packaging>jar</packaging>

    <description>
        Loads pre-adjudicated claims data exported from RDA gRPC service into the BFD database.
    </description>

    <properties>
        <!-- Version of gRPC related dependencies -->
        <grpc_java.version>1.37.0</grpc_java.version>
        <!-- Version of the plugin used to build the gRPC stubs from the Health.proto file. -->
        <protoc.version>3.15.8</protoc.version>
        <mockito.version>3.8.0</mockito.version>
        <hibernate.version>5.4.31.Final</hibernate.version>
        <jpa.version>1.0.2.Final</jpa.version>
        <postgresql.version>42.2.20</postgresql.version>
        <hsqldb.version>2.6.0</hsqldb.version>
        <junit.version>4.13.2</junit.version>
        <slf4j.version>1.7.7</slf4j.version>
        <hikari.version>4.0.3</hikari.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-shared-utils</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- contains the JPA entities for writing to the database -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rda</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- These dependencies are necessary to build stubs from proto file and to call a gRPC server. -->
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
            <version>${grpc_java.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-protobuf</artifactId>
            <version>${grpc_java.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <version>${grpc_java.version}</version>
        </dependency>

        <dependency>
            <!-- Just useful. -->
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <dependency>
            <!-- Provides a sane facade for the giant mess of incompatible logging
                    frameworks in Java. -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <!-- Delegates all JCL logging (typically from dependencies) to SLF4J. -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <!-- An implementation of the Log4J API that routes everything through
                    to SLF4J, instead. -->
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <!-- Provides a JUL handler, SLF4JBridgeHandler, that routes everything
                    to SLF4J, instead. -->
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
        </dependency>
        <dependency>
            <!-- Used as a logging backed/target for SLF4J. -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <!-- Used to monitor performance and other statistics at runtime. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>

        <dependency>
            <!-- contains the JPA entities for writing to the database -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rda</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- contains the JPA entities for writing to the database -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-rda-grpc</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <version>${jpa.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>${hikari.version}</version>
        </dependency>

        <dependency>
            <!-- JDBC driver for working with PostgreSQL DBs on Java 8 (JDBC 4.2). -->
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <dependency>
            <!-- Used to run our unit and integration tests. -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used in tests to help with managing asynchronous behavior. Reference:
                   https://github.com/awaitility/awaitility -->
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>2.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used to monitor the JVM's memory usage, garbage collection, etc.
                    at runtime. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used to create mock objects for unit tests. -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
            </plugins>
        </pluginManagement>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.6.2</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <!-- Will run the `*IT.java` integration tests in this project, as part
                        of the build. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>0.6.1</version>
                <configuration>
                    <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
                    </protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc_java.version}:exe:${os.detected.classifier}
                    </pluginArtifact>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Runs the LoadRdaJsonApp to set up a test database with pre-adjudicated (RDA API) data from JSON files.
        The JSON files can be specified by setting the loader.fiss and/or loader.mcs properties on the command line.
        Also must specify the loader.config property to tell the program where to find its config file.
        Finally, also specify the json-to-db property (no value needed) to activate this profile.
        Sample command line: mvn -pl :bfd-pipeline-rda-grpc-server exec:java -Djson-to-db -Dconfig.properties=load-json.properties -Dfile.fiss=FISS.ndjson
        Alternatively you can use -P json-to-db instead of using the system property.
        -->
        <profile>
            <id>json-to-db</id>
            <activation>
                <property>
                    <name>json-to-db</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <mainClass>gov.cms.bfd.pipeline.rda.grpc.sink.LoadRdaJsonApp</mainClass>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>

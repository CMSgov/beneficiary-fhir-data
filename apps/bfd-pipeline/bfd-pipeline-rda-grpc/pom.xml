<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>gov.cms.bfd</groupId>
        <artifactId>bfd-pipeline-parent</artifactId>
        <version>1.0.3-SNAPSHOT</version>
    </parent>

    <artifactId>bfd-pipeline-rda-grpc</artifactId>
    <packaging>jar</packaging>

    <description>
        Loads partially adjudicated claims data exported from RDA gRPC service into the BFD database.
    </description>

    <dependencies>
        <dependency>
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-shared-utils</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- contains the JPA entities for writing to the database -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rda</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- contains the data transformation library classes needed to transform incoming data -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-dsl-codegen-library</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!-- Functional-reactive programming api for concurrent claim ingestion. -->
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-core</artifactId>
        </dependency>

        <!-- These dependencies are necessary to build stubs from proto file and to call a gRPC server. -->
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-protobuf</artifactId>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
        </dependency>
        <dependency>
            <!-- provides JsonFormat and JsonParser -->
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
        </dependency>
        <dependency>
            <!-- Used to serialize and deserialize objects to JSON during testing. -->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <!-- Adds java-8 types to jackson. -->
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
        </dependency>
        <dependency>
            <!-- Adds java-8 date/time classes to jackson. -->
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <dependency>
            <!-- Just useful. -->
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <dependency>
            <!-- Delegates all JCL logging (typically from dependencies) to SLF4J. -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>

        <dependency>
            <!-- Provides a sane facade for the giant mess of incompatible logging
                    frameworks in Java. -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <!-- Used to monitor performance and other statistics at runtime. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>
        <dependency>
            <!-- Used to collect metrics in a registry that can be transmitted to CloudWatch efficiently. -->
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>

        <dependency>
            <!-- Used to run our unit and integration tests. -->
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- provides DatabaseSchemaManager to apply flyway migrations -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rif</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- In-memory database that can be used for testing. -->
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Logback is used as the logging target/backend for SLF4J during tests:
                    all logging events will be sent to it. -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used in tests to help with managing asynchronous behavior. Reference:
                   https://github.com/awaitility/awaitility -->
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used to monitor the JVM's memory usage, garbage collection, etc.
                    at runtime. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used to create mock objects for unit tests. -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Configures mockito to use the inline implementation, which allows mocking
            of final classes, etc.  Without this, the fallback implementation results in
            illegal reflection access (JDK9+) in certain circumstances -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Adds convenience features for working with mocks in tests -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used for annotating RDA API. -->
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-shared-test-utils</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3-transfer-manager</artifactId>
        </dependency>
        <!-- Allows use of AWS common runtime client for file copying, which has improved performance -->
        <dependency>
            <groupId>software.amazon.awssdk.crt</groupId>
            <artifactId>aws-crt</artifactId>
            <version>${aws.crt.version}</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>${protobuf.maven.plugin.version}</version>
                <configuration>
                    <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
                    </protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc_java.version}:exe:${os.detected.classifier}
                    </pluginArtifact>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>gov.cms.bfd</groupId>
                <artifactId>bfd-model-dsl-codegen-plugin</artifactId>
                <version>${project.version}</version>
                <configuration>
                    <mappingPath>${project.basedir}/../../bfd-model/bfd-model-rda/mappings</mappingPath>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>transformers</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <!-- for grpc ITs, need testcontainers to startup/teardown without reuse -->
                    <parallel>classesAndMethods</parallel>
                    <forkCount>1</forkCount>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

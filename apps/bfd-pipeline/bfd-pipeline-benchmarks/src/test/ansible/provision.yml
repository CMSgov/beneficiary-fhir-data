---
##
# This playbook stands up the systems in AWS needed for one benchmark 
# iteration.
#
# Usage:
# 
#     $ ansible-playbook provision.yml --extra-vars "ec2_key_name=foo iteration_index=42"
##

- hosts: localhost
  name: AWS - Provision Resources and Instances
  connection: local
  gather_facts: false
  
  tasks:
    
    - name: Local - whoami
      local_action: command whoami
      register: whoami
    
    - name: EC2 - Provision Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    # Create an IAM role associated with the Blue Button tests services running
    # in EC2.
    - name: Create IAM Role for Blue Button Test Services
      iam:
        iam_type: role
        name: BlueButtonTest-EC2Services
        state: present
        # The `trust_policy` only defines what/who can assume/become this role; it
        # doesn't define what the role will have access to.
        trust_policy:
          Version: '2012-10-17'
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com

    - name: Give BlueButtonTest-EC2Services Access to Blue Button Test S3 Buckets
      iam_policy:
        iam_type: role
        iam_name: BlueButtonTest-EC2Services
        policy_name: "BlueButtonTest-S3"
        state: present
        # Note: Watch out for this Ansible bug: https://github.com/ansible/ansible/issues/19310
        policy_json: "{{ lookup('template','bluebutton_test_s3_policy.json.j2') | to_json }}"
 
# FIXME: Disabled, because I don't have permissions for it.    
#    - name: IAM - Create EC2 'BenchmarkRunner' Role
#      iam_policy:
#        iam_type: role
#        iam_name: bluebutton-benchmark-runner
#        state: present
#        policy_name: BlueButtonBenchmarkETL
#        policy_document: BlueButtonBenchmarkETL.policy.json
    
    # These settings were mostly suggested by http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html#CHAP_BestPractices.PostgreSQL
    # Disabled until https://github.com/ansible/ansible/issues/24340 is resolved.
    #- name: RDS - Configure RDS Parameters
    #  rds_param_group:
    #    state: present
    #    region: "{{ region }}"
    #    name: bluebutton-etl-benchmark-db-params
    #    description: 'Configuration for the RDS instances used by the Blue Button API Backend benchmarks.'
    #    engine: 'postgres9.4'
    #    params:
    #      # Ensure that `wal_level` isn't increased unnecessarily. (Default.)
    #      'rds.logical_replication': 0
    #      # Reduce the number of WAL flushes (ideally one per RIF file that's processed).
    #      'max_wal_size': 6250  # For PostgreSQL >=9.5, only. 16 MB increments (100 GB, total).
    #      'checkpoint_segments': 6250 # For PostgreSQL <9.5, only. How many 16 MB chunks to write before forcing a WAL checkpoint (100 GB, total).
    #      'checkpoint_timeout': 6250
    #      'wal_buffers': 262143
    #      # These options are unsafe for general usage, but fine during an initial load.
    #      'synchronous_commit': 'off'
    #      'autovacuum': 0
    
    - name: RDS - Provision DB Server
      rds:
        command: create
        region: "{{ region }}"
        zone: "{{ zone }}"
        instance_name: "bluebutton-etl-benchmark-{{ iteration_index }}-db"
        db_engine: postgres
        engine_version: 9.4.9
        size: 3000
        iops: 10000
        backup_retention: 0
        instance_type: "{{ rds_instance_type }}"
        publicly_accessible: false
        username: "{{ postgres_master_username }}"
        password: "{{ postgres_master_password }}"
        # Disabled for now, as the settigns seem to have slowed down large loads. 
        # parameter_group: bluebutton-etl-benchmark-db-params
        tags:
          CreatedBy: "{{ whoami.stdout }}"
          Application: "BlueButton"
        wait: true
        wait_timeout: "{{ rds_wait_timeout }}"
      register: rds_server
    
    # Just here to save time while debugging this script. (Creating the RDS
    # instance takes over 10 minutes, and this allows us to re-use it if it's
    # still available from a previous run.)
    - name: RDS - Gather Facts
      rds:
        command: facts
        region: "{{ region }}"
        instance_name: "bluebutton-etl-benchmark-{{ iteration_index }}-db"
      register: rds_server
    
    - name: EC2 - Add RDS Instance to Inventory
      lineinfile:
        dest: "../../../target/benchmark-iterations/{{ iteration_index }}/ansible_hosts"
        regexp: '^rds.*$'
        line: "rds endpoint={{ rds_server.instance.endpoint }} port={{ rds_server.instance.port }}"
        state: present
        create: true
    
    - name: EC2 - Provision ETL Server
      ec2:
        key_name: "{{ ec2_key_name }}"
        group:
          - default
          - ssh-all
        instance_type: "{{ ec2_instance_type_etl }}"
        image: "{{ ami_id }}"
        region: "{{ region }}"
        zone: "{{ zone }}"
        instance_profile_name: BlueButtonTest-EC2Services
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            # The sample RIF data set is about 92GB total.
            volume_size: 200
            delete_on_termination: true
        wait: true
        exact_count: 1
        count_tag:
          Name: "bluebutton-etl-benchmark-{{ iteration_index }}-etl"
          Application: "BlueButton"
        instance_tags:
          Name: "bluebutton-etl-benchmark-{{ iteration_index }}-etl"
          Application: "BlueButton"
          CreatedBy: "{{ whoami.stdout }}"
      register: ec2_etl
    
    - name: EC2 - Add ETL Server to Inventory
      lineinfile:
        dest: "../../../target/benchmark-iterations/{{ iteration_index }}/ansible_hosts"
        regexp: '^etl.*$'
        line: "etl ansible_host={{ ec2_etl.instances[0].public_dns_name }} ec2_instance_id={{ ec2_etl.instance_ids[0] }}"
        state: present
        create: true
    
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        search_regex: OpenSSH
        state: started
        # This delay seems to be necessary for the newly-provisioned `etl` 
        # instance, as it's the last one provisioned. SSH is up for it, but 
        # it's not immediately configured to accept the SSH key.
        delay: 30
        timeout: 320
      with_flattened:
        - "{{ ec2_etl.instances }}"

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>gov.cms.bfd</groupId>
		<artifactId>bfd-pipeline-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>bfd-pipeline-app</artifactId>
	<packaging>jar</packaging>

	<description>
		An application that pulls CCW RIF data via S3, transforms it, and pushes it to 
		the Blue Button API backend database server.
	</description>

	<dependencies>
		<dependency>
			<groupId>gov.cms.bfd</groupId>
			<artifactId>bfd-pipeline-ccw-rif</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<!-- Provides a sane facade for the giant mess of incompatible logging 
				frameworks in Java. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J during runtime: 
				all logging events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<dependency>
			<!-- Used to monitor the JVM's memory usage, garbage collection, etc. 
				at runtime. -->
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-jvm</artifactId>
		</dependency>

		<dependency>
			<groupId>com.newrelic.telemetry</groupId>
			<artifactId>dropwizard-metrics-newrelic</artifactId>
			<version>0.5.0</version>
		</dependency>

		<dependency>
			<groupId>com.newrelic.telemetry</groupId>
			<artifactId>telemetry-http-okhttp</artifactId>
			<version>0.6.1</version>
		</dependency>

		<dependency>
			<!-- JDBC driver for working with PostgreSQL DBs on Java 8 (JDBC 4.2). -->
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<!-- HSQL is used in this project's integration tests, which means it 
				needs to be baked into the JAR. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<!-- Used to run our unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used in tests to help with managing asynchronous behavior. Reference: 
				https://github.com/awaitility/awaitility -->
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>2.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>gov.cms.bfd</groupId>
			<artifactId>bfd-model-rif-samples</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Used to build executable JARs, with all dependencies included in 
						them. -->
					<groupId>com.github.chrischristo</groupId>
					<artifactId>capsule-maven-plugin</artifactId>
					<configuration>
						<appClass>gov.cms.bfd.pipeline.app.PipelineApplication</appClass>

						<!-- Building the "really executable" .x files is tempting, but ultimately 
							not very useful, as there's no way to pass JVM args into such launchers, 
							which prevents customizing the heap size at runtime. -->
						<chmod>false</chmod>

						<types>fat</types>
						<manifest>
							<entry>
								<key>JVM-Args</key>
								<value>-Xmx1g</value>
							</entry>
							<entry>
								<key>Min-Java-Version</key>
								<value>1.8.0</value>
							</entry>
						</manifest>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<!-- Used to build executable JARs, with all dependencies included in 
					them. -->
				<groupId>com.github.chrischristo</groupId>
				<artifactId>capsule-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Will run the `*IT.java` integration tests in this project, as part 
					of the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>

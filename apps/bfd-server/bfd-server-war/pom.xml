<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>gov.cms.bfd</groupId>
        <artifactId>bfd-server-parent</artifactId>
        <version>1.0.3-SNAPSHOT</version>
    </parent>

    <artifactId>bfd-server-war</artifactId>
    <packaging>war</packaging>

    <description>
        The primary WAR for the BFD Server project. Provides a FHIR API.
    </description>

    <dependencies>
        <dependency>
            <!-- BFD Shared Utilities include a wrapper around MDC for logging. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-server-shared-utils</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- Hibernate's JPA implementation is used to read data from the BFD database. -->
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
        </dependency>
        <dependency>
            <!-- Used to provide DB connection pooling. See https://github.com/brettwooldridge/HikariCP
                for details. -->
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>
        <dependency>
            <!-- Provides the JPA entities used to represent the BFD data in the database. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rif</artifactId>
        </dependency>
        <dependency>
            <!-- Provides the JPA entities used to represent the RDA BFD data in the database. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rda</artifactId>
        </dependency>

        <dependency>
            <!-- At least one "structures" JAR must also be included -->
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-structures-dstu3</artifactId>
            <version>${hapi-fhir.version}</version>
            <exclusions>
                <!-- Need the newer but compatible version from com.newrelic.telemetry -->
                <exclusion>
                    <groupId>com.squareup.okhttp3</groupId>
                    <artifactId>okhttp</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <!-- At least one "structures" JAR must also be included -->
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-structures-r4</artifactId>
            <version>${hapi-fhir.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <!-- Need the newer but compatible version from com.newrelic.telemetry -->
                <exclusion>
                    <groupId>com.squareup.okhttp3</groupId>
                    <artifactId>okhttp</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <!-- This dependency includes the server HAPI-FHIR classes -->
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-server</artifactId>
            <version>${hapi-fhir.version}</version>
        </dependency>
        <dependency>
            <!-- This dependency includes the client HAPI-FHIR classes -->
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-client</artifactId>
            <version>${hapi-fhir.version}</version>
        </dependency>
        <dependency>
            <!-- This dependency includes the base HAPI-FHIR classes -->
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-base</artifactId>
            <version>${hapi-fhir.version}</version>
        </dependency>

        <dependency>
            <!-- Needed for comparing JSON files to obtain the diff. See
                 https://github.com/flipkart-incubator/zjsonpatch for details. -->
            <groupId>com.flipkart.zjsonpatch</groupId>
            <artifactId>zjsonpatch</artifactId>
            <version>${zjsonpatch.version}</version>
            <scope>test</scope>
            <!-- Don't let the jackson transitive dependency versions be determined by
                 this test dependency -->
            <exclusions>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <!-- Needed for JEE/Servlet support -->
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!-- Used for CORS support -->
            <groupId>org.ebaysf.web</groupId>
            <artifactId>cors-filter</artifactId>
            <version>${cors.filter.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>servlet-api</artifactId>
                    <groupId>javax.servlet</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <!-- Provides the @Inject annotation. Does NOT provide dependency injection;
                just the standardized annotation for it. -->
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <dependency>
            <!-- We mostly use Spring to ensure that our JPA EntityManagers are properly
                managed. -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
            <!-- We're really not using much of the Spring Data JPA framework; we
                mostly just need its Hibernate JPA glue. -->
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
        </dependency>

        <dependency>
            <!-- Used to monitor the JVM's memory usage, garbage collection, etc.
                at runtime. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
        </dependency>
        <dependency>
            <!-- Provides a Servlet filter which has meters for status codes, a counter
                for the number of active requests, and a timer for request duration. Enabled
                via `web.xml`. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-servlet</artifactId>
            <version>${metrics.version}</version>
        </dependency>
        <dependency>
            <!-- Provides servlets which dump/expose metrics data via HTTP/HTTPS. Enabled
                via `web.xml`. -->
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-servlets</artifactId>
            <version>${metrics.version}</version>
        </dependency>

        <dependency>
            <!-- Allows us to provide New Relic with additional information on requests. -->
            <groupId>com.newrelic.agent.java</groupId>
            <artifactId>newrelic-api</artifactId>
            <version>${newrelic.agent.version}</version>
        </dependency>

        <dependency>
            <groupId>com.newrelic.telemetry</groupId>
            <artifactId>dropwizard-metrics-newrelic</artifactId>
        </dependency>

        <dependency>
            <groupId>com.newrelic.telemetry</groupId>
            <artifactId>telemetry-http-okhttp</artifactId>
        </dependency>

        <dependency>
            <!-- Used to parse and read various CSV data resources. -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
        </dependency>

        <dependency>
            <!-- BFD runs against PostgreSQL in production. -->
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <dependency>
            <!-- this allows the construction of POJOs without a lot of boilerplate code -->
            <!-- providd because it's only needed at compile time -->
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!-- Used to proxy JDBC usage, for monitoring. -->
            <groupId>net.ttddyy</groupId>
            <artifactId>datasource-proxy</artifactId>
            <version>${datasource-proxy.version}</version>
        </dependency>

        <dependency>
            <!-- The test framework used for unit and integration tests. -->
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
            <!-- exclude Junit from including its version of hamcrest -->
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Mockito utilities for JUnit / Jupiter. -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- This will get hamcrest-core automatically -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>${hamcrest-library.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-server-openapi</artifactId>
            <version>${hapi-fhir.version}</version>
        </dependency>
        <dependency>
            <!-- Logging backend for tests.  -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- The builds for this and other BFD projects use HSQL in tests. -->
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Provides sample data used in tests. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-model-rif-samples</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Used to load sample data in tests. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-ccw-rif</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <dependency>
            <!-- Used for Bloom filters -->
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sketch_2.12</artifactId>
            <version>${org.apache.spark.version}</version>
        </dependency>
        <dependency>
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-shared-test-utils</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
            <!-- Scope cannot be test due to SpringConfiguration using test classes, fix that to properly scope this -->
        </dependency>
        <dependency>
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-pipeline-shared-test-utils</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>gov.cms.bfd.data.fda.utility</groupId>
            <artifactId>bfd-data-fda</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <!-- Dependency required to ensure bfd-server-launcher is built before this module. -->
            <!-- This forces maven to build it before this module but doesn't impact classpath. -->
            <groupId>gov.cms.bfd</groupId>
            <artifactId>bfd-server-launcher</artifactId>
            <version>${project.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <!-- Jetty is the embedded web server that this project uses to run WARs. -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Jetty is the embedded web server that this project uses to run WARs. -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Jetty is the embedded web server that this project uses to run WARs. -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-annotations</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!-- When its 'attach-artifact' goal is run, this plugin will attach
                        the server management scripts that should be used to run this project's WAR.
                        This ensures that it is included in install, deploy, etc. operations. -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>${build.helper.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <!-- Use the dependency plugin to copy the test dependency artifacts,
                        for use in ITs. -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven.dependency.plugin.version}</version>
                    <configuration>
                        <artifactItems>
                            <artifactItem>
                                <!-- Unpack the BFD Server Launcher (whitelabeled Jetty) assembly zip into
                                    this project's build directory, for use in ITs. -->
                                <groupId>${project.groupId}</groupId>
                                <artifactId>bfd-server-launcher</artifactId>
                                <version>${project.version}</version>
                                <type>zip</type>
                                <outputDirectory>${project.build.directory}/server-work</outputDirectory>
                            </artifactItem>
                        </artifactItems>
                        <overWriteReleases>false</overWriteReleases>
                        <overWriteSnapshots>true</overWriteSnapshots>
                    </configuration>
                </plugin>
                <plugin>
                    <!-- The exec plugin can be used in child modules to run the 'src/main/config/server-*.sh'
                        scripts, which will start and stop the BFD Server for use in testing. -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <configuration>
                        <!-- for grpc ITs, need testcontainers to startup/teardown without reuse -->
                        <parallel>classesAndMethods</parallel>
                        <forkCount>1</forkCount>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                </configuration>
            </plugin>
            <plugin>
                <!-- Use the dependency plugin to copy and unpack the test dependency artifacts,
                    for use in ITs. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>server-copy-artifacts</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Copy the key/trust stores over to target for easier access in the tests. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-server-resources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/server-work</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../dev/ssl-stores</directory>
                                    <includes>
                                        <include>server-keystore.pfx</include>
                                        <include>server-truststore.pfx</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Reserve random available ports for the server to use. -->
                        <id>reserve-server-ports</id>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <outputFile>${project.build.directory}/server-work/server-ports.properties</outputFile>
                            <minPortNumber>8000</minPortNumber>
                            <maxPortNumber>9999</maxPortNumber>
                            <randomPort>true</randomPort>
                            <portNames>
                                <portName>server.port.https</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

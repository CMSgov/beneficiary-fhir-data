package gov.cms.bfd.model.rda;

import java.time.Instant;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.FieldNameConstants;

@Entity
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@FieldNameConstants
@Table(name = "`RdaApiClaimMessageMetaData`", schema = "`pre_adj`")
public class RdaApiClaimMessageMetaData {
  private static final String SequenceName = "`rda_api_claim_message_meta_data_meta_data_id_seq`";

  /**
   * We insert a record every time a change is received from RDA API so the primary key has to be
   * unique even if we receive the same message twice.
   */
  @Id
  @Column(name = "`metaDataId`", nullable = false, updatable = false)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SequenceName)
  @SequenceGenerator(
      name = SequenceName,
      schema = "`pre_adj`",
      sequenceName = SequenceName,
      allocationSize = 25)
  @EqualsAndHashCode.Include
  private long metaDataId;

  /** Either F (FISS) or M (MCS). */
  @Column(name = "`claimType`", nullable = false)
  @EqualsAndHashCode.Include
  private Character claimType;

  /**
   * sequenceNumber from the RDA API change message object. Indicates the version of the claim that
   * was written to the database.
   */
  @Column(name = "`sequenceNumber`", nullable = false)
  @EqualsAndHashCode.Include
  private long sequenceNumber;

  /** Either dcn (FISS) or idrClmHdIcn (MCS). */
  @Column(name = "`claimId`", length = 25, nullable = false)
  private String claimId;

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "`mbiId`")
  private Mbi mbiRecord;

  /** Either currStatus (FISS) or idrStatusCode (MCS). */
  @Column(name = "`claimState`", length = 1)
  private String claimState;

  /**
   * Timestamp when we inserted the claim from this message into our database. We might have
   * multiple records for the same message in our database if we replay old data from the RDA API
   * (for example after RDA fixes some data problem or we fix a bug in our data ingestion).
   */
  @Column(name = "`receivedDate`")
  private Instant receivedDate;

  /**
   * Extends the builder generated by lombok to also accept a {@link RdaApiProgress.ClaimType} value
   * to initialize the {@code claimType} property.
   */
  public static class RdaApiClaimMessageMetaDataBuilder {
    private Character claimType;

    public RdaApiClaimMessageMetaDataBuilder claimType(RdaApiProgress.ClaimType value) {
      claimType = value.name().charAt(0);
      return this;
    }
  }
}

package gov.cms.bfd.model.rda;

import java.io.Serializable;
import java.time.Instant;
import java.time.LocalDate;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.FieldNameConstants;

/**
 * JPA entity for the table that tracks important meta data for each claim update received from the
 * RDA API. The RDA API can send us multiple updates to each claim. Since our database only stores
 * the most recent version of each claim we cannot simply query the claims tables to obtain a full
 * history of changes to a claim. This table stores sufficient meta-data about each update to track
 * when updates were received and what the status of the claim was on each update.
 */
@Entity
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@FieldNameConstants
@IdClass(RdaClaimMessageMetaData.PK.class)
@Table(name = "claim_message_meta_data", schema = "rda")
public class RdaClaimMessageMetaData {
  /** Either F (FISS) or M (MCS). */
  @Id
  @Column(name = "claim_type", nullable = false)
  @EqualsAndHashCode.Include
  private Character claimType;

  /**
   * sequenceNumber from the RDA API change message object. Indicates the version of the claim that
   * was written to the database.
   */
  @Id
  @Column(name = "sequence_number", nullable = false)
  @EqualsAndHashCode.Include
  private long sequenceNumber;

  /** Either dcn (FISS) or idrClmHdIcn (MCS). */
  @Column(name = "claim_id", length = 25, nullable = false)
  private String claimId;

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "mbi_id")
  private Mbi mbiRecord;

  /** Either currStatus (FISS) or idrStatusCode (MCS). */
  @Column(name = "claim_state", length = 1)
  private String claimState;

  /** Transaction date from the claim. {@code (curr_tran_date or idr_status_date)} */
  @Column(name = "transaction_date")
  private LocalDate transactionDate;

  /**
   * Array of location strings from the claim details. Values in the array depend on the claim type.
   * For FISS claims the values are from the {@code curr_loc_1} and {@code curr_loc_2}. For MCS
   * claims they are all {@code idr_loc_code} values from the {@code rda_mcs_location} table.
   */
  @Column(name = "claim_location", columnDefinition = "json")
  @Convert(converter = StringListConverter.class)
  private StringList locations = new StringList();

  /**
   * Timestamp when we inserted the claim from this message into our database. We might have
   * multiple records for the same message in our database if we replay old data from the RDA API
   * (for example after RDA fixes some data problem, or we fix a bug in our data ingestion).
   */
  @Column(name = "last_updated")
  private Instant lastUpdated;

  /** Identifies the particular phase associated with this claim (1, 2, 3) */
  @Column(name = "phase")
  private Short phase;

  /**
   * Identifies the particular sequence number of the phase associated with this claim (0, 1, 2, N)
   */
  @Column(name = "phase_seq_num")
  private Short phaseSeqNum;

  /** Identifies the date IDR created the extract file */
  @Column(name = "extract_date")
  private LocalDate extractDate;

  /** The date & time the IDR extract file was transmitted to RDA. */
  @Column(name = "transmission_timestamp")
  private Instant transmissionTimestamp;

  /**
   * Extends the builder generated by lombok to also accept a {@link RdaApiProgress.ClaimType} value
   * to initialize the {@code claimType} property.
   */
  public static class RdaClaimMessageMetaDataBuilder {
    private Character claimType;

    public RdaClaimMessageMetaDataBuilder claimType(RdaApiProgress.ClaimType value) {
      claimType = value.name().charAt(0);
      return this;
    }
  }

  /** Composite key class for this entity. */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  public static class PK implements Serializable {
    private Character claimType;
    private long sequenceNumber;
  }
}

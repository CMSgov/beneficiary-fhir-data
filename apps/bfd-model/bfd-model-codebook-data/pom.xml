<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>gov.cms.bfd</groupId>
		<artifactId>bfd-model-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>bfd-model-codebook-data</artifactId>
	<packaging>jar</packaging>

	<description>
		Converts the CCW Data Dictionary codebook PDFs to XML.
	</description>

	<properties>
		<generatedSources>${project.build.directory}/generated-sources/java</generatedSources>
	</properties>

	<dependencies>
		<dependency>
			<!-- Provides the XML codebook data that this module's libraries use. -->
			<groupId>gov.cms.bfd</groupId>
			<artifactId>bfd-model-codebook-extractor</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<!-- Provides annotations that indicate where source code generation should 
				be performed. -->
			<groupId>gov.cms.bfd</groupId>
			<artifactId>bfd-model-codegen-annotations</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<!-- Provides a sane facade for the giant mess of incompatible logging 
				frameworks in Java. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.1</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<!-- Need to disable default annotation processing since apt-maven-plugin takes over. -->
					<compilerArgument>-proc:none</compilerArgument>
				</configuration>
			</plugin>
			<plugin>
				<!-- Run Java Annotation Processors, which will produce new .java source files in
				     target/generated-sources/java. We use this plugin, rather than letting javac
					 handle it, as this plays nicer with VS Code. Can't get VS Code to run this
					 itself, but at least this way it can "see" the output produced by an external
					 Maven build. -->
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<configuration>
					<outputDirectory>${generatedSources}</outputDirectory>
					<processors>
						<processor>gov.cms.bfd.model.codegen.codebook.CodebookVariablesEnumProcessor</processor>
					</processors>
				</configuration>
				<dependencies>
					<dependency>
						<!-- Uses the Codebook XML files from `bluebutton-data-model-codebook-extractor` 
							to codegen related utility code. -->
						<groupId>gov.cms.bfd</groupId>
						<artifactId>bfd-model-codegen</artifactId>
						<version>${project.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<?m2e execute onConfiguration,onIncremental?>
						<id>run-annotation-processors</id>
						<goals>
							<goal>process</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<sources>
						<source>${generatedSources}</source>
					</sources>
				</configuration>
				<executions>
					<execution>
						<!-- Need to ensure the generated source folder is added to the project classpath, in jdt.ls -->
						<?m2e execute onConfiguration,onIncremental?>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>gov.cms.bfd</groupId>
    <artifactId>bfd-parent</artifactId>
    <version>2.153.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>bfd-parent</name>
    <description>
        A parent POM for the CMS Beneficiary FHIR Data projects/applications.
    </description>
    <url>https://github.com/CMSgov/beneficiary-fhir-data</url>
    <organization>
        <name>Centers for Medicare &amp; Medicaid Services</name>
    </organization>
    <licenses>
        <license>
            <name>Creative Commons Zero v1.0 Universal</name>
            <url>http://spdx.org/licenses/CC0-1.0.html</url>
        </license>
    </licenses>

    <issueManagement>
        <!-- There doesn't seem to be any tooling support for this yet, but it
            doesn't hurt to include it. -->
        <system>JIRA</system>
        <url>https://jira.cms.gov/projects/BFD/summary</url>
    </issueManagement>

    <ciManagement>
        <!-- Per http://stackoverflow.com/questions/14754372/whats-the-purpose-of-the-maven-3-cimanagement-configuration#comment20752353_14762245,
            Sonar (at least) can use this information. -->
        <system>jenkins</system>
        <url>https://jenkins-east.cloud.cms.gov/</url>
    </ciManagement>

    <scm>
        <!-- URL format taken from http://www.sonatype.com/people/2009/09/maven-tips-and-tricks-using-github/ -->
        <connection>scm:git:https://github.com/CMSgov/beneficiary-fhir-data.git</connection>
        <developerConnection>scm:git:https://github.com/CMSgov/beneficiary-fhir-data.git</developerConnection>
        <url>https://github.com/CMSgov/beneficiary-fhir-data</url>
        <tag>HEAD</tag>
    </scm>

    <modules>
        <module>bfd-data-npi</module>
        <module>bfd-data-fda</module>
        <module>bfd-shared-utils</module>
        <module>bfd-shared-test-utils</module>
        <module>bfd-model</module>
        <module>bfd-pipeline</module>
        <module>bfd-server</module>
        <module>bfd-db-migrator</module>
        <module>bfd-ops</module>
    </modules>

    <properties>
        <!-- As specified in http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding,
            this property is used by many different plugins to specify the source file
            encoding. We're forcing that to UTF-8, because it's the only sane choice. -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${project.build.sourceEncoding}</project.reporting.outputEncoding>

        <!-- The version of Java that we'll use for everything. -->
        <javaSourceVersion>21</javaSourceVersion>

        <project.build.outputTimestamp>2024-09-18T19:42:16Z</project.build.outputTimestamp>
        <!-- Disable jacoco until automated coverage generation is desired -->
        <maven.jacoco.skip>true</maven.jacoco.skip>
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.coverage.jacoco.xmlReportPaths>${project.build.directory}/coverage-reports/jacoco-ut/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.coverage.jacoco.itReportPath>${project.build.directory}/coverage-reports/jacoco-it/jacoco.xml</sonar.coverage.jacoco.itReportPath>
        <sonar.issue.ignore.multicriteria>e1</sonar.issue.ignore.multicriteria>
        <sonar.issue.ignore.multicriteria.e1.ruleKey>java:S5786</sonar.issue.ignore.multicriteria.e1.ruleKey>
        <sonar.issue.ignore.multicriteria.e1.resourceKey>
            **/*.java
        </sonar.issue.ignore.multicriteria.e1.resourceKey>
        <micrometer.version>1.12.1</micrometer.version>
        <metrics.version>4.2.25</metrics.version>
        <git-build-hook-maven-plugin.version>3.5.0</git-build-hook-maven-plugin.version>
        <dropwizard-metrics-newrelic.version>0.9.0</dropwizard-metrics-newrelic.version>
        <telemetry-http-okhttp.version>0.16.0</telemetry-http-okhttp.version>
        <aws-java-sdk-bom.version>2.25.70</aws-java-sdk-bom.version>
        <aws.crt.version>0.29.25</aws.crt.version>
        <spring-data-jpa.version>3.2.0</spring-data-jpa.version>
        <spring-framework.version>6.1.6</spring-framework.version>
        <spring-retry.version>2.0.8</spring-retry.version>

        <!-- Newer (6.0) release versions for hibernate are available for some hibernate components
        but not all (in particular, entity-manager does not have a 6.0 version available yet).
        Staying on latest 5.x version until all components have 6.0 versions available. -->
        <hibernate.version>6.4.4.Final</hibernate.version>
        <junit.version>5.10.1</junit.version>
        <javadoc.version>3.6.3</javadoc.version>
        <testcontainers.version>1.19.3</testcontainers.version>

        <!-- Jackson versions should be kept in sync when possible but can diverge slightly
            when vulnerabilities or other fixes affect some but not all components -->
        <jackson-databind.version>2.16.0</jackson-databind.version>
        <jackson-datatype-jdk8.version>2.16.0</jackson-datatype-jdk8.version>
        <jackson-dataformat-yaml.version>2.16.0</jackson-dataformat-yaml.version>
        <jackson-datatype-jsr310.version>2.16.0</jackson-datatype-jsr310.version>
        <jackson-annotations.version>2.16.0</jackson-annotations.version>
        <!-- This snakeyaml version overrides the one normally imported by jackson-dataformat-yaml. -->
        <snakeyaml.version>2.2</snakeyaml.version>

        <jakarta.xml.bind.api.version>4.0.1</jakarta.xml.bind.api.version>
        <org.glassfish.jaxb.runtime.version>4.0.4</org.glassfish.jaxb.runtime.version>
        <jakarta.annotation.api.version>3.0.0-M1</jakarta.annotation.api.version>

        <logback.jackson.version>0.1.5</logback.jackson.version>
        <logback.json.classic.version>0.1.5</logback.json.classic.version>
        <mockito.version>5.11.0</mockito.version>
        <byte-buddy.version>1.14.10</byte-buddy.version>
        <rest-assured.version>5.4.0</rest-assured.version>
        <assertj.version>3.24.2</assertj.version>
        <system-lambda-version>1.2.1</system-lambda-version>
        <postgresql.version>42.7.3</postgresql.version>
        <slf4j.version>2.0.9</slf4j.version>
        <log4j.version>2.22.0</log4j.version>
        <hikari.version>5.1.0</hikari.version>
        <flyway.version>10.2.0</flyway.version>
        <newrelic.agent.version>8.7.0</newrelic.agent.version>
        <checkstyle.version>10.12.6</checkstyle.version>
        <guava.version>32.1.2-jre</guava.version>
        <logback.classic.version>1.4.14</logback.classic.version>
        <zjsonpatch.version>0.4.16</zjsonpatch.version>
        <freemarker.version>2.3.32</freemarker.version>
        <reflections.version>0.10.2</reflections.version>
        <itextpdf.version>5.5.13.3</itextpdf.version>
        <auto-service.version>1.1.1</auto-service.version>
        <hibernate.validator.version>8.0.1.Final</hibernate.validator.version>
        <jakarta.el.version>4.0.2</jakarta.el.version>
        <poi.version>5.2.5</poi.version>
        <javapoet.version>1.13.0</javapoet.version>
        <jetty.version>11.0.20</jetty.version>
        <org.apache.httpcomponents.httpclient.version>4.5.14</org.apache.httpcomponents.httpclient.version>
        <datasource-proxy.version>1.10</datasource-proxy.version>
        <cors.filter.version>1.0.1</cors.filter.version>
        <org.apache.spark.version>3.5.0</org.apache.spark.version>
        <hapi-fhir.version>7.0.2</hapi-fhir.version>
        <thymeleaf.version>3.1.2.RELEASE</thymeleaf.version>
        <jersey.version>2.25.1</jersey.version>
        <org.apache.poi.version>5.3.0</org.apache.poi.version>

        <!--  Dependencies required for org.apache.commons -->
        <commons.lang3.version>3.14.0</commons.lang3.version>
        <commons.csv.version>1.10.0</commons.csv.version>
        <commons.io.version>2.15.1</commons.io.version>
        <commons.collections4.version>4.4</commons.collections4.version>
        <commons-codec.version>1.16.0</commons-codec.version>
        <commons-text.version>1.10.0</commons-text.version>
        <hamcrest-library.version>2.2</hamcrest-library.version>
        <awaitility.version>4.2.0</awaitility.version>
        <lombok.version>1.18.30</lombok.version>
        <jaxb.java.time.adapters.version>1.1.3</jaxb.java.time.adapters.version>
        <javax.activation.version>1.1.1</javax.activation.version>
        <commons-cli.version>1.6.0</commons-cli.version>

        <hibernate.jpa.2.1.api.version>1.0.2.Final</hibernate.jpa.2.1.api.version>
        <jpa.version>1.0.2.Final</jpa.version>

        <!-- Dependencies required for connecting to a gRPC API -->
        <grpc_java.version>1.60.0</grpc_java.version>
        <protoc.version>3.25.1</protoc.version>
        <protobuf.version>3.25.1</protobuf.version>
        <jacoco.version>0.8.11</jacoco.version>
        <jakarta.servlet.version>6.0.0</jakarta.servlet.version>
        <!-- The default DB that will be used in integration tests. -->
        <!-- Note: See gov.cms.bfd.model.rif.schema.DatabaseTestHelper for details
            on the default 'jdbc:bfd-test:' URL here. -->
        <its.db.url>jdbc:bfd-test:tc</its.db.url>
        <its.db.username />
        <its.db.password />
        <!-- Docker image used with testcontainers to provide a working database for testing. -->
        <!-- This has a default value in gov.cms.bfd.DatabaseTestUtils that must also be changed when changing this property. -->
        <its.testcontainer.db.image>postgres:16.2-alpine</its.testcontainer.db.image>
        <!-- Docker image used with testcontainers to simulate AWS services for testing. -->
        <!-- This has a default value in gov.cms.bfd.AbstractLocalStackTest that must also be changed when changing this property. -->
        <its.testcontainer.aws.image>localstack/localstack:3.0.2</its.testcontainer.aws.image>

        <!-- Whether the old MBI hash query feature should be enabled -->
        <local.pac.oldMbiHash.enabled>true</local.pac.oldMbiHash.enabled>

        <!-- The source types to enable for PAC resources -->
        <local.pac.claimSourceTypes>fiss,mcs</local.pac.claimSourceTypes>

        <!-- Functional-reactive programming api for concurrent claim ingestion. -->
        <reactor.version>3.6.1</reactor.version>

        <!-- Default number of threads that we can overridden as needed in module poms. -->
        <compile.thread.count>4</compile.thread.count>
        <tests.thread.count>4</tests.thread.count>
        <!-- The jib maven plugin produces optimized docker images from maven projects. -->
        <!-- https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart -->
        <jib.version>3.4.0</jib.version>
        <!-- The base image (FROM) used to build images with jib. -->
        <jib.from>amazoncorretto:21.0.1-alpine</jib.from>
        <!--
          The goal to use with the jib plugin.   Override on command line to change behavior:
          dockerBuild: build on local docker only
          build: build and push to container repository
        -->
        <jib.goal>dockerBuild</jib.goal>
        <!-- Additional image tag for images built by jib.  (e.g. release number or commit hash)-->
        <jib.tag>latest</jib.tag>
        <!-- Optional image namespace. -->
        <jib.namespace />
        <!-- Skip by default.  Override to allow images to be built. -->
        <jib.skip>true</jib.skip>

        <!-- Skip by default.  Override to let open api documents be generated. -->
        <apidocgen.skip>true</apidocgen.skip>

        <!-- Skip by default.  Override to let bfd-ops be generated. -->
        <bfdOps.skip>true</bfdOps.skip>

        <!-- maven plugin versions -->
        <maven.assembly.plugin.version>3.6.0</maven.assembly.plugin.version>
        <maven.antrun.plugin.version>3.1.0</maven.antrun.plugin.version>
        <maven.clean.plugin.version>3.3.2</maven.clean.plugin.version>
        <maven.compiler.plugin.version>3.11.0</maven.compiler.plugin.version>
        <maven.dependency.plugin.version>3.6.1</maven.dependency.plugin.version>
        <maven.enforcer.plugin.version>3.4.1</maven.enforcer.plugin.version>
        <maven.failsafe.plugin.version>3.2.3</maven.failsafe.plugin.version>
        <maven.resources.plugin.version>3.3.1</maven.resources.plugin.version>
        <maven.release.plugin.version>3.0.1</maven.release.plugin.version>
        <maven.surefire.plugin.version>3.2.3</maven.surefire.plugin.version>
        <maven.toolchains.plugin.version>3.1.0</maven.toolchains.plugin.version>
        <maven-core.version>3.9.6</maven-core.version>
        <maven.jacoco.plugin.version>0.8.11</maven.jacoco.plugin.version>
        <maven-plugin-annotations.version>3.10.2</maven-plugin-annotations.version>
        <maven-plugin-api.version>3.9.6</maven-plugin-api.version>
        <maven.plugin.version>3.10.2</maven.plugin.version>
        <build.helper.maven.plugin.version>3.5.0</build.helper.maven.plugin.version>
        <checkstyle.plugin.version>3.3.1</checkstyle.plugin.version>
        <exec.maven.plugin.version>3.1.1</exec.maven.plugin.version>
        <fmt.maven.plugin.version>2.21.1</fmt.maven.plugin.version>
        <protobuf.maven.plugin.version>0.6.1</protobuf.maven.plugin.version>
        <versions.maven.plugin.version>2.16.2</versions.maven.plugin.version>
        <antlr4.version>4.10.1</antlr4.version>
        <javax.annotation-api.version>1.3.2</javax.annotation-api.version>
        <jakarta.persistence-api.version>3.1.0</jakarta.persistence-api.version>
        <hibernate-commons-annotations.version>6.0.6.Final</hibernate-commons-annotations.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
            <dependency>
                <groupId>jakarta.servlet</groupId>
                <artifactId>jakarta.servlet-api</artifactId>
                <version>${jakarta.servlet.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <!-- Functional-reactive programming api for concurrent claim ingestion. -->
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-core</artifactId>
                <version>${reactor.version}</version>
            </dependency>
            <dependency>
                <!-- Library for writing tests of project reactor based code. -->
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-test</artifactId>
                <version>${reactor.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- The newrelic.jar javaagent dependency -->
                <groupId>com.newrelic.agent.java</groupId>
                <artifactId>newrelic-agent</artifactId>
                <version>${newrelic.agent.version}</version>
            </dependency>
            <dependency>
                <groupId>org.thymeleaf</groupId>
                <artifactId>thymeleaf</artifactId>
                <version>${thymeleaf.version}</version>
            </dependency>
            <dependency>
                <!-- Adds java-8 types to jackson. -->
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jdk8</artifactId>
                <version>${jackson-datatype-jdk8.version}</version>
            </dependency>
            <dependency>
                <!-- Adds java-8 date/time classes to jackson. -->
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson-datatype-jsr310.version}</version>
            </dependency>
            <dependency>
                <!-- Used to annotate classes for JSON deserialization. -->
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson-annotations.version}</version>
            </dependency>
            <dependency>
                <!-- JDBC driver for working with PostgreSQL DBs on Java 8+ (JDBC 4.2). -->
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>${awaitility.version}</version>
            </dependency>
            <dependency>
                <!-- Required by logback-jackson. -->
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy -->
            <dependency>
                <groupId>net.bytebuddy</groupId>
                <artifactId>byte-buddy</artifactId>
                <version>${byte-buddy.version}</version>
            </dependency>
            <dependency>
                <!-- Used to write fluent assertions in unit tests. -->
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
            </dependency>
            <dependency>
                <!-- Provides BOMInputStream, and other basic I/O utilities. -->
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons.io.version}</version>
            </dependency>
            <dependency>
                <!-- Provides some extra collections, e.g. the CircularFifoQueue being used in DataSetMonitorWorker. -->
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons.collections4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${commons-text.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <!-- Provides a sane facade for the giant mess of incompatible logging
                    frameworks in Java. -->
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <!-- An implementation of the JCL API that routes everything through to
                    SLF4J, instead. -->
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <!-- An implementation of the Log4J API that routes everything through
                    to SLF4J, instead. -->
                <groupId>org.slf4j</groupId>
                <artifactId>log4j-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <!-- Provides a JUL handler, SLF4JBridgeHandler, that routes everything
                    to SLF4J, instead. -->
                <groupId>org.slf4j</groupId>
                <artifactId>jul-to-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-to-slf4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <!-- Used as a logging backed/target for SLF4J. -->
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.classic.version}</version>
            </dependency>
            <dependency>
                <!-- Used to monitor the JVM's memory usage, garbage collection, etc.
                    at runtime. -->
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-jvm</artifactId>
                <version>${metrics.version}</version>
            </dependency>
            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-jakarta-servlets</artifactId>
                <version>${metrics.version}</version>
            </dependency>
            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-jakarta-servlet</artifactId>
                <version>${metrics.version}</version>
            </dependency>

            <dependency>
                <!-- Used to measure performance and collect other runtime statistics
                    within these projects. -->
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${metrics.version}</version>
            </dependency>
            <dependency>
                <!-- Used to collect metrics in a registry that can be transmitted to CloudWatch efficiently. -->
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-core</artifactId>
                <version>${micrometer.version}</version>
            </dependency>
            <dependency>
                <!-- Used to transmit metrics to JMX for local testing. -->
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-jmx</artifactId>
                <version>${micrometer.version}</version>
            </dependency>
            <dependency>
                <!-- Used to transmit metrics to CloudWatch for alerts and dashboards. -->
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-cloudwatch2</artifactId>
                <version>${micrometer.version}</version>
            </dependency>
            <dependency>
                <!-- Required by logback-json-classic. -->
                <groupId>ch.qos.logback.contrib</groupId>
                <artifactId>logback-jackson</artifactId>
                <version>${logback.jackson.version}</version>
            </dependency>
            <dependency>
                <!-- Provides a JSON layout (i.e. output format) for Logback. Provides
                     ch.qos.logback.contrib.json.classic.JsonLayout, which is used in our logback.xml. -->
                <groupId>ch.qos.logback.contrib</groupId>
                <artifactId>logback-json-classic</artifactId>
                <version>${logback.json.classic.version}</version>
            </dependency>
            <dependency>
                <!-- Used to transmit metrics to NewRelic for alerts and dashboards. -->
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-newrelic</artifactId>
                <version>${micrometer.version}</version>
            </dependency>


            <!-- We lock down the versions of all the various Spring components that
                child projects use, as incompatibility problems with Spring are common. -->
            <dependency>
                <!-- Lock & harmonize the versions of the various Spring Framework modules.
                    We look to HAPI for a guide on what release series to use: ca.uhn.hapi.fhir:hapi-fhir-base:pom:6.1.3
                    uses the 5.3.23 version of the Spring Framework. -->
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring-framework.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <!-- This is the latest release compatible with the version of Spring
                    Framework that we're using, per https://docs.spring.io/spring-data/jpa/docs/2.7.0/reference/html/#dependencies.spring-framework. -->
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-jpa</artifactId>
                <version>${spring-data-jpa.version}</version>
            </dependency>

            <dependency>
                <!-- Lock & harmonize the versions of the various AWS SDK components,
                    per http://docs.aws.amazon.com/java-sdk/latest/developer-guide/setup-project-maven.html. -->
                <!-- When checking for dependencies to upgrade, java-sdk-swf-libraries will show up, however
                the AWS SDK Bom contains an older version for unknown reasons, so it can be ignored. -->
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws-java-sdk-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <!-- The JPA 2.1 API. (Does not provide a JPA implementation by itself;
                    Hibernate is used for that in our projects.) -->
                <artifactId>hibernate-jpa-2.1-api</artifactId>
                <groupId>org.hibernate.javax.persistence</groupId>
                <version>${hibernate.jpa.2.1.api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.common</groupId>
                <artifactId>hibernate-commons-annotations</artifactId>
                <version>${hibernate-commons-annotations.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.orm</groupId>
                <artifactId>hibernate-community-dialects</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.orm</groupId>
                <artifactId>hibernate-ant</artifactId>
                <version>${hibernate.version}</version>
            </dependency>

            <dependency>
                <groupId>jakarta.persistence</groupId>
                <artifactId>jakarta.persistence-api</artifactId>
                <version>${jakarta.persistence-api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.orm</groupId>
                <artifactId>hibernate-core</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <dependency>
                <!-- The Hibernate JPA Model Generator, which will produce MetaModel
                    classes for JPA entities. This happens happens automagically via javac's
                    annotation processor. -->
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-jpamodelgen</artifactId>
                <version>${hibernate.version}</version>
            </dependency>

            <!-- JavaEE dependencies that were included in the JRE prior to Java 11 -->
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>${javax.activation.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.annotation</groupId>
                <artifactId>javax.annotation-api</artifactId>
                <version>${javax.annotation-api.version}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.xml.bind</groupId>
                <artifactId>jakarta.xml.bind-api</artifactId>
                <version>${jakarta.xml.bind.api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>${org.glassfish.jaxb.runtime.version}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.annotation</groupId>
                <artifactId>jakarta.annotation-api</artifactId>
                <version>${jakarta.annotation.api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4</artifactId>
                <version>${antlr4.version}</version>
            </dependency>

            <dependency>
                <!-- JDBC driver for working with PostgreSQL DBs on Java 8+ (JDBC 4.2). -->
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql.version}</version>
            </dependency>
            <dependency>
                <!-- Used to provide DB connection pooling. See https://github.com/brettwooldridge/HikariCP
                    for details. -->
                <groupId>com.zaxxer</groupId>
                <artifactId>HikariCP</artifactId>
                <version>${hikari.version}</version>
            </dependency>

            <dependency>
                <!-- Used implicitly by jackson-dataformat-yaml.  -->
                <!-- Defining it here to override older version referenced by jackson-dataformat-yaml. -->
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>
            <dependency>
                <!-- Add YAML support to jackson -->
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson-dataformat-yaml.version}</version>
            </dependency>

            <dependency>
                <!-- Just useful. -->
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <dependency>
                <!-- Compile Time only dependency to simplify creation of simple POJOs -->
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <!-- Common utility classes -->
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>

            <dependency>
                <!-- Used to parse and read the RIF data files. -->
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-csv</artifactId>
                <version>${commons.csv.version}</version>
            </dependency>

            <dependency>
                <!-- Used to parse and read hex encoded data. -->
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons-codec.version}</version>
            </dependency>

            <dependency>
                <!-- Used for generating Excel workbooks. -->
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${org.apache.poi.version}</version>
            </dependency>

            <dependency>
                <!-- Used for generating Excel workbooks. -->
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${org.apache.poi.version}</version>
            </dependency>

            <dependency>
                <!-- Used for endpoint testing automation -->
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>${rest-assured.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <!-- The test framework used for unit and integration tests. -->
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- Needed for parameterized unit tests. -->
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-params</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- Used to create mock objects for unit tests. -->
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- Adds convenience features for working with mocks in tests -->
                <groupId>org.mockito</groupId>
                <artifactId>mockito-junit-jupiter</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.newrelic.telemetry</groupId>
                <artifactId>dropwizard-metrics-newrelic</artifactId>
                <version>${dropwizard-metrics-newrelic.version}</version>
            </dependency>

            <dependency>
                <groupId>com.newrelic.telemetry</groupId>
                <artifactId>telemetry-http-okhttp</artifactId>
                <version>${telemetry-http-okhttp.version}</version>
            </dependency>

            <!-- These dependencies are necessary to build stubs from proto file and to call a gRPC server. -->
            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-netty-shaded</artifactId>
                <version>${grpc_java.version}</version>
            </dependency>
            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-protobuf</artifactId>
                <version>${grpc_java.version}</version>
            </dependency>
            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-stub</artifactId>
                <version>${grpc_java.version}</version>
            </dependency>
            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-inprocess</artifactId>
                <version>${grpc_java.version}</version>
            </dependency>
            <dependency>
                <!-- Provides core protobuf library.  -->
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>${protobuf.version}</version>
            </dependency>
            <dependency>
                <!-- provides JsonFormat and JsonParser -->
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java-util</artifactId>
                <version>${protobuf.version}</version>
            </dependency>
            <dependency>
                <!-- A test code coverage plugin that can operate as a Java agent (and thus doesn't require class
                    file instrumentation). -->
                <groupId>org.jacoco</groupId>
                <artifactId>org.jacoco.agent</artifactId>
                <classifier>runtime</classifier>
                <version>${jacoco.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <resource>
                <!-- Enable Maven's resource filtering for text files in 'src/main/resources/'.
                    This will replace properties in text files with their values, e.g. "${project.groupId}"
                    will be replaced with "gov.cms.beneficiaryfhirdata". -->
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <!-- Enable Maven's resource filtering for text files in 'src/test/resources/'.
                    This will replace properties in text files with their values, e.g. "${project.groupId}"
                    will be replaced with "gov.cms.beneficiaryfhirdata". -->
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <pluginManagement>
            <plugins>
                <!-- It adds a lot of noise to this file, but we specify the version
                    of all plugins used in the module builds here to help ensure that the builds
                    are always reproducible. This is actually enforced down below by the maven-enforcer-plugin
                    execution. -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>${build.helper.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven.enforcer.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>enforce-maven</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireMavenVersion>
                                        <version>3.2.5</version>
                                    </requireMavenVersion>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <!-- Can be used to select which JDK to use (amongst other things).
                        Options must be specified in `~/.m2/toolchains.xml`. -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-toolchains-plugin</artifactId>
                    <version>${maven.toolchains.plugin.version}</version>
                    <configuration>
                        <toolchains>
                            <jdk>
                                <version>${javaSourceVersion}</version>
                            </jdk>
                        </toolchains>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                    <configuration>
                        <nonFilteredFileExtensions>
                            <nonFilteredFileExtension>zip</nonFilteredFileExtension>
                            <nonFilteredFileExtension>txt</nonFilteredFileExtension>
                            <nonFilteredFileExtension>jks</nonFilteredFileExtension>
                            <nonFilteredFileExtension>p12</nonFilteredFileExtension>
                        </nonFilteredFileExtensions>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.spotify.fmt</groupId>
                    <artifactId>fmt-maven-plugin</artifactId>
                    <version>${fmt.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <!-- Set the Java source version used by the compiler. -->
                        <source>${javaSourceVersion}</source>
                        <target>${javaSourceVersion}</target>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <configuration>
                        <!-- The intent here is to provide a property that can be set in `settings.xml`,
                            to specify environment-specific JVM arguments for tests. For example, one
                            might want to configure the max heap size and/or proxy server settings for
                            tests run on a system. -->
                        <argLine>${maven-test.jvm-args.env-specific}</argLine>
                        <trimStackTrace>false</trimStackTrace>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <!-- run ITs w/multiple threads -->
                        <useUnlimitedThreads>true</useUnlimitedThreads>
                        <parallel>all</parallel>
                        <threadCountClasses>8</threadCountClasses>
                        <threadCountMethods>10</threadCountMethods>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.plugin.version}</version>
                    <configuration>
                        <!-- The intent here is to provide a property that can be set in `settings.xml`,
                            to specify environment-specific JVM arguments for tests. For example, one
                            might want to configure the max heap size and/or proxy server settings for
                            tests run on a system. -->
                        <argLine>${maven-test.jvm-args.env-specific}</argLine>
                        <!-- Sets the VM argument line used when integration tests are run. -->
                        <argLine>${failsafe.jacoco.args}</argLine>
                        <trimStackTrace>false</trimStackTrace>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <systemPropertyVariables>
                            <its.db.url>${its.db.url}</its.db.url>
                            <its.db.username>${its.db.username}</its.db.username>
                            <its.db.password>${its.db.password}</its.db.password>
                            <its.testcontainer.db.image>${its.testcontainer.db.image}</its.testcontainer.db.image>
                            <its.testcontainer.aws.image>${its.testcontainer.aws.image}</its.testcontainer.aws.image>
                            <generateTestData>false</generateTestData>
                        </systemPropertyVariables>
                        <includes>
                            <include>**/*IT.java</include>
                            <include>**/*E2E.java</include>
                        </includes>

                        <!-- Needed to avoid test failures when comparing ETL timestamps. -->
                        <environmentVariables>
                            <TZ>UTC</TZ>
                        </environmentVariables>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.3.0</version>
                    <configuration>
                        <!-- Add some extra information to the JAR manifests. Helpful for folks
                            looking at a JAR, trying to figure out what it is. -->
                        <archive>
                            <manifest>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.4.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${javadoc.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.1.1</version>
                    <configuration>
                        <!-- Delay deployment of build artifacts until after all modules build successfully. -->
                        <deployAtEnd>true</deployAtEnd>
                        <!-- We aren't publishing libraries for consumption via maven so we want to limit which projects
                             are pushed to CodeArtifact.-->
                        <skip>true</skip>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.12.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scm-plugin</artifactId>
                    <version>2.0.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${maven.release.plugin.version}</version>
                    <configuration>
                        <tagNameFormat>v@{project.version}</tagNameFormat>
                        <!-- Automatically push after release. -->
                        <pushChanges>true</pushChanges>
                        <localCheckout>true</localCheckout>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <commitByProject>false</commitByProject>
                        <arguments>--threads 1C -DskipTests=true -DskipITs -Dmaven.build.cache.enabled=false</arguments>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <configuration>
                        <configLocation>checkstyle.xml</configLocation>
                        <!-- Only look in source directories, basically ignores generated code -->
                        <sourceDirectories>
                            <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
                            <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
                        </sourceDirectories>
                    </configuration>
                    <version>${checkstyle.plugin.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>${checkstyle.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <!-- Used to build docker images for a project. -->
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>${jib.version}</version>
                    <configuration>
                        <to>
                            <image>${jib.namespace}${project.artifactId}:${project.version}</image>
                            <tags>
                                <tag>${jib.tag}</tag>
                            </tags>
                        </to>
                        <from>
                            <image>${jib.from}</image>
                        </from>
                        <containerizingMode>packaged</containerizingMode>
                        <container>
                            <jvmFlags>-Dorg.jboss.logging.provider=slf4j</jvmFlags>
                        </container>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!-- This plugin configuration allows us to scan all of the pom files
                 to find any dependencies that have newer versions available
                 that are not alpha, beta, or other commonly used pre-release version tags.
                 To invoke this plugin to find the out of data dependencies,
                 run: "mvn versions:display-dependency-updates" from the apps folder. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions.maven.plugin.version}</version>
                <configuration>
                    <rulesUri>file://${maven.multiModuleProjectDirectory}/rules.xml</rulesUri>
                </configuration>
            </plugin>
            <!-- Reduce noise by limiting installation to the bfd-parent, disabling inheritance to children. -->
            <plugin>
                <groupId>com.rudikershaw.gitbuildhook</groupId>
                <artifactId>git-build-hook-maven-plugin</artifactId>
                <version>${git-build-hook-maven-plugin.version}</version>
                <inherited>false</inherited>
                <configuration>
                    <installHooks>
                        <pre-commit>${project.basedir}/../.github/scripts/pre-commit.sh</pre-commit>
                        <pre-push>${project.basedir}/../.github/scripts/pre-push.sh</pre-push>
                    </installHooks>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Use the enforcer plugin to help ensure that builds are always
                            reproducible. -->
                        <id>enforce-plugin-versions</id>
                        <inherited>true</inherited>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requirePluginVersions>
                                    <message>Undefined plugin versions can lead to un-reproducible
                                        builds.
                                    </message>
                                    <banTimestamps>false</banTimestamps>
                                    <!-- Allow SNAPSHOT version of theses plugins since we build them in our own project rather than pulling from a repository. -->
                                    <unCheckedPluginList>gov.cms.bfd:bfd-model-dsl-codegen-plugin,gov.cms.bfd:bfd-model-codebook-plugin</unCheckedPluginList>
                                </requirePluginVersions>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Activate the toolchain specified above. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-toolchains-plugin</artifactId>
                <executions>
                    <execution>
                        <id>toolchain-default</id>
                        <goals>
                            <goal>toolchain</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify.fmt</groupId>
                <artifactId>fmt-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <!-- Use this plugin to run https://github.com/google/google-java-format
                                on every build, which will auto-format all of our Java source code. Note
                                that we have a Git pre-commit hook that will also do this. -->
                            <goal>format</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Always generate a source JAR. This is a best practice, but is
                            also required by OSSRH/Maven Central. -->
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <failOnWarnings>false</failOnWarnings>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <!-- Exclude javadocs on certain generated files, reduces build warnings -->
                    <sourceFileExcludes>
                        <exclude>**/**_.java</exclude>
                        <exclude>**/gov/cms/bfd/model/rda/entities/**.java</exclude>
                        <exclude>**/gov/cms/bfd/model/rif/entities/**.java</exclude>
                        <exclude>**/gov/cms/bfd/pipeline/rda/grpc/source/parsers/**.java</exclude>
                        <exclude>**/gov/cms/bfd/pipeline/rda/grpc/server/RdaService.java</exclude>
                        <exclude>**/gov/cms/mpsm/rda/**</exclude>
                    </sourceFileExcludes>
                    <quiet>true</quiet>
                    <!-- This notimestamp option does not make our *-javadoc.jar files completely
                        reproducible, but the option is recommended by Maven for a reproducible
                        build in general. However, we are not using the javadocs in any of the war
                        and zip artifacts that we need to be reproducible.
                        See https://maven.apache.org/guides/mini/guide-reproducible-builds.html
                     -->
                    <notimestamp>true</notimestamp>
                </configuration>
                <executions>
                    <execution>
                        <!-- Always generate a Javadoc JAR. This is a best practice, but is
                            also required by OSSRH/Maven Central. -->
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <executions>
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Will run the `*IT.java` integration tests in the modules, as part
                    of the build. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.plugin.version}</version>
                <configuration>
                    <skip>${maven.jacoco.skip}</skip>
                </configuration>
                <executions>
                    <!--
                        Prepares the property pointing to the JaCoCo runtime agent which
                        is passed as VM argument when Maven the Surefire plugin is executed.
                    -->
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                            <!--
                                Sets the name of the property containing the settings
                                for JaCoCo runtime agent.
                            -->
                            <propertyName>surefire.jacoco.args</propertyName>
                        </configuration>
                    </execution>
                    <!--
                        Ensures that the code coverage report for unit tests is created after
                        unit tests have been run.
                    -->
                    <execution>
                    <id>post-unit-test</id>
                    <phase>test</phase>
                    <goals>
                        <goal>report</goal>
                    </goals>
                    <configuration>
                        <!-- Sets the path to the file which contains the execution data. -->
                        <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
                        <outputDirectory>${project.build.directory}/coverage-reports/jacoco-ut</outputDirectory>
                        <!-- Only generate the XML version of the report -->
                        <formats>XML</formats>
                    </configuration>
                    </execution>
                    <!--
                        Prepares the property pointing to the JaCoCo runtime agent which
                        is passed as VM argument when Maven the Failsafe plugin is executed.
                    -->
                    <execution>
                        <id>pre-integration-test</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
                            <!--
                                Sets the name of the property containing the settings
                                for JaCoCo runtime agent.
                            -->
                            <propertyName>failsafe.jacoco.args</propertyName>
                        </configuration>
                    </execution>
                    <!--
                        Ensures that the code coverage report for integration tests after
                        integration tests have been run.
                    -->
                    <execution>
                        <id>post-integration-test</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.build.directory}/coverage-reports/jacoco-it</outputDirectory>
                            <!-- Only generate the XML version of the report -->
                            <formats>XML</formats>
                        </configuration>
                    </execution>
                    <!-- Merges the Jacoco .exec files to be aggregated. -->
                    <execution>
                        <id>merge-results</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <directory>${project.build.directory}/coverage-reports</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${project.build.directory}/coverage-reports/aggregate.exec</destFile>
                        </configuration>
                    </execution>
                    <!-- Generates the aggregated XML file -->
                    <execution>
                        <id>post-merge-report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report-aggregate</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the aggregated report. -->
                            <outputDirectory>${project.build.directory}/coverage-reports/jacoco-aggregate</outputDirectory>
                            <formats>XML</formats>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run. -->
                    <argLine>${surefire.jacoco.args}</argLine>
                    <!-- Excludes integration tests when unit tests are run. -->
                    <excludes>
                        <exclude>**/IT.java</exclude>
                        <exclude>**/E2E.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
        <extensions>
            <extension>
                <!-- Used by the bfd-pipeline-rda-grpc-apps and bfd-pipeline-rda-grpc modules, but
                defined here to workaround https://issues.apache.org/jira/browse/MDEPLOY-193. -->
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.6.2</version>
            </extension>
        </extensions>
    </build>

    <profiles>
        <profile>
            <id>release</id>
            <properties>
                <jib.skip>false</jib.skip>
                <jib.goal>build</jib.goal>
                <jib.namespace>${env.ECR_REPOSITORY_NAMESPACE}/</jib.namespace>
                <maven.build.cache.enabled>false</maven.build.cache.enabled>
                <!-- Source jars are large and we don't need to publish them. -->
                <maven.source.skip>true</maven.source.skip>
                <maven.javadoc.skip>true</maven.javadoc.skip>
                <checkstyle.skip>true</checkstyle.skip>
                <apidocgen.skip>false</apidocgen.skip>
                <bfdOps.skip>false</bfdOps.skip>
            </properties>
            <distributionManagement>
                <repository>
                    <id>${env.CA_DOMAIN}-${env.CA_REPOSITORY}</id>
                    <url>${env.CA_REPOSITORY_ENDPOINT}</url>
                </repository>
            </distributionManagement>
        </profile>
    </profiles>

</project>

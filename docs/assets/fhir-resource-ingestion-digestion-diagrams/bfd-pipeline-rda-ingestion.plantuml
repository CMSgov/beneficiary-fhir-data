@startuml
title BFD-Pipeline-RDA-GRPC Ingestion of Partially Adjudicated Claims Data Sequence
participant "rda-pipeline-source"
participant "rda-streaming-api"
database "rda-db"
participant "rda-pipeline-sink"
database "bfd-db"
note over "rda-streaming-api": Runs every 5 min in prod \n 1 hr in test
"rda-pipeline-source" -> "rda-streaming-api": Smoke test to determine connectivity
"rda-pipeline-source" -> "rda-db": Smoke test to determine connectivity
"rda-streaming-api" --> "rda-pipeline-source"  
"rda-db" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-db": Dead Letter Queue (DLQ) Processing
"rda-db" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-streaming-api": Run 'DLQGrpcRdaSource' job if needed
"rda-streaming-api" -> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-streaming-api": GetVersion: stream of current API version
"rda-streaming-api" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-db": Get starting sequence number to process claims
"rda-db" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-streaming-api": Open stream, and receive messages for processing/to ingest claims \n via RdaFissClaimLoadJob and RdaMcsClaimLoadJob
"rda-streaming-api" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-pipeline-sink": Send data to sink for storage
"rda-pipeline-sink" -> "bfd-db": Store fiss and mcs claim data for BFD consumption
"bfd-db" --> "rda-pipeline-sink"
"rda-pipeline-sink" --> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-streaming-api": Stop processing and close stream if: \n no more claims to process or there is an error 
"rda-streaming-api"--> "rda-pipeline-source"
"rda-pipeline-source" -> "rda-db": Any messages that can't be processed written to DLQ table
@enduml

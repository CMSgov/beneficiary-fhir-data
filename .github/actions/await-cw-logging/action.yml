# This Composite Action is a companion to the "stdout-to-cwlogs.sh" script that is used to log
# dynamic, sensitive stdout from commands in GHA. If any command's stdout is piped to that script,
# this Action should be included in the Workflow as an "always" step to ensure logs are properly
# submitted once the Workflow completes
name: "Await Background CloudWatch Logging"
description: "Action that waits for a specified time for ongoing CloudWatch logging to finish"
inputs:
  waitTimeSeconds:
    description: "Amount of time, in seconds, to wait total"
    required: true
    default: "60"
  sleepTimeSeconds:
    description: >-
      Amount of time, in seconds, to sleep between checking for orphaned AWS CLI PutLogEvents
      processes
    required: true
    default: "1"
runs:
  using: "composite"
  steps:
    - name: Validate inputs
      run: |
        int_regex='^[0-9]+$'
        if ! [[ "${{ inputs.waitTimeSeconds }}" =~ $re && "${{ inputs.waitTimeSeconds }}" != 0 ]]; then
          echo "'waitTimeSeconds' must be a positive integer"
          exit 1
        fi
        if ! [[ "${{ inputs.sleepTimeSeconds }}" =~ $re && "${{ inputs.sleepTimeSeconds }}" != 0 ]]; then
          echo "'sleepTimeSeconds' must be a positive integer"
          exit 1
        fi
      shell: bash

    # The backgrounded AWS CLI invocations of "put-log-events" in "stdout-to-cwlogs.sh" can linger
    # even after the command it's logging. We don't want to lose those logs, as GHA will
    # automatically terminate "orphan" background processes in the built-in "Cleanup Job" step. So,
    # this step ensures that lingering PutLogEvents calls are able to finish before getting
    # terminated automatically
    - name: Await AWS put-log-events
      run: |
        seconds_waited=0

        while (( seconds_waited < ${{ input.waitTimeSeconds }} )); do
          remaining_aws_processes="$(ps aux | grep '[p]ut-log-events' || true)"

          if [[ -z $remaining_aws_processes ]]; then
            echo "All logs have been submitted"
            exit 0
          fi

          sleep ${{ input.sleepTimeSeconds }}
          seconds_waited=$(( seconds_waited + ${{ input.sleepTimeSeconds }}))
        done

        echo "Some logs could not be uploaded to CloudWatch"
      shell: bash

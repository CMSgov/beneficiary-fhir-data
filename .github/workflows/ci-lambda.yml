name: CI - Python

on:
  # push:
  #   branches:
  #     - master
  #     - BFD-3524
  #   paths:
  #     - '**/*.py'
  #     - '**/*requirement*.txt'
  # pull_request:
  #   branches:
  #     - master
  #     - BFD-3524
  #   paths:
  #     - '**/*.py'
  #     - '**/*requirement*.txt'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.py'
      - '**/*requirement*.txt'

  merge_group:
    branches:
      - master
    # paths:
    #   - '**/*.py'
    #   - '**/*requirement*.txt'
  workflow_dispatch:

env:
  BASE_COMMIT: ""
  GH_TOKEN: ${{ github.token }}

jobs:
  lambda-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        id: code-checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 2

      - name: Set up Python
        id: python-setup
        uses: actions/setup-python@v5.1.1
        with:
          python-version: '3.11' # Specify the required Python version

      # - name: Install dependencies
      #   id: dependency-install
      #   run: |
      #     python -m venv venv
      #     source venv/bin/activate
      #     pip install --upgrade pip

      # - name: Determine changed files for push event
      #   id: list-push-changes
      #   if: github.event_name == 'push'
      #   run: |
      #       echo "Fetching list of changed files for push event..."
      #       CHANGEDPUSHFILES=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }})
      #       echo "Changed files: $CHANGEDPUSHFILES"
      #       echo 'CHANGEDPUSHFILES='"${CHANGEDPUSHFILES}" >> $GITHUB_OUTPUT

      - name: Determine changed files for pull request event
        id: list-pr-changes
        if: github.event_name == 'pull_request'
        run: |
            echo "Fetching list of changed files for pull request event..."
            PR_NUMBER=${{ github.event.pull_request.number }}
            CHANGEDPRFILES=$(gh pr diff $PR_NUMBER --name-only)
            echo "Changed files: $CHANGEDPRFILES"
            echo "${CHANGEDPRLIST}" > ${{ runner.temp }}/PRLIST.txt
            echo "CHANGEDPRLIST=${{ runner.temp }}/PRLIST.txt" >> $GITHUB_OUTPUT

      - name: Determine changed files for merge_group event
        id: list-merge-changes
        if: github.event_name == 'merge_group'
        run: |
            # Get target branch (base branch) name
            BASE_BRANCH=$(jq -r '.pull_request.base.ref' < "$GITHUB_EVENT_PATH")
            # Fetch base branch
            git fetch origin $BASE_BRANCH
            # Get merge base commit
            BASE_COMMIT=$(git merge-base HEAD origin/$BASE_BRANCH)
            echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV
            MERGE_FILES=$(git diff --name-only ${{ env.BASE_COMMIT }} HEAD)
            echo "Merge files: $MERGE_FILES"
            echo "${MERGE_FILES}" > ${{ runner.temp }}/MRGLIST.txt
            echo "CHANGEDMERGELIST=${{ runner.temp }}/MRGLIST.txt" >> $GITHUB_OUTPUT


      - name: Run Python Tests for affected folders
        id: run-pytest-set
        run: |
            LAMBDA_PATTERN="lambda_src"
            CHANGED_FILES=${{ runner.temp }}/CFLIST.txt
            touch ${CHANGED_FILES}
            if [ -f "${{ steps.list-merge-changes.outputs.CHANGEDMERGELIST }}" ]
            then
              cat ${{ steps.list-merge-changes.outputs.CHANGEDMERGELIST }} >> ${CHANGED_FILES}
            fi
            if [ -f "${{ steps.list-pr-changes.outputs.CHANGEDPRLIST }}" ]
            then
              cat ${{ steps.list-pr-changes.outputs.CHANGEDPRLIST }} >> ${CHANGED_FILES}
            fi
            echo 'Changed files:'; cat ${CHANGED_FILES}
            # the following sequence reduces CHANGED_FILES to CHANGEDIRS
            # thereby avoiding multiple test cycles for a single folder of muliple file changes
            cat ${CHANGED_FILES} | while read f
            do 
              dirname $f
            done | sort | uniq | while read DIR
            do
                echo "Affected source folder: ${DIR}"
                if [[ "${DIR}" =~ "${LAMBDA_PATTERN}" ]]
                then
                    # create virtual environment for each DIR and execute tests
                    python -m venv venv
                    source venv/bin/activate
                    pip install --upgrade pip
                    if [ -e $DIR/*requirement*.txt ]
                    then
                        pip install -r $DIR/*requirement*.txt 
                    fi
                    pip install pytest
                    pytest $DIR/tests 
                fi
            done

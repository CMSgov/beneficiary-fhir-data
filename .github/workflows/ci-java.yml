name: 'CI - Java'
on: pull_request

env:
  # workflow file matchers - workflow jobs will only run if matching files are found
  # please see https://github.com/CMSgov/beneficiary-fhir-data/pull/773 for why we
  # are using this workflow logic
  workflow_files_re: >
    (^apps/bfd- |
    ^apps/Dockerfile |
    ^apps/pom.xml |
    ^ops/ansible |
    ^.github/workflows/ci-ansible.yml |
    ^.github/workflows/ci-java.yml)

jobs:
  workflow:
    name: Checking workflow
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.workflow_files.outputs.files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - id: workflow_files
        run: |
          echo "::set-output name=files::$(git diff --name-only --diff-filter=ACMRTD HEAD^ HEAD | grep -E '${{ env.workflow_files_re }}')"

  mvn-fmt-maven-plugin:
    runs-on: ubuntu-latest
    needs: workflow
    if: needs.workflow.outputs.files
    steps:
      - uses: actions/checkout@v2
      - name: 'Setup JDK'
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: 'Generate maven toolchain config'
        run: |
          cat << EOF > ~/.m2/toolchains.xml
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>11</version>
                <vendor>OpenJDK</vendor>
              </provides>
              <configuration>
                <jdkHome>$JAVA_HOME</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF
      - name: 'Run maven ${{ matrix.mvn_commmand }}'
        run: mvn com.coveo:fmt-maven-plugin:check
        working-directory: ./apps
  
  mvn-verify:
    runs-on: ubuntu-latest
    needs: workflow
    if: needs.workflow.outputs.files
    steps:
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GA_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: 'Checkout repo'
        uses: actions/checkout@v2
      - name: 'Setup JDK'
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: 'Generate Maven Config'
        run: |
          cat << EOF > ~/.m2/toolchains.xml
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>11</version>
                <vendor>OpenJDK</vendor>
              </provides>
              <configuration>
                <jdkHome>$JAVA_HOME</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF
      - name: 'Run Maven Build'
        run: mvn --batch-mode --threads 1C verify
        working-directory: ./apps
      
      - name: 'Run Maven Build on FDA Drug Utility'
        run: mvn --batch-mode --threads 1C verify
        working-directory: ./apps/bfd-data-fda

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" \
          | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Deliver Apps Container Image
        run: |
          SANITIZED_REF="${GITHUB_REF_NAME////-}"
          IMAGE_NAME="ghcr.io/cmsgov/bfd-apps"
          SHORT_SHA="$(git rev-parse --short HEAD)"
          FULL_BRANCH_TAG="${IMAGE_NAME}:${SANITIZED_REF}" # human readable, branch name tag
          FULL_COMMIT_TAG="${IMAGE_NAME}:${SHORT_SHA}"     # a short sha suffixed image tag
          docker build . --tag "$FULL_BRANCH_TAG"
          docker tag "$FULL_BRANCH_TAG" "$FULL_COMMIT_TAG"
          docker push "$FULL_BRANCH_TAG"
          docker push "$FULL_COMMIT_TAG"
        working-directory: apps
      - name: 'Upload test artifacts'
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: mvn-verify-build-logs
          path: |
            **/target/surefire-reports/*
            **/target/failsafe-reports/*
            bfd-server/bfd-server-war/target/server-work/access.*
            bfd-server/bfd-server-war/target/server-work/server-console.log

  fhir-validate:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v2
      - name: 'Create local branch references'
        run: git fetch && git checkout master && git checkout $GITHUB_HEAD_REF
      - name: 'Check for new/modified resources'
        id: run_check
        # Checks if there are any modified resources in the v2 endpoint responses
        # grep returns non-zero exit code when no matches are found, so only skip if the condition fails
        run: |
          can_skip="false" #$(if [[ $(git diff --name-only $GITHUB_BASE_REF... | grep apps/bfd-server/bfd-server-war/src/test/resources/endpoint-responses/v2) ]]; then echo "false"; else echo "true"; fi)
          if [[ can_skip ]]; then echo "No modified resources found, skipping rest of job."; else echo "Found modified resources, validating..."; fi
          echo ::set-output name=skip::$can_skip
      - name: 'Set up Python'
        if: steps.run_check.outputs.skip == 'false'
        uses: actions/setup-python@v3
        with:
          python-version: '3.8.10'
      - name: 'Install Python dependencies'
        if: steps.run_check.outputs.skip == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      - name: 'Set up JDK'
        if: steps.run_check.outputs.skip == 'false'
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: 'Download FHIR validator'
        if: steps.run_check.outputs.skip == 'false'
        uses: wei/wget@v1
        with:
          args: https://github.com/hapifhir/org.hl7.fhir.core/releases/latest/download/validator_cli.jar
      - name: 'Verify FHIR resource'
        id: validate_fhir
        if: steps.run_check.outputs.skip == 'false'
        run: |
          is_valid="false"
          [[ output=$(python ./validations.py) ]] && is_valid="true"
          echo "$output"
          $output=$([[ $output =~ .*(Results:.*) ]] && printf "${BASH_REMATCH[1]}")
          echo "$output"
          echo ::set-output name=valid::$is_valid
          echo ::set-output name=output::$output
      - name: 'Job Outcome'
        if: steps.run_check.outputs.skip == 'false'
        run: |
          is_valid=${{ steps.validate_fhir.outputs.valid }}
          output=${{ steps.validate_fhir.outputs.output }}
          echo "$output" >> $GITHUB_STEP_SUMMARY
          printf "$output\n"
          [[ "$is_valid" == "false" ]] && exit 1

  # ansible system testing
  ansible-role-bfd-pipeline:
    needs: mvn-verify
    uses: ./.github/workflows/ci-ansible.yml
    with:
      role: bfd-pipeline

  ansible-role-bfd-server:
    needs: mvn-verify
    uses: ./.github/workflows/ci-ansible.yml
    with:
      role: bfd-server

  ansible-role-bfd-db-migrator:
    needs: mvn-verify
    uses: ./.github/workflows/ci-ansible.yml
    with:
      role: bfd-db-migrator

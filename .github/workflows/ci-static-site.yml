name: "CI - Deploy Static Site"
on:
  workflow_call:
    inputs:
      bfdEnvironment:
        description: "The BFD environment to deploy the Static Site to"
        required: true
        type: string
      awsRegion:
        description: >-
          Override the AWS Region destination for uploaded artifacts.
          Default to `us-east-1`.
        default: us-east-1
        type: string
        required: true
      bfdRelease:
        description: >-
          Version string of the BFD release from which the data dictionaries will be pulled.
          If omitted, the latest GitHub release version will be used
        required: false
        type: string
  workflow_dispatch:
    inputs:
      bfdEnvironment:
        description: "The BFD environment to deploy the Static Site to"
        required: true
        type: string
      awsRegion:
        description: >-
          Override the AWS Region destination for uploaded artifacts.
          Default to `us-east-1`.
        default: us-east-1
        type: choice
        options:
          - us-east-1
          - us-west-2
        required: true
      bfdRelease:
        description: >-
          Version string of the BFD release from which the data dictionaries will be pulled.
          If omitted, the latest GitHub release version will be used
        required: false
        type: string
      branch:
        description: >-
          Override the branch on which the build is based.
          Default to selected reference in the `Use workflow from` drop-down when empty.
        required: false
permissions:
  id-token: write # This is required for requesting the AWS IAM OIDC JWT
  contents: write # This is required for actions/checkout
defaults:
  run:
    shell: bash
env:
  # AWS Code Artifact Repository
  CA_REPOSITORY: bfd-mgmt
  CA_DOMAIN: bfd-mgmt
  AWS_REGION: ${{ inputs.awsRegion }}
jobs:
  deploy-static-site:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.ref_name }}

      - name: Determine latest release version
        id: determine-latest-release
        if: !inputs.bfdRelease
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: ${{ github.repository }}

      - name: Set environment variables
        run: |
          release_version="${{ inputs.bfdRelease || steps.determine-latest-release.outputs.release }}"
          if [[ -z $release_version ]]; then
            echo "Release version unspecified or unable to be determined"
            echo 1
          fi

          # Strip leading "v" from the returned version if the latest version is chosen
          release_version="$(echo "$release_version" | sed "s/^v//g")"
          echo "BFD_RELEASE=$release_version" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_AWS_IAM_ROLE_ARN }}
          role-session-name: ci-static-site
          aws-region: ${{ inputs.awsRegion }}

      - name: Mask sensitive AWS data
        run: |
          caller_id="$(aws sts get-caller-identity)"
          account_num="$(jq -r '.Account' <<<$caller_id)"
          role_arn="$(jq -r '.Arn' <<<$caller_id)"
          user_id="$(jq -r '.UserId' <<<$caller_id)"

          echo "::add-mask::$account_num"
          echo "::add-mask::$role_arn"
          echo "::add-mask::$user_id"

      - name: Deploy static-site Terraservice
        uses: ./.github/actions/deploy-terraservice
        with:
          bfdEnvironment: ${{ inputs.bfdEnvironment }}
          servicePath: ops/terraform/services/static-site
          # TODO: Replace
          cloudwatchLogGroup: "/bfd-3465/testing"
          cloudwatchLogStream: "ci-static-site-${{ github.run_number }}"

      - name: Pull data dictionaries
        run: |
          mkdir -p "${{ github.workspace }}/dist"
          cd "${{ github.workspace }}/dist"

          readarray -t assets < <(echo "$CA_ASSETS" | jq -r -c '.[]')
          for asset in "${assets[@]}"
          do
            aws codeartifact get-package-version-asset \
              --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \
              --domain "$CA_DOMAIN" \
              --repository "$CA_REPOSITORY" \
              --asset "$asset" \
              --package-version "$BFD_RELEASE" \
              --package "$CA_PACKAGE" \
              --namespace "$CA_NAMESPACE" \
              --format maven \
              --region "$AWS_REGION" \
              "${asset/$CA_PACKAGE-${BFD_RELEASE}-v/V}" 1>/dev/null
          done
        env:
          BFD_RELEASE: ${{ inputs.bfdRelease }}
          CA_NAMESPACE: gov.cms.bfd
          CA_PACKAGE: bfd-server-war
          CA_ASSETS: |
            [
              "bfd-server-war-${{ inputs.bfdRelease }}-v1-data-dictionary.json",
              "bfd-server-war-${{ inputs.bfdRelease }}-v2-data-dictionary.json",
            ]

      # Use GitHub Actions' cache to shorten build times and decrease load on servers
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Build Jekyll static site
        run: |
          cd "${{ github.workspace }}/static-site"
          bundle config path vendor/bundle
          bundle install

          bundle exec jekyll build

      - name: Sync static site to S3
        run: |
          # aws s3 sync "${{ github.workspace }}/static-site" s3://bfd-${{ inputs.bfdEnvironment }} --delete

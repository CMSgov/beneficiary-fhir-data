name: 'validate insights terraform'
# inits and validates insights terraform 
#
on:
  pull_request:
    paths:
      - 'insights/terraform/**'

env:
  # default terraform version if no tools.yaml file(s) are found
  DEFAULT_TF_VERSION: '0.12.x'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.set-matrix.outputs.run }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: setup validation matrix
        id: set-matrix
        run: |
          # set -x
          # get a list of directories with changes and add to tfdirs.txt
          sort <(git diff --name-only --diff-filter=ACMRT HEAD^ HEAD | grep '.tf$') | xargs dirname | uniq > tfdirs.txt

          # flag the insights environments to be validated by adding the validation directories to tf_environments array
          tf_environments=()

          # regex matchers
          projectsre='^insights/terraform/projects/(.*)+'
          modulesre='^insights/terraform/modules/(.*)/'
          prodlakere='^insights/terraform/prod-lake'
          groupsre='^insights/terraform/groups'

          # parses simple yaml files into variables. e.g., tools.yaml
          # terraform:
          #   version: 1.2
          # creates variable terraform_version=1.2
          # $! == path to yaml file
          function parse_yaml {
            # found this magic on stackoverlow
            local prefix=$2
            local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
            sed -ne "s|^\($s\):|\1|" \
                  -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
                  -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
            awk -F$fs '{
                indent = length($1)/2;
                vname[indent] = $2;
                for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                  vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                  printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
                }
            }'
          }

          # if there are any changes under modules, validate all the things
          projpath=insights/terraform/projects
          if grep -E "$modulesre" tfdirs.txt >/dev/null 2>&1; then
            tf_environments+=("insights/terraform/groups")
            tf_environments+=("insights/terraform/prod-lake")
            tf_environments+=("$projpath/ab2d" "$projpath/bb2" "$projpath/bcda" "$projpath/foodtruck" )
          fi

          # groups
          if grep -E "$groupsre" tfdirs.txt >/dev/null 2>&1; then
            tf_environments+=("insights/terraform/groups")
          fi

          # prod-lake
          if grep -E "$prodlakere" tfdirs.txt >/dev/null 2>&1; then
            tf_environments+=("insights/terraform/prod-lake")
          fi

          # individual projects
          if projdirs=$(grep -E "$projectsre" tfdirs.txt | cut -d/ -f 1-6 | uniq | xargs); then
            for proj in "${projdirs[@]}"; do
              tf_environments+=("$proj")
            done
          fi

          # remove duplicate environments
          environments=($(for e in "${tf_environments[@]}"; do echo "$e"; done | sort | uniq | xargs))

          # try getting terraform_version from insights/tools.yaml, else use default version
          terraform_version=
          eval $(parse_yaml insights/tools.yaml) || :
          if ! [[ "$terraform_version" =~ [0-9]?[0-9]+\.[0-9]?[0-9]+\.[0-9]?[0-9x]+ ]]; then
            terraform_version="$DEFAULT_VERSION"
          fi

          # determine which tf version to use for each environment (tries finding tools.yaml)
          tfversions=()
          for d in "${environments[@]}"; do
            tfver="$terraform_version"
            eval $(parse_yaml "$d/tools.yaml") || :
            if ! [[ "$terraform_version" =~ [0-9]?[0-9]+\.[0-9]?[0-9]+\.[0-9]?[0-9x]+ ]]; then
              # invalid version.. ignore it and use the default
              terraform_version="$tfver"
            fi
            tfversions+=("$terraform_version")
            # reset
            terraform_version="$tfver"
          done

          # flatten
          versions=($(for v in "${tfversions[@]}"; do echo "$v"; done | xargs))

          # prepare json output (github is very, very finicky on the formatting of json)
          # note: escape all quotes, collapse to one line, no trailing commas
          json="{\"include\":["
          json_lines=
          for((i=0;i<${#environments[*]};i++)); do
            json_lines+="{\"dir\": \"${environments[$i]}\",\"tfver\": \"${versions[$i]}\"},"
          done
          # remove trailing ,
          json_lines="${json_lines%?}"

          # combine and output the results
          json="$json$json_lines]}"
          if [[ -n "${tf_environments[*]}" ]]; then
            echo "::set-output name=run::true"
            echo "::set-output name=matrix::$(echo "$json")"
          fi

  validate:
    name:  validate terraform
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.run }}
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.tfver }}
      - name: terraform init
        id: init
        run: terraform init -backend=false
      - name: terraform validate
        id: validate
        run: terraform validate -no-color

---
name: 'CI - Release'
on:
  push:
    #FIXME: remove push events
    branches:
     - brianburton/paca-2818-maven-release-plugin
  workflow_dispatch:
    inputs:
      releaseBranch:
        description: 'The branch on which a release is based.'
        required: false
        default: master
      releaseVersion:
        description: 'Version to be used as tag and release'
        required: true
      developmentVersion:
        description: 'next release or current development version'
        required: true

permissions:
  id-token: write # This is required for requesting the AWS IAM OIDC JWT
  contents: read  # This is required for actions/checkout

env:
  # AWS Code Artifact Repository
  CA_REPOSITORY: bfd-release-hackathon #FIXME
  CA_DOMAIN: bfd-mgmt


jobs:
  mvn-release:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.GHA_AWS_IAM_ROLE_ARN }}
          role-session-name: ci-release
          aws-region: us-east-1
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Dispatched Checkout
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.releaseBranch }}
      - name: Pushed Checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: corretto
      - name: Configure the git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
      - name: Generate maven toolchain config
        run: |
          cat << EOF > ~/.m2/toolchains.xml
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>17</version>
                <vendor>OpenJDK</vendor>
              </provides>
              <configuration>
                <jdkHome>$JAVA_HOME</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF
      - name: Set Authorization Token
        #FIXME: Use non-hackathon domain/repository
        run: >-
          echo CODEARTIFACT_AUTH_TOKEN="$(aws codeartifact get-authorization-token
          --domain "$CA_DOMAIN" --domain-owner ${{ secrets.AWS_ACCOUNT_ID }}
          --query authorizationToken
          --output text
          --region us-east-1)" >> $GITHUB_ENV

      - name: Get Repository Endpoint
        run: >-
          echo CA_REPOSITORY_ENDPOINT="$(aws codeartifact get-repository-endpoint
          --domain "$CA_DOMAIN" --repository "$CA_REPOSITORY" --format maven
          --query repositoryEndpoint --output text)" >> $GITHUB_ENV
      - name: Configure additional maven settings.xml
        run: |-
          cat <<"EOF" > ~/.m2/settings.xml
          <settings xmlns="http://maven.apache.org/settings/1.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"
          xsi:schemalocation="http://maven.apache.org/settings/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <username>aws</username>
                <password>${env.CODEARTIFACT_AUTH_TOKEN}</password>
                <id>${env.CA_DOMAIN}-${env.CA_REPOSITORY}</id>
              </server>
            </servers>
          </settings>
          EOF
      #FIXME: Remove this PUSHED release
      - name: 'Prepare and Perform PUSHED Release'
        if: github.event_name == 'push'
        run: |-
          mvn --batch-mode --activate-profiles test-release release:prepare release:perform
        working-directory: ./apps
      - name: 'Prepare and Perform DISPATCHED Release'
        if: github.event_name == 'workflow_dispatch'
        run: |-
          mvn --batch-mode --activate-profiles test-release \
              -Dtag="$BFD_RELEASE" \
              -DreleaseVersion="$BFD_RELEASE" \
              -DdevelopmentVersion="$BFD_DEV_VERSION" \
              release:prepare release:perform
        working-directory: ./apps
        env:
          BFD_RELEASE: ${{ inputs.releaseVersion }}
          BFD_DEV_VERSION: ${{ inputs.developmentVersion }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Perform Exceptional Rollback'
        if: failure()
        run: mvn release:rollback
        working-directory: ./apps

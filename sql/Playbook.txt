*****************************************************************
** Create the BENEFICIARY_MONTHLY_AUDIT table                  **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/bene_monthly_audit.sql

Notes:
------
Verify the table was created successfully.


*****************************************************************
** TRIGGER FUNCTION: track_bene_monthly_change                 **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/track_bene_monthly_change_func.sql 
 
Notes:
------
Verify the function was created successfully.


*****************************************************************
** BENEFICIARY_MONTHLY Update Trigger                          **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/ccw_load_update_trigger.sql 
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/ccw_load_delete_trigger.sql 
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/ccw_load_insert_trigger.sql 

Notes:
------
Per the PR review process, it was suggested that we also have an
INSERT and a DELETE trigger available.

Verify the triggers were created successfully.

select
	trigger_name,
	string_agg(event_manipulation, ',') as event,
	action_timing as activation
from information_schema.triggers
group by 1, 3;

If triggers were successfully created, we should see something like the following:

"BeneficiaryMonthly"    "audit_ccw_delete"  "DELETE"
"BeneficiaryMonthly"    "audit_ccw_insert"  "INSERT"
"BeneficiaryMonthly"    "audit_ccw_update"  "UPDATE"


*****************************************************************
** Create the CCW_LOAD_TEMP table                              **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/ccw_load_temp.sql 

Notes:
------
Verify the table was created successfully.


*****************************************************************
** Create UPDATE_BENE_MONTHLY stored procedure                 **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/update_bene_monthly_proc.sql 

*****************************************************************
** Create LOAD_FROM_CCW stored procedure                       **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/process_ccw_table.sql 

Notes:
------
Verify all procedures were created successfully.

select
    p.proname as specific_name,
    case
        when
            l.lanname = 'internal' 
        then
            p.prosrc 
        else
            pg_get_functiondef(p.oid) 
    end
    as definition 
from
    pg_proc p 
    left join pg_namespace n on p.pronamespace = n.oid 
    left join pg_language l on p.prolang = l.oid 
    left join pg_type t on t.oid = p.prorettype 
where
    n.nspname not in ('pg_catalog', 'information_schema')
    and p.prokind = 'p' 
order by
    specific_name;


If procedures were successfully created, we should see something like the following:

load_from_ccw
update_bene_monthly


*****************************************************************
** COPY CCW load file into db table CCW_LOAD_TEMP              **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/ccw_load_temp_via_copy_nohdr.sql

Notes:

The SQL script performs a 'Postgres copy' (i.e., data import) from a
CSV file into the CCW_LOAD_TEMP table which will be subsequently used
to fixup data discrepancies that we may have in the BeneficiaryMonthly
table. The script itself contains a hardcoded test CSV filename; that filename
will need to be changed to reflect that actual CCW CSV file that will be
imported; here is the line that will need to be modified:

FROM '/Users/colinchristophermackenzie/dev/bfd766/sql/test_export.sql.csv'

CCW has provided the data into two S3 buckets:

s3://bfd-prod-etl-577373831711/Incoming/BB_MBSF_2019.csv
s3://bfd-prod-etl-577373831711/Incoming/BB_MBSF_2020.csv

The files do not include a CSV header and all non-numeric values
are wrapped in double quotes. Therefore the CCW_LOAD_TEMP will
be loaded using:

sql/ccw_load_temp_via_copy_nohdr.sql

Prior to invoking the 'copy' command, a determination of the number
of records in the input data should be made; the easiest would be
to cat the file into a line counter. For example:

cat <filename.csv> | wc -l

Take note of the record count to be used in verifying that all records
were successfully imported into the CCW_LOAD_TEMP file.

This step will need to be performed for each of the CCW files; so if
two files are provided, then this step will need to be run twice.


*****************************************************************
** Run the CCW SQL load processor                              **         
*****************************************************************
psql -h 127.0.0.1 -U bfd -d fihr -a -f sql/run_ccw_load.sql &> "$(date +%Y-%m-%d_%H-%M.txt)"

Notes:

The procedure will create a log file (i.e., 2021-05-04.txt) that shows job progress as well
as a summation of the run. For example:

psql:sql/run_ccw_load.sql:1: INFO:  Starting processing of table: CCW_LOAD_TEMP...
psql:sql/run_ccw_load.sql:1: INFO:  Expected record count in table: CCW_LOAD_TEMP: 122134
psql:sql/run_ccw_load.sql:1: INFO:  Record Total: 122134 ...DONE!!!

If the processed record count does not match the expected record count, then 
remediation analysis will need to be performed to determine any record discrepancies.


*****************************************************************
** Follow-up QA                                                **         
*****************************************************************

The final step is to assess the efficacy of the entire process; in particular
a thorough analysis of the BENEFICIARY_MONTHLY_AUDIT table. That table will have
captured any record-level (i.e., per month) updates of the BeneficiaryMonthly table.

This will be the most important assessment of whether we may have served up invalid
data to peering partners.

Each row in the BENEFICIARY_MONTHLY_AUDIT will capture that there was a change to the
BFD BeneficiaryMonthly table; an assessment can then be made to determine if subsequent
action(s) need to be taken.





<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<prerequisites>
		<maven>3.3</maven>
	</prerequisites>

	<parent>
		<groupId>gov.hhs.cms.bluebutton.datapipeline</groupId>
		<artifactId>bluebutton-data-pipeline</artifactId>
		<version>0.1.0-SNAPSHOT</version>
	</parent>

	<artifactId>bluebutton-data-pipeline-app</artifactId>
	<packaging>jar</packaging>

	<description>
		An application that pulls CCW RIF data via S3, transforms it, and pushes it to a FHIR server.
	</description>

	<dependencies>
		<dependency>
			<groupId>gov.hhs.cms.bluebutton.datapipeline</groupId>
			<artifactId>bluebutton-data-pipeline-fhir-load</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>gov.hhs.cms.bluebutton.datapipeline</groupId>
			<artifactId>bluebutton-data-pipeline-rif-extract</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<!-- Provides various utilities, particularly for managing DB connections. -->
			<groupId>com.justdavis.karl.jessentials</groupId>
			<artifactId>jessentials-misc</artifactId>
		</dependency>

		<dependency>
			<!-- Provides a sane facade for the giant mess of incompatible logging 
				frameworks in Java. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J during runtime: 
				all logging events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<dependency>
			<!-- Used to monitor the JVM's memory usage, garbage collection, etc. 
				at runtime. -->
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-jvm</artifactId>
		</dependency>

		<dependency>
			<!-- Used to run our unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used in tests to help with managing asynchronous behavior. Reference: 
				https://github.com/awaitility/awaitility -->
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>2.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>gov.hhs.cms.bluebutton.datapipeline</groupId>
			<artifactId>bluebutton-data-pipeline-sampledata</artifactId>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Used to build executable JARs, with all dependencies included in 
						them. -->
					<groupId>com.github.chrischristo</groupId>
					<artifactId>capsule-maven-plugin</artifactId>
					<configuration>
						<appClass>gov.hhs.cms.bluebutton.datapipeline.app.S3ToFhirLoadApp</appClass>
						<chmod>true</chmod>
						<types>fat</types>
						<manifest>
							<entry>
								<key>JVM-Args</key>
								<value>-Xmx1g</value>
							</entry>
							<entry>
								<key>Min-Java-Version</key>
								<value>1.8.0</value>
							</entry>
						</manifest>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.12</version>
					<configuration>
						<artifacts>
							<artifact>
								<file>${project.build.directory}/${project.artifactId}-${project.version}-capsule-fat.x</file>
								<type>x</type>
								<classifier>capsule-fat</classifier>
							</artifact>
						</artifacts>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<!-- Used to build executable JARs, with all dependencies included in 
					them. -->
				<groupId>com.github.chrischristo</groupId>
				<artifactId>capsule-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-capsule-x</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Use the dependency plugin to copy the Blue Button FHIR Server, for 
					use in ITs. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>server-copy-artifacts</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Marks the `bluebutton-server-app-server-*.sh` scripts as executable. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>server-fix-artifacts-permissions</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<chmod perm="a+x">
									<fileset dir="${project.build.directory}/bluebutton-server">
										<include name="*.sh" />
									</fileset>
								</chmod>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Launch a Java web server hosting the Blue Button FHIR server prior 
					to running this project's integration tests, and stop it after the integration 
					tests. The server will serve HTTPS on port 9094 (as configured in the script), 
					and the FHIR server will be hosted at the root ("/") context. Alternatively, 
					for manual testing, manually run 'mvn dependency:copy antrun:run org.codehaus.mojo:exec-maven-plugin:exec@server-start' 
					to start the server. -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>server-start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${project.build.directory}/bluebutton-server/bluebutton-server-app-server-start.sh</executable>
							<arguments>
								<argument>--javahome</argument>
								<argument>${java.home}</argument>
								<argument>--maxheaparg</argument>
								<argument>${its.bbfhir.server.jvmargs}</argument>
								<argument>--directory</argument>
								<argument>${project.build.directory}/bluebutton-server</argument>
								<argument>--keystore</argument>
								<argument>${project.build.directory}/../../dev/ssl-stores/server.keystore</argument>
								<argument>--truststore</argument>
								<argument>${project.build.directory}/../../dev/ssl-stores/server.truststore</argument>
								<argument>--dburl</argument>
								<argument>${its.bbfhir.db.url}</argument>
								<argument>--dbusername</argument>
								<argument>${its.bbfhir.db.username}</argument>
								<argument>--dbpassword</argument>
								<argument>${its.bbfhir.db.password}</argument>
							</arguments>

							<!-- Don't start/stop the server if the ITs are being skipped. -->
							<skip>${skipITs}</skip>
						</configuration>
					</execution>
					<execution>
						<id>server-stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${project.build.directory}/bluebutton-server/bluebutton-server-app-server-stop.sh</executable>
							<arguments>
								<argument>--directory</argument>
								<argument>${project.build.directory}/bluebutton-server</argument>
							</arguments>

							<!-- Don't start/stop the server if the ITs are being skipped. -->
							<skip>${skipITs}</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Will run the `*IT.java` integration tests in this project, as part 
					of the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>

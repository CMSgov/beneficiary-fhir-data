resource "aws_cloudfront_distribution" "static_site_distribution" {
  origin {
    connection_attempts      = 3
    connection_timeout       = 10
    domain_name              = aws_s3_bucket.static_site.bucket_regional_domain_name
    origin_access_control_id = aws_cloudfront_origin_access_control.this.id
    origin_id                = "S3-${aws_s3_bucket.static_site.bucket}"
  }

  enabled             = true
  is_ipv6_enabled     = true
  comment             = "CloudFront distribution for static site ${local.env}"
  default_root_object = "index.html"

  custom_error_response {
    error_code         = 404
    response_code      = 200
    response_page_path = "/404.html"
  }

  # In another context redirecting a 403 Forbidden to a 404 Not Found error page would be bad form,
  # but the only time a user would realistically receive a 403 is when they navigate to a bad URL
  # (i.e. https://<URL>/does_not_exist.html). This results in CloudFront returning an XML document
  # with an "AccessDenied" error, which honestly is poor UX and may result in confusion.
  # Semantically, a 404 Not Found is probably more correct in this situation, and the custom 404
  # page allows the user to navigate back to the home page. So, we map 403 Forbiddens to the
  # "404.html" page generated by the Jekyll static site
  custom_error_response {
    error_code         = 403
    response_code      = 200
    response_page_path = "/404.html"
  }

  logging_config {
    include_cookies = false
    bucket          = aws_s3_bucket.cloudfront_logging.bucket_domain_name
    prefix          = "${local.env}-static-logs/"
  }

  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = "S3-${aws_s3_bucket.static_site.bucket}"
    viewer_protocol_policy = "redirect-to-https"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    min_ttl     = 0
    default_ttl = 0
    max_ttl     = 0
  }

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["US"]
    }
  }

  viewer_certificate {
    # cloudfront_default_certificate = true
    acm_certificate_arn      = aws_acm_certificate.env_issued.arn
    minimum_protocol_version = "TLSv1.2_2021"
    ssl_support_method       = "sni-only"
  }

  tags = {
    Name  = "StaticSite-CloudFront-${local.env}"
    Layer = local.layer
    role  = "static_site"
  }
}

resource "aws_cloudfront_origin_access_control" "this" {
  name                              = "${aws_s3_bucket.static_site.bucket}-oac"
  description                       = "OAC allowing SSE-KMS support"
  origin_access_control_origin_type = "s3"
  signing_behavior                  = "always"
  signing_protocol                  = "sigv4"
}

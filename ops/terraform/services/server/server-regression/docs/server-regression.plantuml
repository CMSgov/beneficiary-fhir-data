@startuml server-regression
title server-regression Lambda Deployment and Execution Sequence
actor operator
database "github"
participant "bfd-server-regression-build"
participant "deployment pipeline"
database "AWS ECR"
database "parameter store"
participant "server-regression lambda"
participant "trigger queue"
participant "signal queue"
database "AWS Athena"
database "insights S3"
participant "glue-trigger lambda"
participant "Glue Crawler"
database "Glue Metadata Table"
group Image Deployment
    operator -> github: Submit change set
    github --> operator
    operator -> "bfd-server-regression-build": Trigger Image Build
    "bfd-server-regression-build" -> github: Request change set
    github --> "bfd-server-regression-build": Return change set
    "bfd-server-regression-build" -> "bfd-server-regression-build": build-push.sh:\nbuild lambda Docker image
    "bfd-server-regression-build" -> "AWS ECR": build-push.sh:\npush Docker image to bfd-mgmt-server-regression
    "AWS ECR" --> "bfd-server-regression-build"
    "bfd-server-regression-build" -> "parameter store": build-push.sh:\nwrite image tag SSM parameter
    "parameter store" --> "bfd-server-regression-build"
    "bfd-server-regression-build" --> operator
end
group Glue Crawler
    "insights S3" -> "glue-trigger lambda":s3-event-notification:\ntrigger lambda
    "glue-trigger lambda" --> "insights S3"
    "glue-trigger lambda" -> "Glue Crawler":glue-trigger:\ntrigger Glue Crawler
    "Glue Crawler" --> "glue-trigger lambda"
    "Glue Crawler" -> "insights S3":glue-crawler:\ncrawl new parititions
    "insights S3" --> "Glue Crawler"
    "Glue Crawler" -> "Glue Metadata Table":glue-crawler:\nadd new tables
    "Glue Metadata Table" --> "insights S3"
end
group BFD Deployment Excerpt
    operator -> github: Submit change set
    github --> operator
    operator -> "deployment pipeline": Trigger Deployment
    "deployment pipeline" -> github: Request change set
    github --> "deployment pipeline": Return change set
        loop ENV for ENV in ("TEST", "PROD-SBX", "PROD")
            "deployment pipeline" -> "deployment pipeline": terraform:\nplan and apply
            "deployment pipeline" -> "parameter store": terraform:\nRequest latest Docker image tag
            "parameter store" --> "deployment pipeline": Return latest Docker image tage
            "deployment pipeline" -> "server-regression lambda": terraform:\ndeploy server-regression Lambda to ENV using tag
            "server-regression lambda" -> "AWS ECR": Retrieve tagged server-regression Docker Image
            "AWS ECR" --> "server-regression lambda"
            "server-regression lambda" -> "server-regression lambda": Create server-regression from\nbfd-mgmt-server-regression image
            "server-regression lambda" --> "deployment pipeline"
            "deployment pipeline" -> "trigger queue": jenkinsfile:\nwrite server-regression ENV invocation event to SQS
            "trigger queue" --> "deployment pipeline"
            "server-regression lambda" -> "trigger queue":server-regression:\npolls messages
            "trigger queue" --> "server-regression lambda":Returns messages
            "server-regression lambda" -> "server-regression lambda":server-regression:\nconsumes event and runs on ENV
            "server-regression lambda" -> "AWS Athena":server-regression:\nqueries previous run's stats
            "AWS Athena" -> "Glue Metadata Table":Checks for partitions/tables representing insights S3 bucket
            "Glue Metadata Table" --> "AWS Athena"
            "AWS Athena" -> "insights S3":Reads stats JSON\nfor query
            "insights S3" --> "AWS Athena"
            "AWS Athena" --> "server-regression lambda":Returns previous run's stats
            "server-regression lambda" -> "server-regression lambda":server-regression:\ncompares statistics
            "server-regression lambda" -> "insights S3":server-regression:\nstores current run stats
            "insights S3" --> "server-regression lambda"
            "server-regression lambda" -> "signal queue":server-regression:\nsends pipeline signal to queue indicating result
            "signal queue" --> "server-regression lambda"
            "deployment pipeline" -> "signal queue":Polls for signals from server-regression
            "signal queue" --> "deployment pipeline":Returns signals
            "deployment pipeline" -> "deployment pipeline": Inspects signal for result\nand sets build status
        end
    "deployment pipeline" --> operator
end
@enduml

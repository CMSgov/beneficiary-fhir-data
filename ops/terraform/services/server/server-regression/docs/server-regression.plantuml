@startuml server-regression
title server-regression Lambda Deployment and Run Sequence
participant operator
database "github"
participant "bfd-server-regression-build"
participant "deployment pipeline"
database "AWS ECR"
participant "parameter store"
participant "AWS Lambda"
participant "sqs queue"
note over "bfd-server-regression-build","deployment pipeline": distinct Jenkins pipeline jobs ran asynchronously
operator -> github: Submit change set
github --> operator
operator -> "deployment pipeline": Trigger Deployment
operator -> "bfd-server-regression-build": Trigger Image Build
"bfd-server-regression-build" -> github: Request change set
github --> "bfd-server-regression-build": Return change set
"bfd-server-regression-build" -> "bfd-server-regression-build": build-push.sh:\nbuild lambda Docker image
"bfd-server-regression-build" -> "AWS ECR": build-push.sh:\npush Docker image to bfd-mgmt-server-regression
"AWS ECR" --> "bfd-server-regression-build"
"bfd-server-regression-build" -> "parameter store": build-push.sh:\nwrite image tag SSM parameter
"parameter store" --> "bfd-server-regression-build" 
"bfd-server-regression-build" --> operator
"deployment pipeline" -> github: Request change set
github --> "deployment pipeline": Return change set
"deployment pipeline" -> "deployment pipeline": terraform:\nread yaml files
"deployment pipeline" -> "parameter store": terraform:\nRequest latest Docker image tag
"parameter store" --> "deployment pipeline": Return latest Docker image tage
"deployment pipeline" -> "AWS Lambda": terraform:\ndeploy server-regression Lambda to TEST using tag
"AWS Lambda" -> "AWS ECR": Retrieve tagged server-regression Docker Image
"AWS ECR" --> "AWS Lambda"
"AWS Lambda" -> "AWS Lambda": Create server-regression from\nbfd-mgmt-server-regression image
"AWS Lambda" --> "deployment pipeline"
"deployment pipeline" -> "sqs queue": jenkinsfile:\nwrite server-regression TEST invocation event to SQS
"sqs queue" --> "deployment pipeline"
"AWS Lambda" -> "sqs queue":server-regression:\npolls messages
"sqs queue" --> "AWS Lambda":Returns messages
"AWS Lambda" -> "AWS Lambda":server-regression:\nconsumes event and runs on TEST
"deployment pipeline" -> "AWS Lambda": terraform:\ndeploy server-regression Lambda to PROD-SBX
note over "deployment pipeline", "AWS Lambda": assume deployment process is the same as in TEST above
"AWS Lambda" --> "deployment pipeline"
"deployment pipeline" -> "sqs queue": jenkinsfile:\nwrite server-regression PROD-SBX invocation event to SQS
"sqs queue" --> "deployment pipeline"
note over "deployment pipeline", "sqs queue": assume server-regression run process is the same as in TEST above
"deployment pipeline" -> "AWS Lambda": terraform:\ndeploy server-regression Lambda to PROD
note over "deployment pipeline", "AWS Lambda": assume deployment process is the same as in TEST above
"AWS Lambda" --> "deployment pipeline"
"deployment pipeline" --> operator
@enduml
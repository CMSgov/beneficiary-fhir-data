#!/bin/bash
set -e

# add a timestamp to this scripts log output and redirect to both console and logfile
exec > >(
    while read line; do
        echo "$(date +"%Y-%m-%d %H:%M:%S") - $${line}" | tee -a /var/log/user_data.log 2>&1
    done
)

#bash /usr/local/bin/permit-user-access "${seed_env}"

# Reconfigure and relaunch CloudWatch unified agent
cat <<EOF > /tmp/cwagent-server-load.json
{
  "metrics": {
    "namespace": "bfd-${env}/bfd-server-load/CWAgent",
    "metrics_collected": {
      "collectd": {}
    }
  },
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/var/log/messages",
            "log_group_name": "/bfd/${env}/var/log/messages",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%b %d %H:%M:%S"
          },
          {
            "file_path": "/var/log/secure",
            "log_group_name": "/bfd/${env}/var/log/secure",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%b %d %H:%M:%S"
          },
          {
            "file_path": "${server_load_dir}/server-load-controller.log",
            "log_group_name": "/bfd/${env}/bfd-server-load/server-load-controller.log",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_exceptions.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_exceptions.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_failures.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_failures.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_stats.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_stats.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_stats_history.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_stats_history.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          }
        ]
      }
    }
  }
}
EOF

#/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -c file:/tmp/cwagent-server-load.json -s

# Set login environment for all users:
# 1. make BFD_ENV_NAME available to all logins
# 2. change prompt color based on environment (red for prod and yellow for prod-sbx)
cat <<EOF > /etc/profile.d/set-bfd-login-env.sh
# make BFD_ENV_NAME available to all logins
export BFD_ENV_NAME="${env}"

# set prompt color based on environment (only if we are in an interactive shell)
if [[ \$- == *i* ]]; then
    case "\$BFD_ENV_NAME" in
        "prod") export PS1="[\[\033[1;31m\]\u@\h\[\033[00m\]:\[\033[1;31m\]\w\[\033[00m\]] " ;;
        "prod-sbx") export PS1="[\[\033[0;33m\]\u@\h\[\033[00m\]:\[\033[0;33m\]\w\[\033[00m\]] " ;;
    esac
fi
EOF

cat <<EOF > /tmp/env-vars.txt
BFD_ENVIRONMENT=${env}
SQS_QUEUE_NAME=${sqs_queue_name}
NODE_LAMBDA_NAME=${node_lambda_name}
ASG_NAME=${asg_name}
TEST_HOST=${test_host}
AWS_CURRENT_REGION=${aws_current_region}
INITIAL_WORKER_NODES=${initial_worker_nodes}
NODE_SPAWN_TIME=${node_spawn_time}
MAX_SPAWNED_NODES=${max_spawned_nodes}
MAX_SPAWNED_USERS=${max_spawned_users}
USER_SPAWN_RATE=${user_spawn_rate}
TEST_RUNTIME_LIMIT=${test_runtime_limit}
COASTING_TIME=${coasting_time}
WARM_INSTANCE_TARGET=${warm_instance_target}
STOP_ON_SCALING=${stop_on_scaling}
STOP_ON_NODE_LIMIT=${stop_on_node_limit}
LOCUST_TAGS=${locust_tags}
LOCUST_EXCLUDE_TAGS=${locust_exclude_tags}
EOF

yum -y update --security
service docker start
aws ecr get-login-password --region "${aws_current_region}" | docker login --username AWS --password-stdin "${ecr_registry_url}"
docker pull "${ecr_tagged_controller_uri}"
mkdir /opt/server-load
docker logs --follow $(docker run --detach --env-file "/tmp/env-vars.txt" "${ecr_tagged_controller_uri}") >& /opt/server-load/server-load-controller.log &

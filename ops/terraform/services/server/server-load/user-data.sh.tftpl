#!/bin/bash
set -e

# add a timestamp to this scripts log output and redirect to both console and logfile
exec > >(
    while read line; do
        echo "$(date +"%Y-%m-%d %H:%M:%S") - $${line}" | tee -a /var/log/user_data.log 2>&1
    done
)

yum update
yum install python3 pip3 -y
pip3 install --upgrade pip
pip3 install virtualenv
python3 -m venv "${server_load_dir}/venv"

# Source the pythonic virtual environment
source "${server_load_dir}/venv/bin/activate"

# Install requirements
git clone https://github.com/CMSgov/beneficiary-fhir-data.git /beneficiary-fhir-data
cp -R /beneficiary-fhir-data/apps/utils/locust_tests/. "${server_load_dir}"
pip install -r "${server_load_dir}/requirements.txt"

# BFD_ENVIRONMENT defaults to 'test' in the server-load application
export BFD_ENVIRONMENT="${env}"

# SQS_QUEUE_NAME defaults to 'bfd-test-server-load' in the server-load application
export SQS_QUEUE_NAME="${sqs_queue_name}"

# NODE_LAMBDA_NAME defaults to 'bfd-test-server-load-node' in the server-load application
export NODE_LAMBDA_NAME="${node_lambda_name}"

# ASG_NAME defaults to '' in the server-load application
export ASG_NAME="${asg_name}"

# TEST_HOST defaults to 'https://test.bfd.cms.gov' in the server-load application
export TEST_HOST="${test_host}"

# AWS_CURRENT_REGION defaults to 'us-east-1' in the server-load application
export AWS_CURRENT_REGION="${aws_current_region}"

# INITIAL_WORKER_NODES defaults to 0 in the server-load application
export INITIAL_WORKER_NODES="${initial_worker_nodes}"

# NODE_SPAWN_TIME defaults to 10 in the server-load application
export NODE_SPAWN_TIME="${node_spawn_time}"

# MAX_SPAWNED_NODES defaults to 0 in the server-load application
export MAX_SPAWNED_NODES="${max_spawned_nodes}"

# MAX_SPAWNED_USERS defaults to 0 in the server-load application
export MAX_SPAWNED_USERS="${max_spawned_users}"

# USER_SPAWN_RATE defaults to 1 in the server-load application
export USER_SPAWN_RATE="${user_spawn_rate}"

# TEST_RUNTIME_LIMIT defaults to 0 in the server-load application
export TEST_RUNTIME_LIMIT="${test_runtime_limit}"

# COASTING_TIME defaults to 0 in the server-load application
export COASTING_TIME="${coasting_time}"

# WARM_INSTANCE_TARGET defaults to 0 in the server-load application
export WARM_INSTANCE_TARGET="${warm_instance_target}"

# STOP_ON_SCALING defaults to true in the server-load application
export STOP_ON_SCALING="${stop_on_scaling}"

# STOP_ON_NODE_LIMIT defaults to true in the server-load application
export STOP_ON_NODE_LIMIT="${stop_on_node_limit}"

# LOCUST_TAGS defaults to '' in the server-load application
export LOCUST_TAGS="${locust_tags}"

# LOCUST_EXCLUDE_TAGS defaults to '' in the server-load application
export LOCUST_EXCLUDE_TAGS="${locust_exclude_tags}"

# Set login environment for all users:
# 1. make BFD_ENV_NAME available to all logins
# 2. change prompt color based on environment (red for prod and yellow for prod-sbx)
cat <<EOF > /etc/profile.d/set-bfd-login-env.sh
# make BFD_ENV_NAME available to all logins
export BFD_ENV_NAME="${env}"

# set prompt color based on environment (only if we are in an interactive shell)
if [[ \$- == *i* ]]; then
	case "\$BFD_ENV_NAME" in
		"prod") export PS1="[\[\033[1;31m\]\u@\h\[\033[00m\]:\[\033[1;31m\]\w\[\033[00m\]] " ;;
		"prod-sbx") export PS1="[\[\033[0;33m\]\u@\h\[\033[00m\]:\[\033[0;33m\]\w\[\033[00m\]] " ;;
	esac
fi
EOF
chmod 0644 /etc/profile.d/set-bfd-login-env.sh

bash /usr/local/bin/permit-user-access "${seed_env}"

# Reconfigure and relaunch CloudWatch unified agent
cat <<EOF > /tmp/cwagent-server-load.json
{
  "metrics": {
    "namespace": "bfd-${env}/bfd-server-load/CWAgent",
    "metrics_collected": {
      "collectd": {}
    }
  },
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/var/log/messages",
            "log_group_name": "/bfd/${env}/var/log/messages",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%b %d %H:%M:%S"
          },
          {
            "file_path": "/var/log/secure",
            "log_group_name": "/bfd/${env}/var/log/secure",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%b %d %H:%M:%S"
          },
          {
            "file_path": "${server_load_dir}/server-load-controller.log",
            "log_group_name": "/bfd/${env}/bfd-server-load/server-load-controller.log",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_exceptions.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_exceptions.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_failures.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_failures.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_stats.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_stats.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          },
          {
            "file_path": "${server_load_dir}/load_stats_history.csv",
            "log_group_name": "/bfd/${env}/bfd-server-load/load_stats_history.csv",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
          }
        ]
      }
    }
  }
}
EOF

# Set login environment for all users:
# 1. make BFD_ENV_NAME available to all logins
# 2. change prompt color based on environment (red for prod and yellow for prod-sbx)
cat <<EOF > /etc/profile.d/set-bfd-login-env.sh
# make BFD_ENV_NAME available to all logins
export BFD_ENV_NAME="${env}"

# set prompt color based on environment (only if we are in an interactive shell)
if [[ \$- == *i* ]]; then
    case "\$BFD_ENV_NAME" in
        "prod") export PS1="[\[\033[1;31m\]\u@\h\[\033[00m\]:\[\033[1;31m\]\w\[\033[00m\]] " ;;
        "prod-sbx") export PS1="[\[\033[0;33m\]\u@\h\[\033[00m\]:\[\033[0;33m\]\w\[\033[00m\]] " ;;
    esac
fi
EOF
#/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -c file:/tmp/cwagent-server-load.json -s

cd "${server_load_dir}/services/server-load/controller"
python3 controller.py &>>  "${server_load_dir}/server-load-controller.log"

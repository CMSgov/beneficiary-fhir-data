#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when building apps and app AMIs.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def verboseMaven = params.verbose_mvn_logging
def appBuildResults
def amiIds
def gitBranchName
def scriptForApps
def scriptForDeploys

// send notifications to slack, email, etc
def sendNotifications(String buildStatus = '', String stageName = '', String gitCommitId = '', String gitRepoUrl = '') {
    // buildStatus of NULL means success
    if (!buildStatus) {
        buildStatus = 'SUCCESS'
    }

    // build colors
    def colorMap = [:]
    colorMap['STARTED']  = '#0000FF'
    colorMap['SUCCESS']  = '#00FF00'
    colorMap['ABORTED']  = '#6A0DAD'
    colorMap['UNSTABLE'] = '#FFFF00'
    colorMap['FAILED']   = '#FF0000'
    def buildColor = colorMap[buildStatus]
    buildColor = buildColor ?: '#FF0000' // default to red

    def branchUrl = "https://github.com/CMSgov/beneficiary-fhir-data/tree/${env.BRANCH_NAME}"

    def msg = ''
    switch (buildStatus) {
        case 'UNSTABLE':
        case 'SUCCESS':
            msg = 'COMPLETED SUCCESSFULLY: BUILT APPS AND AMIS'
            break
        case 'FAILED':
        case 'FAILURE':
            msg = "FAILED ON ${stageName.toUpperCase()} STAGE ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}>"
            break
        case 'STARTED':
            msg = 'HAS STARTED'
            break
        case 'ABORTED':
            msg = 'WAS ABORTED'
            break
        default:
            msg = "${buildStatus.toUpperCase()}"
            break
    }

    // build slack message
    def slackMsg = ''
    if (buildStatus == 'UNSTABLE') {
        slackMsg = "UNSTABLE APP/AMI BUILD <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> ${msg} \n"
    } else {
        slackMsg = "APP/AMI BUILD <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> ${msg} \n"
    }
    slackMsg += "\tJob '${env.JOB_NAME}' \n"

    // send Slack messages
    slackSend(color: buildColor, message: slackMsg)
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk17-mvn3-tfenv3-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
    }

    parameters {
        booleanParam(name: 'verbose_mvn_logging',
            description: 'When true, `mvn` will produce verbose logs.',
            defaultValue: false)
        booleanParam(name: 'skip_docker_host_ami',
            description: 'When true, the docker-host AMI will not be built.',
            defaultValue: true)
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    // Address limitations resulting from CVE-2022-24767
                    sh 'git config --global --add safe.directory "$WORKSPACE"'

                    // Get the current commit id
                    gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                    // Get the remote repo url. This assumes we are using git+https not git+ssh.
                    gitRepoUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim().replaceAll(/\.git$/, '')

                    // Load the child Jenkinsfiles.
                    scriptForApps = load('apps/build.groovy')
                    scriptForDeploys = load('ops/deploy-ccs.groovy')

                    awsAuth.assumeRole()

                    // Find the most current AMI IDs (if any).
                    amiIds = scriptForDeploys.findAmis()
                }
            }
        }

        /* This stage switches the gitBranchName (needed for our CCS downsream stages)
            value if the build is a PR as the BRANCH_NAME var is populated with the build
            name during PR builds.
            */
        stage('Set Branch Name') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    if (env.BRANCH_NAME.startsWith('PR')) {
                        gitBranchName = env.CHANGE_BRANCH
                        } else {
                        gitBranchName = env.BRANCH_NAME
                    }
                }
            }
        }

        stage('Build Apps') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        awsAuth.assumeRole()
                        appBuildResults = scriptForApps.build(verboseMaven)
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw ex
                    }
                }
            }
        }

        stage('Build App AMIs') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        awsAuth.assumeRole()
                        amiIds = scriptForDeploys.buildAppAmis(gitBranchName, gitCommitId, amiIds, appBuildResults)
                        if (!params.skip_docker_host_ami) {
                            amiIds.bfdDockerHostAmiId = scriptForDeploys.buildDockerHostAmi(gitBranchName, gitCommitId,
                                amiIds.platinumAmiId)
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        throw ex
                    } finally {
                        //sendNotifications(currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                    }
                }
            }
        }
    }
}

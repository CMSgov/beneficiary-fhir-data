#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when building apps and app AMIs.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def verboseMaven = params.verbose_mvn_logging
def appBuildResults
def amiIds
def scriptForApps
def scriptForDeploys

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk17-mvn3-tfenv3-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
    }

    parameters {
        string(name: 'git_branch',
        defaultValue: '',
        description: 'To build, specify a branch within BFD.')

        booleanParam(name: 'verbose_mvn_logging',
        description: 'When true, `mvn` will produce verbose logs.',
        defaultValue: false)
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    echo 'this is the branch name'
                    echo params.git_branch

                    // Grab the commit that triggered the build.
                    checkout scm

                    // Address limitations resulting from CVE-2022-24767
                    sh 'git config --global --add safe.directory "$WORKSPACE"'

                    // Get the current commit id
                    gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                    // Load the child Jenkinsfiles.
                    scriptForApps = load('apps/build.groovy')
                    scriptForDeploys = load('ops/deploy-ccs.groovy')

                    awsAuth.assumeRole()

     // Find the most current AMI IDs (if any).
					amiIds = null
					amiIds = scriptForDeploys.findAmis()
                }
            }
        }

        stage('Build Apps') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    awsAuth.assumeRole()
                    appBuildResults = scriptForApps.build(verboseMaven)
                }
            }
        }

        stage('Build App AMIs') {
            steps {
                script {
                    currentStage = env.STAGE_NAME

                    awsAuth.assumeRole()
                    amiIds = scriptForDeploys.buildAppAmis(params.git_branch, gitCommitId, amiIds, appBuildResults)
                }
            }
        }
    }
}

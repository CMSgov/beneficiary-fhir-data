#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when building platinum AMI images.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def amiIds
def platinumAmiId
def bfdPipelineAmiId
def bfdServerAmiId
def bfdMigratorAmiId
def bfdServerLoadAmiId
def goldAmiId
def platinumSourceTagAmiId

pipeline {
  agent {
    kubernetes {
      defaultContainer 'bfd-cbc-build'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk11-mvn3-an29-tfenv-aeaa61fa6'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
    }
  }

    stages {
        stage('Prepare') {
            steps {
                script {
                
                   // Load the child Jenkinsfiles.
                   scriptForApps = load('apps/build.groovy')
				   scriptForDeploys = load('ops/deploy-ccs.groovy')

                   awsAuth.assumeRole()

                   // Find the most current AMI IDs (if any).
				   amiIds = null
				   amiIds = scriptForDeploys.findAmis()

                }
            }
        }

        stage('Find AMIs') {
            steps {
                script {
                    awsAuth.assumeRole()

                    def amiSourceTagKey = "amiSourceId"
                    def goldqueryValue = "amzn2legacy*"

                    // query for the latest platinum AMI ID
                    platinumAmiId = sh(
                    returnStdout: true,
                    script: "aws ec2 describe-images --owners self --filters \
                    'Name=name,Values=bfd-amzn2-jdk11-platinum-??????????????' \
                    'Name=state,Values=available' --region us-east-1 --output json | \
                    jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'"
                    ).trim()

                    // query for the latest gold AMI ID
                    goldAmiId = sh(
                    returnStdout: true,
                    script: "aws ec2 describe-images --filters \
                    'Name=name,Values=${goldqueryValue}' \
                    'Name=state,Values=available' --region us-east-1 --output json | \
                    jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'"
                    ).trim() 

                    // query for the current value of the sourceAmiId tag on the latest platinum image
                    platinumSourceTagAmiId = sh(
                    returnStdout: true,
                    script: "aws ec2 describe-images \
                    --filters 'Name=tag:${amiSourceTagKey},Values=${goldAmiId}' \
                    --query 'Images[*].[ImageId]' \
                     --output text"
                    ).trim()
                }
            }
        }

        stage('Build Platinum AMI') {
            steps {
                script {
                    awsAuth.assumeRole()
                     
                    if (platinumSourceTagAmiId == goldAmiId) {
                        // Use latest images if sourceAmiId tag is set to the latest gold AMI ID
                        amiIds = null
                        amyIds = scriptForDeploys.findAmis()
                    } else if (platinumSourceTagAmiId != goldAmiId || platinumSourceTagAmiId.length() == 0) {
                        // Build new platinum if the latest Platinum AMI does not have a sourceAmiId tag or the sourceAmiId tag does not match the Gold AMI ID
                        amiIds = scriptForDeploys.buildPlatinumAmi(amiIds)

                        // Retrieve latest platium and assign the sourceAmiId tag value with the latest gold AMI ID. 
                        platinumAmiId = sh(
                        returnStdout: true,
                        script: "aws ec2 describe-images --owners self --filters \
                        'Name=name,Values=bfd-amzn2-jdk11-platinum-??????????????' \
                        'Name=state,Values=available' --region us-east-1 --output json | \
                        jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'"
                        ).trim()

                        sh(
                        returnStdout: true,
                        script: "aws ec2 create-tags \
                        --resources ${platinumAmiId} --tags Key=amiSourceId,Value=${goldAmiId}"
                        )
                    }
                }
            }
        }
    }
}

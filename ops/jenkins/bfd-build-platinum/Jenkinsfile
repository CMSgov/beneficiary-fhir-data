#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when building platinum AMI images.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def goldAmiId
def platinumAmiId
def currentStage

def buildPlatinum(String goldId = '') {
    // Retrieve latest platium and assign the sourceAmiId tag value with the latest gold AMI ID.
    withCredentials([file(credentialsId: 'bfd-vault-password', variable: 'vaultPasswordFile')]) {
        // packer is always run from $repoRoot/ops/ansible/playbooks-ccs
        dir('ops/ansible/playbooks-ccs') {
            echo "Using the following gold image: ${goldId}"

            sh """
            packer build -color=false -var vault_password_file="$vaultPasswordFile" \
            -var source_ami=${goldId} \
            -var subnet_id=subnet-092c2a68bd18b34d1 \
            ../../packer/build_bfd-platinum.json
            """
        }
    }
}

// send notifications to slack
def sendNotifications(String buildStatus = '', String stageName = '') {
    // build colors
    def colorMap = [:]
    colorMap['SUCCESS']  = '#00FF00'
    colorMap['SUCCESS LATEST IMAGE']  = '#00FF00'
    colorMap['SUCCESS NEW PLATINUM']  = '#00FF00'
    colorMap['ABORTED']  = '#6A0DAD'
    colorMap['UNSTABLE'] = '#FFFF00'
    colorMap['FAILED']   = '#FF0000'
    def buildColor = colorMap[buildStatus]
    buildColor = buildColor ?: '#FF0000' // default to red

    // prettyfi messages
    def msg = ''
    switch (buildStatus) {
        case 'UNSTABLE':
        case 'SUCCESS LATEST IMAGE':
            msg = 'COMPLETED SUCCESSFULLY: NO NEW IMAGE BUILD REQUIRED...USING THE LATEST PLATINUM IMAGE.'
            break
        case 'SUCCESS NEW PLATINUM':
            msg = 'COMPLETED SUCCESSFULLY: BUILT A NEW PLATINUM IMAGE'
            break
        case 'FAILED':
        case 'FAILURE':
            msg = "FAILED ON ${stageName.toUpperCase()} STAGE"
            break
        default:
            msg = "${buildStatus.toUpperCase()}"
            break
    }

    // build slack message
    def slackMsg = ''
    if (buildStatus == 'UNSTABLE') {
        slackMsg = "UNSTABLE BUILD <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ${msg} \n"
    } else {
        slackMsg = "BUILD <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ${msg} \n"
    }
    slackMsg += "\tJob '${env.JOB_NAME}' \n"

    // send Slack messages
    slackSend(color: buildColor, message: slackMsg)
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk21-mvn3-tfenv3-kt1.9-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
    }

    parameters {
        string(name: 'GOLD_AMI_ID',
        defaultValue: '',
        description: 'In case the latest Gold image is subpar, force a platinum build with a different gold AMI.')

        booleanParam(name: 'FORCE_PLATINUM',
        defaultValue: false,
        description: 'Forces a new platinum build with the latest Gold AMI ID source tagged.')
    }

    // Run Every day at 7:30 AM Eastern / 11:30 AM UTC
    triggers {
        cron('30 11 * * *')
    }

    stages {
        stage('Find AMIs') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        awsAuth.assumeRole()

                        // Use a custom gold AMI ID or Query for the latest gold AMI ID
                        goldAmiId = params.GOLD_AMI_ID.length() > 0 ? params.GOLD_AMI_ID : sh(returnStdout: true, 
                        script: "aws ec2 describe-images --filters \
                        'Name=name,Values=amzn2legacy*' \
                        'Name=state,Values=available' --region us-east-1 --output json | \
                        jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'").trim()

                        // Query the latest platinum AMI Id where the sourceAmiId tag is set to the Gold AMI ID
                        platinumAmiId = sh(
                            returnStdout: true,
                            script: "aws ec2 describe-images \
                            --filters 'Name=tag:amiSourceId,Values=${goldAmiId}' \
                            'Name=name,Values=bfd-amzn2-jdk21-platinum-??????????????' \
                            'Name=state,Values=available' --region us-east-1 \
                            --query 'Images[*].[ImageId]' \
                            --output text"
                            ).trim()
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(currentBuild.currentResult, currentStage)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(currentBuild.currentResult, currentStage)
                        throw ex
                    }
                }
            }
        }

        stage('Build Platinum AMI') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        awsAuth.assumeRole()
                        if (params.FORCE_PLATINUM) {
                            echo 'Force deploying and tagging new platinum AMI'
                            buildPlatinum(goldAmiId)

                            // Set current stage that the build succeeded
                            sendNotifications('SUCCESS NEW PLATINUM', currentStage)
                        } else {
                            if (platinumAmiId.length() == 0) {
                                // Build base platinum if latest Platinum AMI has no sourceAmiId tag/sourceAmiId != gold AMI ID
                                echo 'Deploying and tagging new platinum AMI'
                                buildPlatinum(goldAmiId)

                                // Set current stage that the build succeeded
                                sendNotifications('SUCCESS NEW PLATINUM', currentStage)
                            } else if (platinumAmiId.length() != 0) {
                                // Use latest images if sourceAmiId tag is set to the latest gold AMI ID
                                echo "Using latest platinum AMI image: ${platinumAmiId}"

                                // Set current stage that the build succeeded
                                sendNotifications('SUCCESS LATEST IMAGE', currentStage)
                            }
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(currentBuild.currentResult, currentStage)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(currentBuild.currentResult, currentStage)
                        throw ex
                    }
                }
            }
        }
    }
}

#!/usr/bin/env groovy

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  volumes:
  - name: docker-socket
    emptyDir: {}
  containers:
  - name: docker
    image: docker:20.10-git
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run
    tty: true
  - name: docker-daemon
    image: docker:20.10-dind
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run
"""
        }
    }
    stages {
        stage('Docker Build') {
            steps {
                script {
                    container('docker') {
                        // checkout scm
                        // Install prerequisites
                        sh 'apk add --no-cache aws-cli bash'

                        // Address limitations resulting from CVE-2022-24767
                        sh 'git config --global --add safe.directory "$WORKSPACE"'

                        // Setup AWS Credentials
                        withEnv(['AWS_ACCESS_KEY_ID=','AWS_SECRET_ACCESS_KEY=','AWS_SESSION_TOKEN=']) {
                            withCredentials([string(credentialsId: 'bfd-aws-assume-role', variable: 'ROLE')]) {
                                    env.SESSION_NAME = env.JOB_NAME
                                    awsCredentials = sh(
                                        returnStdout: true,
                                        script: 'aws sts assume-role --role-arn "$ROLE" \
                                                --role-session-name "$SESSION_NAME" \
                                                --output text --query Credentials'
                                    ).trim().split(/\s+/)
                                env.AWS_DEFAULT_REGION = 'us-east-1'
                                env.AWS_ACCESS_KEY_ID = awsCredentials[0]
                                env.AWS_SECRET_ACCESS_KEY = awsCredentials[2]
                                env.AWS_SESSION_TOKEN = awsCredentials[3]
                            }
                        }

                        withCredentials([string(credentialsId: 'bfd-aws-account-id', variable: 'ACCOUNT_ID')]) {
                            codeArtifactAuthToken = sh(
                                returnStdout: true,
                                script: 'aws codeartifact get-authorization-token --domain cms-bfd \
                                        --domain-owner "$ACCOUNT_ID" \
                                        --output text --query authorizationToken'
                                ).trim()

                            env.CODEARTIFACT_AUTH_TOKEN = codeArtifactAuthToken


                        // Execute the existing build-push script
                        dir('ops/jenkins/bfd-cbc-build') {
                            sh 'bash ./build-push.sh'
                            // inject code artifact credentials into maven ~/.m2/settings.xml
                                sh '''
cat <<EOF > ~/.m2/settings.xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
        <server>
        <username>aws</username>
        <password>${CODEARTIFACT_AUTH_TOKEN}</password>
        <id>cms-bfd-maven-central-store</id>
        </server>
    </servers>
</settings>
EOF
'''
                        }

                    }
                }
            }
        }
    }
}

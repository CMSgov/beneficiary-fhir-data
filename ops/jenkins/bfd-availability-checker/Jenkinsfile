#!/usr/bin/env groovy

pipeline {
  agent {
    kubernetes {
      yamlFile 'ops/jenkins/bfd-availability-checker/bfd-availability-checker.pod.yaml'
      defaultContainer 'bfd-availability-checker'
    }
  }

  options {
    // Nothing within this repository is required for running this pipeline, so skipping the default
    // checkout saves us some time
    skipDefaultCheckout()
    // Only keep the last 10 runs as this pipeline will be running very frequently, so we don't need
    // that much history
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  triggers {
    cron "*/1 * * * *"
  }

  stages {
    stage('Check all environments') {
      matrix {
        axes {
          axis {
            name 'ENV'
            values 'test', 'prod-sbx', 'prod'
          }
        }

        stages {
          stage('Download certificate') {
            steps {
              script {
                awsAuth.assumeRole()

                def pemKey = sh(
                  returnStdout: true,
                  script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_key\""
                          + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
                ).trim()
                def pemCert = sh(
                  returnStdout: true,
                  script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_cert\""
                          + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
                ).trim()

                writeFile(
                  file: "${ENV}-cert.pem",
                  text: pemKey + "\n" + pemCert
                )
              }
            }
          }

          stage('Run availability check') {
            steps {
              script {
                metricName = "availability/success"
                try {
                  def httpReturnCode = sh(
                    returnStdout: true,
                    script: ("curl -s -o /dev/null -w \"%{http_code}\\n\" --max-time 3 --insecure"
                            + " --cert ${ENV}-cert.pem https://${ENV}.bfd.cms.gov/metrics/ping")
                  ).trim() as Integer

                  if (httpReturnCode == 200) {
                    echo "Check succeeded with an HTTP response of 200"
                  } else {
                    metricName = "availability/failure"

                    // Mark the stage as unstable to indicate that the check failed, but that the
                    // pipeline itself did not
                    unstable "Check failed with an HTTP response of ${httpReturnCode}"
                  }
                } catch(err) {
                  metricName = "availability/failure"

                  // Mark the stage as unstable to indicate that the check failed, but that the
                  // pipeline itself did not
                  unstable "cURL failed with non-zero exit code"
                }
              }
            }
          }

          stage('Update availability metric') {
            steps {
              echo "Updating \"${metricName}\" in namespace \"bfd-${ENV}/bfd-server\""
              sh ("aws cloudwatch put-metric-data --namespace \"bfd-${ENV}/bfd-server\""
                  + " --metric-name \"${metricName}\" --unit \"Count\" --value 1")
            }
          }
        }
      }
    }
  }
}

#!/usr/bin/env groovy

pipeline {
  agent {
    kubernetes {
      defaultContainer 'availability-checker'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  restartPolicy: Never
  containers:
  - name: availability-checker
    image: alpine:3.17.1
    command: ['cat']
    tty: true
"""
    }
  }

  options {
    // Nothing within this repository is required for running this pipeline, so skipping the default
    // checkout saves us some time
    skipDefaultCheckout()
  }

  stages {
    stage('Install prerequisites') {
      steps {
        sh 'apk add --no-cache aws-cli curl'
      }
    }

    stage('Check all environments') {
      matrix {
        axes {
          axis {
            name 'ENV'
            values 'test', 'prod-sbx', 'prod'
          }
        }

        stages {
          stage("Availability check") {
            steps {
              script {
                script {
                  awsAuth.assumeRole()
                }

                pemKey = sh(
                  returnStdout: true,
                  script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_key\""
                           + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
                ).trim()
                pemCert = sh(
                  returnStdout: true,
                  script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_cert\""
                           + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
                ).trim()

                writeFile(
                  file: "${ENV}-cert.pem",
                  text: pemKey + "\n" + pemCert
                )
                
                curlStatus = sh(
                  returnStatus: true,
                  script: "curl -s --insecure --cert ${ENV}-cert.pem https://${ENV}.bfd.cms.gov/metrics/ping"
                )

                if (curlStatus == 0) {
                  echo "Curl succeeded"
                } else {
                  echo "Curl failed"
                }
              }
            }
          }
        }
      }
    }
  }
}

#!/usr/bin/env groovy

pipeline {
  agent {
    kubernetes {
      yamlFile 'ops/jenkins/bfd-availability-checker/bfd-availability-checker.pod.yaml'
      defaultContainer 'bfd-availability-checker'
    }
  }

  options {
    // Nothing within this repository is required for running this pipeline, so skipping the default
    // checkout saves us some time
    skipDefaultCheckout()
    // Using the Build History Manager plugin we construct a rule to indefinitely keep all failing
    // or unstable builds, and keep only the last ten successful builds
    buildDiscarder(BuildHistoryManager([
      // Match any failing or unstable builds. continueAfterMatch being false will ensure that
      // the discarder does not execute any further rules and therefore all failing/unstable builds
      // will be kept
      [
        conditions: [
          BuildResult(matchFailure: true, matchUnstable: true)
        ],
        continueAfterMatch: false
      ],
      // Match any successful builds, but only up to the last 10 inclusive. continueAfterMatch
      // being false only applies to the first ten, the remaining will fallthrough to the final
      // rule
      [
        conditions: [
          BuildResult(matchSuccess: true)
        ],
        matchAtMost: 10,
        continueAfterMatch: false
      ],
      // Delete any remaining builds. In this case, this will delete any excess successful builds
      [
        actions: [DeleteBuild()]
      ]
    ]))
  }

  triggers {
    cron "*/1 * * * *"
  }

  stages {
    stage('Authenticate with AWS') {
      steps {
        script {
          // We authenticate only once as we are running on the same pod for each matrix axis.
          // The pipeline is so short that we should never have to reauthenticate
          awsAuth.assumeRole()
        }
      }
    }

    stage('Check all environments') {
      matrix {
        axes {
          axis {
            name 'ENV'
            values 'test', 'prod-sbx', 'prod'
          }
        }

        stages {
          stage('Download certificate') {
            environment {
              PEM_KEY = sh(
                returnStdout: true,
                script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_key\""
                         + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
              ).trim()
              PEM_CERT = sh(
                returnStdout: true,
                script: ("aws ssm get-parameter --name \"/bfd/${ENV}/server/sensitive/test_client_cert\""
                        + " --region us-east-1 --with-decryption --output text --query 'Parameter.Value'")
              ).trim()
            }

            steps {
              writeFile(
                file: "${ENV}-cert.pem",
                text: PEM_KEY + "\n" + PEM_CERT
              )
            }
          }

          stage('Run availability check') {
            steps {
              script {
                def metricName = "availability/success"
                try {
                  def httpReturnCode = sh(
                    returnStdout: true,
                    script: ("curl -s -o /dev/null -w \"%{http_code}\\n\" --max-time 3 --insecure"
                            + " --cert ${ENV}-cert.pem https://${ENV}.bfd.cms.gov/metrics/ping")
                  ).trim() as Integer

                  if (httpReturnCode == 200) {
                    echo "Check succeeded with an HTTP response of 200"
                  } else {
                    metricName = "availability/failure"

                    // Mark the stage as unstable to indicate that the check failed, but that the
                    // pipeline itself did not
                    unstable "Check failed with an HTTP response of ${httpReturnCode}"
                  }
                } catch(err) {
                  metricName = "availability/failure"

                  // Mark the stage as unstable to indicate that the check failed, but that the
                  // pipeline itself did not
                  unstable "cURL failed with non-zero exit code"
                }

                echo "Updating \"${metricName}\" in namespace \"bfd-${ENV}/bfd-server\""
                sh ("aws cloudwatch put-metric-data --namespace \"bfd-${ENV}/bfd-server\""
                    + " --metric-name \"${metricName}\" --unit \"Count\" --value 1")
              }
            }
          }
        }
      }
    }
  }
}

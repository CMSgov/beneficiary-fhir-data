#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins to aide in destroying ephemeral environments.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def gitBranchName
def trimmedEnv
def forceStageApproval
def forcePlanApproval
def lockResource

// send notifications to slack, email, etc
def sendNotifications(String environment = '', String buildStatus = '', String stageName = '', String gitCommitId = '', String gitRepoUrl = '') {
    // buildStatus of NULL means success
    if (!buildStatus) {
        buildStatus = 'SUCCESS'
    }

    // build colors
    def colorMap = [:]
    colorMap['STARTED']  = '#0000FF'
    colorMap['SUCCESS']  = '#00FF00'
    colorMap['ABORTED']  = '#6A0DAD'
    colorMap['UNSTABLE'] = '#FFFF00'
    colorMap['FAILED']   = '#FF0000'
    def buildColor = colorMap[buildStatus]
    buildColor = buildColor ?: '#FF0000' // default to red

    def branchUrl = "https://github.com/CMSgov/beneficiary-fhir-data/tree/${env.BRANCH_NAME}"

    def msg = ''
    switch (buildStatus) {
        case 'UNSTABLE':
        case 'SUCCESS':
            msg = 'COMPLETED SUCCESSFULLY: DESTROYED BFD EPHEMERAL ENVIRONMENT'
            break
        case 'FAILED':
        case 'FAILURE':
            msg = "FAILED ON ${stageName.toUpperCase()} STAGE ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}>"
            break
        case 'STARTED':
            msg = 'HAS STARTED'
            break
        case 'ABORTED':
            msg = 'WAS ABORTED'
            break
        default:
            msg = "${buildStatus.toUpperCase()}"
            break
    }

    // build slack message
    def slackMsg = ''
    if (buildStatus == 'UNSTABLE') {
        slackMsg = "UNSTABLE BFD EPHEMERAL ENVIRONMENT DESTROY <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> ${msg} \n"
    } else {
        slackMsg = "BFD EPHEMERAL ENVIRONMENT DESTROY <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> FOR ${environment.toUpperCase()} ENVIRONMENT ${msg} \n"
    }
    slackMsg += "\tJob '${env.JOB_NAME}' \n"

    // send Slack messages
    slackSend(color: buildColor, message: slackMsg)
}

// Prompt the operator for approval before proceeding to the next stage
def checkIfStageApprovalRequired(boolean forceStageApproval) {
    if (forceStageApproval) {
        input "Approval is required before the pipeline may proceed"
    }
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk17-mvn3-tfenv3-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
    }

    parameters {
        string(
            name: 'env',
            description: 'The BFD ephemeral environment to destroy'
        )
        booleanParam(
            name: 'force_plan_approval',
            description: 'When true, force the operator to manually approve each tfplan',
            defaultValue: true
        )
        booleanParam(
            name: 'force_stage_approval',
            description: 'When true, force the operator to approve each stage before continuing',
            defaultValue: false
        )
    }

    stages {
        stage('Validate parameters') {
            when {
                expression {
                    forceStageApproval = params.force_stage_approval
                    forcePlanApproval = params.force_plan_approval
                    trimmedEnv = params.env.trim().toLowerCase()
                    // Check that the environment is ephemeral and not protected before proceeding
                    return ['test', 'prod-sbx', 'prod'].contains(trimmedEnv)
                }
            }
            steps {
                // Tried to destroy a protected environment; abort the build and skip subsequent stages
                error("Unable to destroy the restricted target environment: '${trimmedEnv}', aborting build")
            }
        }

        stage('Prepare') {
            steps {
                script {
                    // Address limitations resulting from CVE-2022-24767
                    sh 'git config --global --add safe.directory "$WORKSPACE"'

                    // Get the current commit id
                    gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                    // Get the remote repo url. This assumes we are using git+https not git+ssh.
                    gitRepoUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim().replaceAll(/\.git$/, '')

                    lockResource = "env_${trimmedEnv}"
                }
            }
        }

        stage('Set Branch Name') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    if (env.BRANCH_NAME.startsWith('PR')) {
                        gitBranchName = env.CHANGE_BRANCH
                    } else {
                        gitBranchName = env.BRANCH_NAME
                    }
                }
            }
        }

        stage('Destroy Server') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        lock(resource: lockResource) {
                            warnError(message: "Error occurred during ${currentStage} - Destroy server",
                                    catchInterruptions: false) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                            checkIfStageApprovalRequired(forceStageApproval)
                            warnError(message: "Error occurred during ${currentStage} - Destroy server load",
                                    catchInterruptions: false) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server/server-load',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                            checkIfStageApprovalRequired(forceStageApproval)
                            warnError(message: "Error occurred during ${currentStage} - Destroy server regression",
                                    catchInterruptions: false) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server/server-regression',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                            checkIfStageApprovalRequired(forceStageApproval)
                            warnError(message: "Error occurred during ${currentStage} - Destroy server insights api requests",
                                    catchInterruptions: false) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server/insights/api-requests',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                            checkIfStageApprovalRequired(forceStageApproval)
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    }
                }
            }
        }

        stage('Destroy Pipeline') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    warnError(message: "Error occurred during ${currentStage}", catchInterruptions: false) {
                        try {
                            lock(resource: lockResource) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/pipeline',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            currentBuild.result = 'ABORTED'
                            sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                            throw e
                        }
                    }
                    checkIfStageApprovalRequired(forceStageApproval)
                }
            }
        }

        stage('Destroy Migrator') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    warnError(message: "Error occurred during ${currentStage}", catchInterruptions: false) {
                        try {
                            lock(resource: lockResource) {
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: "ops/terraform/services/migrator",
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            currentBuild.result = 'ABORTED'
                            sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                            throw e
                        }
                    }
                    checkIfStageApprovalRequired(forceStageApproval)
                }
            }
        }

        stage('Destroy Common') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    warnError(message: "Error occurred during ${currentStage}", catchInterruptions: false) {
                        try {
                            lock(resource: lockResource) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/common',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            currentBuild.result = 'ABORTED'
                            sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                            throw e
                        }
                    }
                    checkIfStageApprovalRequired(forceStageApproval)
                }
            }
        }

        stage('Destroy Base') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    warnError(message: "Error occurred during ${currentStage}", catchInterruptions: false) {
                        try {
                            lock(resource: lockResource) {
                                awsAuth.assumeRole()
                                terraform.destroyTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/base',
                                    forcePlanApproval: forcePlanApproval
                                )
                            }
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            currentBuild.result = 'ABORTED'
                            sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                            throw e
                        } finally {
                            sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        }
                    }
                }
            }
        }
    }
}

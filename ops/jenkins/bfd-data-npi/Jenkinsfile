#!/usr/bin/env groovy

/** 
 * Enables Conditional daily build of a latest bfd-data-npi SNAPSHOT artifact from master 
 * using the bfd-cbc-build container image.  Downloads the external file for NPI Org names, calculates the SHA for the file
 * Check in SSM to see if the SHA is empty or if the new SHA is not equal to the previously stored file SHA. If
 * this is the case, then it delivers to bfd-mgmt AWS CodeArtifact Maven Repository as appropriate.
 */

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk21-mvn3-tfenv3-kt1.9-latest # TODO: resolve the container image rather than hard-coding it
    command:
    - sleep
    args:
    - 99d
    resources:
      limits:
        memory: 8192Mi
        cpu: 4000m
      requests:
        memory: 8192Mi
        cpu: 4000m
"""
        }
    }
    // Run Everyday at 2pm
     triggers {
        cron('0 14 * * *')
    }
    parameters {
        booleanParam(name: 'verbose_mvn_logging', description: 'When true, `mvn` will produce verbose logs.', defaultValue: false)
        string(name: 'filemonth', description: 'The month of the npi file will download', defaultValue: '')
        string(name: 'fileyear',  description: 'The year of the npi file will download', defaultValue: '')
        booleanParam(name:'forceRebuild', description: 'When true, it will force a rebuild of the npi project.', defaultValue: false)
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    container('bfd-cbc-build') {
                        // Address limitations resulting from CVE-2022-24767
                        sh 'git config --global --add safe.directory "$WORKSPACE"'

                        // Setup AWS Credentials
                        awsAuth.assumeRole()

                        // Use our account credentials and get a authorization token for our aws code artifact
                        withCredentials([string(credentialsId: 'bfd-aws-account-id', variable: 'ACCOUNT_ID')]) {
                            codeArtifactAuthToken = sh(
                            returnStdout: true,
                            script: '''
aws codeartifact get-authorization-token --domain bfd-mgmt \
 --domain-owner "$ACCOUNT_ID" \
 --output text --query authorizationToken
'''
                            ).trim()
                            // Get our endpoint url for our aws code artifact
                            codeArtifactEndpoint = sh(
                                returnStdout: true,
                                script: '''
aws codeartifact get-repository-endpoint \
--domain bfd-mgmt --repository bfd-mgmt \
--format maven --output text
'''
                            )
                            env.CODEARTIFACT_AUTH_TOKEN = codeArtifactAuthToken
                            env.CODEARTIFACT_ENDPOINT = codeArtifactEndpoint
                        }
                        // Add the authorization token and uername for our aws code artifact repository
                        sh '''
cat <<EOF > ~/.m2/settings.xml
<settings xmlns="http://maven.apache.org/settings/1.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"
xsi:schemalocation="http://maven.apache.org/settings/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
<servers>
    <server>
    <username>aws</username>
    <password>${CODEARTIFACT_AUTH_TOKEN}</password>
    <id>bfd-mgmt-bfd-mgmt</id>
    </server>
</servers>
</settings>
EOF
'''
                    }
                }
            }
        }
        stage('Maven Build') {
            steps {
                script {
                    container('bfd-cbc-build') {
                      // Get url 
                        env.npiOrgFileDownloadUrl = sh(
                            returnStdout: true,
                            script: '''
                            month=${filemonth:-"$(date +%B)"}
                            year=${fileyear:-"$(date +%Y)"}
                            echo "https://download.cms.gov/nppes/NPPES_Data_Dissemination_${month}_${year}.zip"
'''
                        ).trim()

                        echo "NPI File Download Url: " + npiOrgFileDownloadUrl

                        
                      // Download and Calculate NPI Org File Sha256 from the external source
                        env.npiOrgFileStatusCode = sh(
                            returnStdout: true,
                            script: '''
                            curl -s -o /dev/null -I -w "%{http_code}" "${npiOrgFileDownloadUrl}"
'''
                        )

                        if(env.npiOrgFileStatusCode.trim()=='200'){
                         env.npiOrgNameSha256 = sh(
                            returnStdout: true,
                            script: '''
                            curl -fsSL ${npiOrgFileDownloadUrl} | sha256sum | awk '{ print $1 }'
'''
                        )
                        awsAuth.assumeRole()
                        // Check whether the npi sha parameter exists and has a value
                        env.ssmLookupSha256 = sh(
                            returnStdout: true,
                            script: '''
if parameter_lookup="$(aws ssm get-parameter --name /bfd/mgmt/versioning/nonsensitive/bfd-data-npi-sha256 \
--region us-east-1 --output text --query Parameter.Value 2>/dev/null)"; then
   echo "$parameter_lookup"
fi
'''
                        )
                        // Check whether the parameter is empty or the sha value is not equal to the new sha value, if either 
                        // it is empty or doesnt exist we build the project and deploy the new jar to aws code artifact
                        if (params.forceRebuild || env.ssmLookupSha256.isEmpty() || env.npiOrgNameSha256.trim() != env.ssmLookupSha256.trim()) {
                            dir('apps/bfd-data-npi') {
                                def quietFlags = params.verbose_mvn_logging ? '' : '--quiet'
                                sh "mvn ${quietFlags} -Dnpi.downloadUrl=\"${npiOrgFileDownloadUrl}\" clean install"
                                sh 'echo "$CODEARTIFACT_ENDPOINT"'

                                withCredentials([string(credentialsId: 'bfd-aws-account-id', variable: 'ACCOUNT_ID')]) {
                                    sh '''
mvn deploy "-DaltDeploymentRepository=bfd-mgmt-bfd-mgmt::default::https://bfd-mgmt-${ACCOUNT_ID}.d.codeartifact.us-east-1.amazonaws.com/maven/bfd-mgmt/"
'''
                                }
                                awsAuth.assumeRole()
                                awsSsm.putParameter(
                                    parameterName: "/bfd/mgmt/versioning/nonsensitive/bfd-data-npi-sha256",
                                    parameterValue: "${npiOrgNameSha256}",
                                    parameterType: "String",
                                    parameterTags: "Key=Source,Value=${JOB_NAME} Key=Environment,Value=mgmt Key=stack,Value=mgmt Key=Terraform,Value=False Key=application,Value=bfd Key=business,Value=oeda",
                                    shouldOverwrite: true
                                )
                            }
                        } else {
                            echo "NPI Org file already up-to-date. Nothing to do!"
                        }
                      } else {
                          echo "Curl Command for NPI File returned: " + npiOrgFileStatusCode
                      }
                    }
                }
            }
        }
    }
}

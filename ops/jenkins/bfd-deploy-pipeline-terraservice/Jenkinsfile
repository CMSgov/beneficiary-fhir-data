// Variables defined here are accessible throughout this file (except inside methods and classes).
def scriptForDeploys
def scriptForApps
def gitBranchName
def amiIds

pipeline {
  agent {
    kubernetes {
      defaultContainer 'bfd-cbc-build'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  restartPolicy: Never
  containers:
    - name: bfd-cbc-build
      image: "public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk17-mvn3-tfenv3-latest" # TODO: consider a smarter solution for resolving this image
      command:
        - cat
      tty: true
      imagePullPolicy: IfNotPresent
"""
    }
  }

  parameters {
    string(
      name: 'env',
      description: 'The BFD Environment to deploy the Terraservice to'
    )
    string(
      name: 'ami_override',
      description: 'BFD Pipeline override AMI ID. Optional, defaults to latest Pipeline AMI from '
                   + '`master`'
    )
    booleanParam(
      name: 'create_ccw_pipeline_instance',
      defaultValue: false,
      description: 'Whether or not the BFD CCW Pipeline instance should be created to load data'
    )
    booleanParam(
      name: 'create_rda_pipeline_instance',
      defaultValue: true,
      description: 'Whether or not the BFD RDA Pipeline instance should be created to load data'
    )
  }

  stages {
    stage('Set Branch Name') {
      steps {
        script {
          currentStage = env.STAGE_NAME
            if (env.BRANCH_NAME.startsWith('PR')) {
              gitBranchName = env.CHANGE_BRANCH
            } else {
              gitBranchName = env.BRANCH_NAME
            }
        }
      }
    }

    stage('Prepare') {
      steps {
        script {
          // Load the child Jenkinsfiles.
          scriptForApps = load('apps/build.groovy')
          scriptForDeploys = load('ops/deploy-ccs.groovy')

          awsAuth.assumeRole()

          // Find the most current AMI IDs (if any).
          amiIds = scriptForDeploys.findAmis(gitBranchName)
        }
      }
    }

    stage('Deploy Pipeline Terraservice') {
      steps {
        script {
          def trimmedEnv = params.env.trim()
          def amiId = params.ami_override?.trim() ?: amiIds.bfdPipelineAmiId
          def lockResource = trimmedEnv == 'prod-sbx' ? 'env_prod_sbx' : "env_${trimmedEnv}"
          lock(resource: lockResource) {
            awsAuth.assumeRole()
            terraform.deployTerraservice(
              env: trimmedEnv,
              directory: 'ops/terraform/services/pipeline',
              tfVars: [
                create_ccw_pipeline: params.create_ccw_pipeline_instance,
                create_rda_pipeline: params.create_rda_pipeline_instance,
                ami_id_override: amiId
              ]
            )
          }
        }
      }
    }
  }
}

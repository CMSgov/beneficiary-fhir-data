#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when deploying apps and app AMIs.
 * </p>
 */

// These variables are accessible throughout this file (except inside methods and classes).
def gitBranchName
def migratorScripts
def serverScripts
def trimmedEnv
def lockResource
def awsRegion = 'us-east-1'
def migratorRunbookUrl = "https://github.com/CMSgov/beneficiary-fhir-data/blob/master/runbooks/how-to-recover-from-migrator-failures.md"

// send notifications to slack, email, etc
def sendNotifications(String environment = '', String buildStatus = '', String stageName = '', String gitCommitId = '', String gitRepoUrl = '') {
    // buildStatus of NULL means success
    if (!buildStatus) {
        buildStatus = 'SUCCESS'
    }

    // build colors
    def colorMap = [:]
    colorMap['STARTED']  = '#0000FF'
    colorMap['SUCCESS']  = '#00FF00'
    colorMap['ABORTED']  = '#6A0DAD'
    colorMap['UNSTABLE'] = '#FFFF00'
    colorMap['FAILED']   = '#FF0000'
    def buildColor = colorMap[buildStatus]
    buildColor = buildColor ?: '#FF0000' // default to red

    def branchUrl = "https://github.com/CMSgov/beneficiary-fhir-data/tree/${env.BRANCH_NAME}"

    def msg = ''
    switch (buildStatus) {
        case 'UNSTABLE':
        case 'SUCCESS':
            msg = 'COMPLETED SUCCESSFULLY: DEPLOYED BFD APPS AND AMIS'
            break
        case 'FAILED':
        case 'FAILURE':
            msg = "FAILED ON ${stageName.toUpperCase()} STAGE ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}>"
            break
        case 'STARTED':
            msg = 'HAS STARTED'
            break
        case 'ABORTED':
            msg = 'WAS ABORTED'
            break
        default:
            msg = "${buildStatus.toUpperCase()}"
            break
    }

    // build slack message
    def slackMsg = ''
    if (buildStatus == 'UNSTABLE') {
        slackMsg = "UNSTABLE BFD APP/AMI DEPLOY <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> ${msg} \n"
    } else {
        slackMsg = "BFD APP/AMI DEPLOY <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ON BRANCH <${branchUrl}|${env.BRANCH_NAME.toUpperCase()}> FOR ${environment.toUpperCase()} ENVIRONMENT ${msg} \n"
    }
    slackMsg += "\tJob '${env.JOB_NAME}' \n"

    // send Slack messages
    slackSend(color: buildColor, message: slackMsg)
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk17-mvn3-tfenv3-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
    }

    parameters {
        string(
        name: 'env',
        description: 'The BFD Environment to deploy apps to'
        )

        string(
        name: 'migrator_ami_override',
        description: 'The AMI ID to deploy migrator from',
        defaultValue: null
        )

        string(
        name: 'pipeline_ami_override',
        description: 'The AMI ID to deploy pipeline from',
        defaultValue: null
        )

        string(
        name: 'server_ami_override',
        description: 'The AMI ID to deploy server from',
        defaultValue: null
        )

        booleanParam(
            name: 'force_migrator_deployment', 
            description: 'When true, force the migrator to deploy.', 
            defaultValue: false
        )

        string(
        name: 'server_regression_image_override',
        description: 'Overrides the Docker image tag used when deploying the server-regression lambda',
        defaultValue: null
        )
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    // Address limitations resulting from CVE-2022-24767
                    sh 'git config --global --add safe.directory "$WORKSPACE"'

                    // Get the current commit id
                    gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                    // Get the remote repo url. This assumes we are using git+https not git+ssh.
                    gitRepoUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim().replaceAll(/\.git$/, '')

                    // Load the child Jenkinsfiles.
                    migratorScripts = load('ops/terraform/services/migrator/deploy.groovy')
                    serverScripts = load('ops/terraform/services/server/deploy.groovy')

                    trimmedEnv = params.env.trim()
                    lockResource = trimmedEnv == 'prod-sbx' ? 'env_prod_sbx' : "env_${trimmedEnv}"

                    awsAuth.assumeRole()
                }
            }
        }

        stage('Set Branch Name') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    if (env.BRANCH_NAME.startsWith('PR')) {
                        gitBranchName = env.CHANGE_BRANCH
                    } else {
                        gitBranchName = env.BRANCH_NAME
                    }
                }
            }
        }

        stage('Deploy Base') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        lock(resource: lockResource) {
                            awsAuth.assumeRole()
                            terraform.deployTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/base'
                            )
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw ex
                    }
                }
            }
        }

        stage('Deploy Common') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        lock(resource: lockResource) {
                            awsAuth.assumeRole()
                            terraform.deployTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/common'
                            )
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw ex
                    }
                }
            }
        }


        stage('Deploy Migrator') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        def migratorAmiOverride = params.migrator_ami_override?.trim()

                        lock(resource: lockResource) {
                            migratorDeploymentSuccessful = migratorScripts.deployMigrator(
                                amiId: migratorAmiOverride,
                                bfdEnv: trimmedEnv,
                                heartbeatInterval: 30, // TODO: Consider implementing a backoff functionality in the future
                                awsRegion: awsRegion,
                                forceDeployment: params.force_migrator_deployment
                            )

                            if (migratorDeploymentSuccessful) {
                                println "Proceeding to Stage: 'Deploy Pipeline to ${trimmedEnv.toUpperCase()}'"
                            } else {
                                println "See ${migratorRunbookUrl} for troubleshooting resources."
                                error('Migrator deployment failed')
                            }
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw ex
                    }
                }
            }
        }

        stage('Deploy Pipeline') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        def terraformVars = (params.pipeline_ami_override?.trim())
                                                  ? [ami_id_override: params.pipeline_ami_override?.trim()]
                                                  : []
                        lock(resource: lockResource) {
                            awsAuth.assumeRole()
                            terraform.deployTerraservice(
                            env: trimmedEnv,
                            directory: 'ops/terraform/services/pipeline',
                            tfVars: terraformVars
                            )
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                        throw ex
                    }
                }
            }
        }

        stage('Deploy Server') {
            steps {
                script {
                    currentStage = env.STAGE_NAME
                    try {
                        def terraformVars = (params.server_ami_override?.trim())
                                                  ? [ami_id_override: params.server_ami_override?.trim()]
                                                  : []
                        lock(resource: lockResource) {
                            // Deploy the Server
                            awsAuth.assumeRole()
                            terraform.deployTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server',
                                    tfVars: terraformVars
                            )

                            awsAuth.assumeRole()
                            terraform.deployTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server/server-regression',
                                    tfVars: [
                                        docker_image_tag_override: params.server_regression_image_override
                                    ]
                            )

                            // TODO: Better support ephemeral environments in the future as desired, post BFD-2554
                            if (bfdEnv in ["test", "prod-sbx", "prod"]) {
                                // Deploy the API requests Insights Lambda
                                awsAuth.assumeRole()
                                terraform.deployTerraservice(
                                    env: trimmedEnv,
                                    directory: 'ops/terraform/services/server/insights/api-requests'
                                )
                            }

                            // Deploy the API regression suite
                            awsAuth.assumeRole()
                            hasRegressionRunSucceeded = serverScripts.runServerRegression(
                                bfdEnv: trimmedEnv,
                                elbDnsName: sh(returnStdout: true, script: "aws elb describe-load-balancers --load-balancer-names 'bfd-${trimmedEnv}-fhir' --query 'LoadBalancerDescriptions[0].DNSName'").trim(),
                                gitBranchName: gitBranchName
                            )
                            if (hasRegressionRunSucceeded) {
                                println 'Regression suite passed, proceeding to next stage...'
                            } else {
                                try {
                                    input 'Regression suite failed, check the CloudWatch logs above for more details. Should deployment proceed?'
                                    echo "Regression suite failure in '${trimmedEnv}' has been accepted by operator. Proceeding to next stage..."
                                } catch (err) {
                                    error "Operator opted to fail deployment due to regression suite failure in '${trimmedEnv}'"
                                }
                            }
                        }
                    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                        currentBuild.result = 'ABORTED'
                        throw e
                    } catch (ex) {
                        currentBuild.result = 'FAILURE'
                        throw ex
                    } finally {
                        sendNotifications(trimmedEnv, currentBuild.currentResult, currentStage, gitCommitId, gitRepoUrl)
                    }
                }
            }
        }
    }
}

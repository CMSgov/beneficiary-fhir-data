#!/usr/bin/env groovy

/**
 * <p>
 * This script will be run by Jenkins when building deploying apps and app AMIs to ephemeral environments.
 * </p>
 */

properties([
  parameters ([
    booleanParam(name: 'verbose_mvn_logging', description: 'When true, `mvn` will produce verbose logs.',
      defaultValue: false),

    booleanParam(name: 'force_build_amis', description: 'When true, AMIs based on branch will be built.',
      defaultValue: false),

    booleanParam(name: 'force_build_docker_host_ami',
      description: 'When true, the docker host AMI based on branch will be built. Note: `force_build_amis` must' +
      'also be true.', defaultValue: false),

    string(name: 'env', description: 'The BFD Environment to deploy apps to'),

    string(name: 'migrator_ami_override', description: 'The AMI ID to deploy migrator from', defaultValue: null),

    string(name: 'pipeline_ami_override', description: 'The AMI ID to deploy pipeline from', defaultValue: null),

    string(name: 'server_ami_override', description: 'The AMI ID to deploy server from', defaultValue: null),

    booleanParam(name: 'force_migrator_deployment', description: 'When true, force the migrator to deploy.',
      defaultValue: false),

    string(name: 'server_regression_image_override',
      description: 'Overrides the Docker image tag used when deploying the server-regression lambda',
      defaultValue: null)
  ])
])


// These variables are accessible throughout this file (except inside methods and classes).
def gitBranchName

pipeline {
    agent {
        kubernetes {
            defaultContainer 'bfd-cbc-build'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: bfd
  containers:
  - name: bfd-cbc-build
    image: 'public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk21-mvn3-tfenv3-kt1.9-latest'
    command:
    - cat
    tty: true
    imagePullPolicy: Always
    resources:
      requests:
        memory: '16384Mi'
        cpu: '8000m'
      limits:
        memory: '16384Mi'
        cpu: '8000m'
"""
        }
      }
      options {
        buildDiscarder(logRotator(numToKeepStr: '15', daysToKeepStr: '30'))
      }

  stages {
    /* This stage switches the gitBranchName (needed for our CCS downsream stages)
       value if the build is a PR as the BRANCH_NAME var is populated with the build
       name during PR builds.
    */
    stage('Set Branch Name') {
        steps {
            script {
                currentStage = env.STAGE_NAME
                // Set git branch name to master if not building amis
                if (!params.force_build_amis) {
                    gitBranchName = 'master'
                } else {
                    if (env.BRANCH_NAME.startsWith('PR')) {
                        gitBranchName = env.CHANGE_BRANCH
                    } else {
                        gitBranchName = env.BRANCH_NAME
                    }
                }
            }
        }
    }

    stage('Prepare') {
      steps {
        script {
            // Address limitations resulting from CVE-2022-24767
            sh 'git config --global --add safe.directory "$WORKSPACE"'

            // Get the current commit id
            gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

            // Get the remote repo url. This assumes we are using git+https not git+ssh.
            gitRepoUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim().replaceAll(/\.git$/, '')

            // Load the child Jenkinsfiles.
            scriptForApps = load('apps/build.groovy')
        }
      }
    }

    stage('Run Build Apps') {
      steps {
        script {
          if (params.force_build_amis) {
              def jobToRun = "bfd-build-apps/${env.BRANCH_NAME.replace('/', '%2F')}"
              build job:
                jobToRun,
                parameters: [
                  booleanParam(name: "verbose_mvn_logging", value: "${params.verbose_mvn_logging}"),
                  booleanParam(name: "force_build_docker_host_ami", value: "${params.force_build_docker_host_ami}")
                ],
                wait: true
          } else {
            org.jenkinsci.plugins.pipeline.modeldefinition.Utils.markStageSkippedForConditional('Run Build Apps')
          }
        }
      }
    }

    stage('Run Deploy Apps') {
      steps {
        script {
          def jobToRun = "bfd-deploy-apps/${env.BRANCH_NAME.replace('/', '%2F')}"

          awsAuth.assumeRole()

          build job:
            jobToRun,
            parameters: [
              string(name: "env", value: "${params.env}"),
              string(name: "migrator_ami_override", value: "${params.migrator_ami_override}"),
              string(name: "pipeline_ami_override", value: "${params.pipeline_ami_override}"),
              string(name: "server_ami", value: "${params.server_ami_override}"),
              booleanParam(name: "force_migrator_deployment", value: "${params.force_migrator_deployment}"),
              string(name: "server_regression_image_override", value: "${params.server_regression_image_override}")
            ],
            wait: true
        }
      }
    }
  }
}

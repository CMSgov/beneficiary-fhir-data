#!/usr/bin/env bash
set -eo pipefail

TARGET_SYNTHEA_DIR=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")
readonly TARGET_SYNTHEA_DIR

BFD_END_STATE_PROPERTIES="$TARGET_SYNTHEA_DIR/end_state.properties"
readonly BFD_END_STATE_PROPERTIES

NUM_REGEX="^[0-9]+$"
readonly NUM_REGEX

num_generated_benes=100
generate_future="false"
num_future_months=0
target_contract="Y9999"
use_target_contract="false"

help() {
  echo
  echo "Docker container for running Synthea generation:"
  echo
  echo "-n,--num_benes : Specifies the number of beneficiaries to generate. Defaults to 100"
  echo "-f,--future_months : Specifies the number of months in the future to generate claim lines. Defaults to 0"
  echo "--tc,--target_contract : indicates a partD contract to tie all generated benes to if --use_target_contract is set to true"
  echo "--utc,--use_target_contract : If set to true, indicates to tie all generated items to a single partD contract specified by --target_contract, must be 5 characters (default Y9999)"
  echo "-v,--verbose : Specifies whether the Synthea executable should log to STDOUT or if its logs should be discarded. Defaults to unset (non-verbose)"
  echo "-h,--help : Shows this help text"

  exit "$1"
}

[ $# -lt 1 ] && help

options=$(getopt -a -n "bfd-mgmt-synthea-generation" -o v,h,n:,f: -l verbose,help,num_benes:,future_months: -- "$@")
[ $? -ne 0 ] && help 1

eval set -- "$options"
while :; do
  case "$1" in
    -v | --verbose)
      export VERBOSE_SYNTHEA_LOGS="true"
      shift
      ;;
    -h | --help)
      help
      ;;
    -n | --num_benes)
      if ! [[ "$2" =~ $NUM_REGEX ]]; then
        echo "ERROR, non-numeric specified ($2)...exiting" >&2
        exit 1
      fi
      num_generated_benes="$2"

      shift 2
      ;;
    -f | --future_months)
      if ! [[ "$2" =~ $NUM_REGEX ]]; then
        echo "ERROR, non-numeric future month value specified ($2)...exiting" >&2
        exit 1
      fi
      num_future_months="$2"
      if [[ "$2" -gt 0 ]]; then
        generate_future="true"
      fi
      
      shift 2
      ;;
    --tc | --target_contract)
      target_contract="$2"
      shift
      ;;
    --utc | --use_target_contract)
      use_target_contract=$(echo "$2" | tr '[:upper:]' '[:lower:]')
      if [[ "${use_target_contract}" != "true" && "${use_target_contract}" != "false" ]]; then
        echo "ERROR, Invalid boolean value for using target contract: ${use_target_contract}" >&2; 
        exit 1
      fi
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unexpected option: $1"
      help 1
      ;;
  esac
done

echo "Preparing to run Synthea generation..."
starting_datetime=$(date '+%F_%H-%M-%S')

echo "Running Synthea generation with $num_generated_benes benes and $num_future_months future months..."
if [[ "${use_target_contract}" == "true" ]]; then
    echo "    ...and adding all generated items to contract ${target_contract}"
fi
{
  python3 prepare-and-run-synthea.py \
    "${BFD_END_STATE_PROPERTIES}" \
    "${TARGET_SYNTHEA_DIR}" \
    "${num_generated_benes}" \
    "${num_future_months}" \
    "${target_contract}" \
    "${use_target_contract}" 2>&1 &&
    echo "Synthea generation finished, generated synthetic data can be found in the output directory"
} || {
  echo "Synthea generation failed to complete. View the logs in the logs directory for more information"
}

split_future_claims_logname="split_future_claims-$starting_datetime.log"
if [ "$generate_future" == 'true' ]; then
  echo "Generating future months was specified, splitting future claims to allow for proper loading..."
  {
    python3 split-future-claims.py "$TARGET_SYNTHEA_DIR" \
      2>&1 | tee -a "$TARGET_SYNTHEA_DIR/logs/$split_future_claims_logname" &&
      echo "Future claims splitting succeeded, view the full log or the $split_future_claims_logname for more information"
  } || {
    echo "Future claims splitting failed, view the full log or the $split_future_claims_logname for more information"
  }
fi

# Rename the synthea log generated by the prepare-and-run-synthea script to be consistent with
# other logs generated here
mv "$TARGET_SYNTHEA_DIR"/synthea-*.log "$TARGET_SYNTHEA_DIR/logs/synthea-$starting_datetime.log"

echo "Copying original end_state.properties into output/bfd..."
cp "$TARGET_SYNTHEA_DIR/end_state.properties" "$TARGET_SYNTHEA_DIR/output/bfd/end_state.properties.orig"

generated_output_dirname="generated-$starting_datetime"
echo "Moving generated output to out/$generated_output_dirname..."
mkdir -p "$TARGET_SYNTHEA_DIR/out/$generated_output_dirname"
mv "$TARGET_SYNTHEA_DIR/output/" "$TARGET_SYNTHEA_DIR/out/$generated_output_dirname"

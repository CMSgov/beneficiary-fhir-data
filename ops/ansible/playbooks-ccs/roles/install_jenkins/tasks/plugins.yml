---
###
# Installs the "standard" Jenkins 2.0 plugins, as well as any additional that
# are specified in the 'plugins_extra' variable.
###

# Fire any pending restart handlers now, as we need Jenkins to be running.
# Otherwise, the config.xml file may not have been created yet.
- meta: flush_handlers

- name: Read Jenkins Config File
  slurp:
    src: "{{ jenkins_home }}/config.xml"
  become: true
  changed_when: false
  register: slurp_jenkins_config

- name: Determine Active Security Settings
  set_fact:
    # Yes, I'm parsing XML with a regex, and yes that's bad. But it's almost
    # certainly "good enough" in this instance, so.
    jenkins_active_security_realm: "{{ slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<securityRealm class=\"([^\"]+)\".*', '\\1') }}"
    # Note: this will be a string value; use the `| bool` filter on it if a boolean is needed.
    jenkins_security_enabled: "{{ true if (slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<useSecurity>([^<].*)</useSecurity>.*', '\\1')) == 'true' else false }}"
    
- name: Calculate API Connection Variables
  set_fact:
    # All communication with the Jenkins API will be done over localhost, for security.
    jenkins_url_local: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path }}"
    # The actual username and password used are dynamic to ensure that anon logins are used post-install (before security has been configured).
    jenkins_dynamic_admin_username: "{{ (vault_jenkins_admin_username | default(None)) if (jenkins_security_enabled | bool) else None }}"
    jenkins_dynamic_admin_password: "{{ (vault_jenkins_admin_password | default(None)) if (jenkins_security_enabled | bool) else None }}"
  no_log: true

- name: Ensure Service 'jenkins' Is Running
  service:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins to start up
  uri:
    url: "{{ jenkins_url_local }}"
    user: "{{ vault_jenkins_admin_username }}"
    password: "{{ vault_jenkins_admin_password }}"
    force_basic_auth: yes
    status_code: 200
    timeout: 5
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: 60
  delay: 5
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200
     
- name: Install Plugins
  jenkins_plugin:
    name: "{{ item }}"
    state: present
    jenkins_home: "{{ jenkins_home }}"
    url: "{{ jenkins_url_local }}"
    url_username: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    url_password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    validate_certs: true
    timeout: "{{ jenkins_plugins_timeout }}"
  with_items:
    - "{{ jenkins_plugins_recommended }}"
    - "{{ jenkins_plugins_extra }}"
  become: true
  retries: "{{ jenkins_plugins_retries }}"
  notify:
    - "Restart Service 'jenkins'"

- name: Update Plugins
  jenkins_plugin:
    name: "{{ item }}"
    state: latest
    jenkins_home: "{{ jenkins_home }}"
    url: "{{ jenkins_url_local }}"
    url_username: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    url_password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    validate_certs: true
    timeout: "{{ jenkins_plugins_timeout }}"
  with_items:
    - "{{ jenkins_plugins_recommended }}"
    - "{{ jenkins_plugins_extra }}"
  become: true
  when: jenkins_plugins_update
  retries: "{{ jenkins_plugins_retries }}"
  notify:
    - "Restart Service 'jenkins'"

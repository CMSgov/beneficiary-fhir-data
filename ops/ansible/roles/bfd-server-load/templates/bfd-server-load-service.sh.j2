#!/usr/bin/env bash

{#
# The expression {{ (foo is defined) | ternary('', '#') }} prepends exports with '#' to prevent
# undefined or empty 'foo' variable from entering the environment. Maintains the existing templating
# strategy and remains flexible for manual manipulation of resultant script in development and
# troubleshooting scenarios.
#}

# Source the pythonic virtual environment
source "{{ server_load_dir }}/venv/bin/activate"

# BFD_ENVIRONMENT defaults to 'test' in the server-load application
{{ (env is defined) | ternary('', '#') }}export BFD_ENVIRONMENT='{{ env | default('', true) }}'

# SQS_QUEUE_NAME defaults to 'bfd-test-server-load' in the server-load application
{{ (server_load_sqs_queue_name is defined) | ternary('', '#') }}export SQS_QUEUE_NAME='{{ server_load_sqs_queue_name | default('', true) }}'

# NODE_LAMBDA_NAME defaults to 'bfd-test-server-load-node' in the server-load application
{{ (server_load_node_lambda_name is defined) | ternary('', '#') }}export NODE_LAMBDA_NAME='{{ server_load_node_lambda_name | default('', true) }}'

# ASG_NAME defaults to '' in the server-load application
{{ (server_load_asg_name is defined) | ternary('', '#') }}export ASG_NAME='{{ server_load_asg_name | default('', true) }}'

# TEST_HOST defaults to 'https://test.bfd.cms.gov' in the server-load application
{{ (server_load_test_host is defined) | ternary('', '#') }}export TEST_HOST='{{ server_load_test_host | default('', true) }}'

# AWS_CURRENT_REGION defaults to 'us-east-1' in the server-load application
{{ (server_load_aws_current_region is defined) | ternary('', '#') }}export AWS_CURRENT_REGION='{{ server_load_aws_current_region | default('', true) }}'

# INITIAL_WORKER_NODES defaults to 0 in the server-load application
{{ (server_load_initial_worker_nodes is defined) | ternary('', '#') }}export INITIAL_WORKER_NODES='{{ server_load_initial_worker_nodes | default('', true) }}'

# NODE_SPAWN_TIME defaults to 10 in the server-load application
{{ (server_load_node_spawn_time is defined) | ternary('', '#') }}export NODE_SPAWN_TIME='{{ server_load_node_spawn_time | default('', true) }}'

# MAX_SPAWNED_NODES defaults to 0 in the server-load application
{{ (server_load_max_spawned_nodes is defined) | ternary('', '#') }}export MAX_SPAWNED_NODES='{{ server_load_max_spawned_nodes | default('', true) }}'

# MAX_SPAWNED_USERS defaults to 0 in the server-load application
{{ (server_load_max_spawned_users is defined) | ternary('', '#') }}export MAX_SPAWNED_USERS='{{ server_load_max_spawned_users | default('', true) }}'

# USER_SPAWN_RATE defaults to 1 in the server-load application
{{ (server_load_user_spawn_rate is defined) | ternary('', '#') }}export USER_SPAWN_RATE='{{ server_load_user_spawn_rate | default('', true) }}'

# TEST_RUNTIME_LIMIT defaults to 0 in the server-load application
{{ (server_load_test_runtime_limit is defined) | ternary('', '#') }}export TEST_RUNTIME_LIMIT='{{ server_load_test_runtime_limit | default('', true) }}'

# COASTING_TIME defaults to 0 in the server-load application
{{ (server_load_coasting_time is defined) | ternary('', '#') }}export COASTING_TIME='{{ server_load_coasting_time | default('', true) }}'

# WARM_INSTANCE_TARGET defaults to 0 in the server-load application
{{ (server_load_warm_instance_target is defined) | ternary('', '#') }}export WARM_INSTANCE_TARGET='{{ server_load_warm_instance_target | default('', true) }}'

# STOP_ON_SCALING defaults to true in the server-load application
{{ (server_load_stop_on_scaling is defined) | ternary('', '#') }}export STOP_ON_SCALING='{{ server_load_stop_on_scaling | default('', true) }}'

# STOP_ON_NODE_LIMIT defaults to true in the server-load application
{{ (server_load_stop_on_node_limit is defined) | ternary('', '#') }}export STOP_ON_NODE_LIMIT='{{ server_load_stop_on_node_limit | default('', true) }}'

(cd "{{ server_load_dir }}/services/server-load/controller" && \
 python3 controller.py &>> "{{ server_load_dir }}/server-load-controller.log")

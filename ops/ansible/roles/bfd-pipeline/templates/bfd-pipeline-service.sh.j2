#!/bin/bash

export CCW_RIF_JOB_ENABLED='{{ enabled }}'
export S3_BUCKET_NAME='{{ s3_bucket_name }}'
export HICN_HASH_ITERATIONS='{{ iterations }}'  # The minimum number of iterations recommended by NIST is 1000.
export HICN_HASH_PEPPER='{{ pepper }}'
export DATABASE_URL='{{ url }}'
export DATABASE_USERNAME='{{ username }}'
export DATABASE_PASSWORD='{{ password }}'
# NOTE: RIF Loader Threads are generally some multiple of available cpus/core, e.g. `$((3 * $(nproc)))`
export LOADER_THREADS='{{ loader_thread_count }}'
export RIF_JOB_BATCH_SIZE='{{ batch_size }}'
export RIF_JOB_QUEUE_SIZE_MULTIPLE='{{ queue_size_multiple }}'
export LOADER_THREADS_CLAIMS='{{ loader_thread_count	}}'
export RIF_JOB_BATCH_SIZE_CLAIMS='{{ batch_size }}'
export RIF_JOB_QUEUE_SIZE_MULTIPLE_CLAIMS='{{ queue_size_multiple }}'

export IDEMPOTENCY_REQUIRED='{{ idempotency_enabled }}'

# Observability
{% if enabled is defined and namespace is defined %}
export MICROMETER_CW_ENABLED={{ enabled }}
export MICROMETER_CW_NAMESPACE={{ namespace }}
export MICROMETER_CW_INTERVAL={{ interval }}
{% else %}
# export MICROMETER_CW_ENABLED=
# export MICROMETER_CW_NAMESPACE=
# export MICROMETER_CW_INTERVAL=
{% endif %}

export NEW_RELIC_METRIC_HOST='{{ host }}'
export NEW_RELIC_METRIC_PATH='{{ path }}'
{% if app_name is defined %}
export NEW_RELIC_APP_NAME='{{ app_name }}'
{% else %}
#export NEW_RELIC_APP_NAME=
{% endif %}
{% if license_key is defined %}
export NEW_RELIC_METRIC_KEY='{{ license_key }}'
{% else %}
#export NEW_RELIC_METRIC_KEY=
{% endif %}

export RDA_JOB_ENABLED='{{ enabled }}'
export RDA_JOB_INTERVAL_SECONDS='{{ interval_seconds }}'
export RDA_JOB_BATCH_SIZE='{{ batch_size }}'
export RDA_JOB_WRITE_THREADS='{{ write_thread_count }}'
{% if process_dlq is defined %}
export RDA_JOB_PROCESS_DLQ='{{ process_dlq }}'
{% endif %}
{% if data_pipeline_rda_version is defined %}
export RDA_JOB_RDA_VERSION='{{ data_pipeline_rda_version }}'
{% endif %}
{% if starting_fiss_seq_num is defined %}
export RDA_JOB_STARTING_FISS_SEQ_NUM='{{ starting_fiss_seq_num }}'
{% endif %}
{% if starting_mcs_seq_num is defined %}
export RDA_JOB_STARTING_MCS_SEQ_NUM='{{ starting_mcs_seq_num }}'
{% endif %}
export RDA_GRPC_HOST='{{ host }}'
export RDA_GRPC_PORT='{{ port }}'
export RDA_GRPC_MAX_IDLE_SECONDS='{{ max_idle_seconds }}'
export RDA_GRPC_AUTH_TOKEN='{{ auth_token }}'
export RDA_GRPC_SERVER_TYPE='{{ server_type }}'
export RDA_GRPC_INPROC_SERVER_MODE='{{ mode }}'
export RDA_GRPC_INPROC_SERVER_S3_REGION='{{ region }}'
export RDA_GRPC_INPROC_SERVER_S3_BUCKET='{{ bucket }}'
export RDA_GRPC_INPROC_SERVER_S3_DIRECTORY='{{ dir }}'

# Referenced by the pipeline's logback.xml file to add environment name for use in splunk.
export BFD_ENV_NAME='{{ env_name }}'


# Either don't set this variable, or set it to one of: BENEFICIARY, CARRIER, DME, HHA, HOSPICE, INPATIENT, OUTPATIENT, PDE, SNF
# export DATA_SET_TYPE_ALLOWED="BENEFICIARY"

# Set some additional variables.
JVM_ARGS='{{ data_pipeline_jvm_args }}'

exec "{{ data_pipeline_dir }}/bfd-pipeline-app-{{ bfd_version }}/bfd-pipeline-app.sh" \
	${JVM_ARGS} \
	-Djava.io.tmpdir={{ tmp }} -Dorg.jboss.logging.provider={{ logging_provider }} \
	&>> "{{ launcher_log }}""

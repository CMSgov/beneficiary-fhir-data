---

- name: Install Pre-requisites
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    # Needed to run the ETL service.
    - java-11-openjdk
  become: true
  tags:
    - pre-ami

- name: Create ETL Service User
  user:
    name: "{{ data_pipeline_user }}"
    shell: /bin/false
  become: true
  tags: 
    - pre-ami

- name: Create ETL Service Directory
  file:
    path: "{{ data_pipeline_dir }}"
    state: directory
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true
  tags: 
    - pre-ami

# Create the temp directory iff it's missing. (Don't want to accidentally
# change the permissions on /tmp.)
- name: Check for Custom Temp Directory
  stat:
    path: "{{ data_pipeline_tmp_dir }}"
  become: true
  register: stat_tmp
  when: data_pipeline_tmp_dir is defined
  tags: 
    - pre-ami

- name: Create Custom Temp Directory
  file:
    path: "{{ data_pipeline_tmp_dir }}"
    state: directory
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true
  when: data_pipeline_tmp_dir is defined and stat_tmp.stat.exists == false
  tags: 
    - pre-ami

- name: Copy and Unzip Pipeline Application
  unarchive:
    src: "{{ data_pipeline_zip }}"
    dest: "{{ data_pipeline_dir }}"
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
  become: true
  tags:
    - pre-ami

- name: Create Pipeline Service Wrapper Script
  template:
    src: bfd-pipeline-service.sh.j2
    dest: "{{ data_pipeline_dir }}/bfd-pipeline-service.sh"
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true
  notify:
    - 'Restart Pipeline Service'
  tags: 
    - post-ami

- name: Create Pipeline Service Definition
  template:
    src: bfd-pipeline.service.j2
    dest: /etc/systemd/system/bfd-pipeline.service
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  become: true
  notify:
    - 'Enable Pipeline Service'
    - 'Restart Pipeline Service'
  tags: 
    - post-ami

- name: Create Cloudwatch Directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true
  loop:
    - "{{ data_pipeline_dir }}/prometheus"
  tags:
    - pre-ami

- name: Download prometheus jmx exporter  
  become: true
  get_url:
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: 0755
    url: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/{{ prometheus_jmx_exporter_version }}/jmx_prometheus_javaagent-{{ prometheus_jmx_exporter_version }}.jar"
    dest: "{{ data_pipeline_dir }}/prometheus/jmx_prometheus.jar"
  register: prometheus_download
  retries: 5
  delay: 10
  until: prometheus_download is succeeded
  tags:
    - pre-ami
# This is the install pattern for New Relic getting baked into the build/image
# - name: Find Prometheus JMX exporter
#   find:
#     paths: "{{ data_pipeline_dir }}/bfd-server-launcher-1.0.0-SNAPSHOT/lib/"
#     pattern: jmx_prometheus_javaagent*.jar
#   register: find_pje

# - name: Copy Prometheus JMX exporter JAR
#   copy:
#     src: "{{ item.path }}"
#     dest: "{{ data_pipeline_dir }}/prometheus/jmx_prometheus.jar"
#     remote_src: true
#     owner: "{{ data_pipeline_user }}"
#     group: "{{ data_pipeline_user }}"
#     mode: u=rw,g=r,o=r
#   with_items:
#     - "{{ find_pje.files }}"
#   become: true

- name: Copy Prometheus JMX exporter Config
  template:
    src: 'prometheus_jmx_exporter.yml.j2'
    dest: "{{ data_pipeline_dir }}/prometheus/prometheus_jmx_exporter.yml"
    owner: "{{ data_pipeline_user }}"
    group: "{{ data_pipeline_user }}"
    mode: u=rw,g=r
  become: true
  tags:
    - pre-ami
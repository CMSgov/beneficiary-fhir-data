#!/bin/bash

# The launcher picks up its config from environment variables, so set those.
export BFD_PORT='{{ data_server_appserver_https_port }}'
export BFD_KEYSTORE='{{ data_server_dir }}/bluebutton-appserver-keystore.jks'
export BFD_TRUSTSTORE='{{ data_server_dir }}/bluebutton-appserver-truststore.jks'
export BFD_WAR='{{ data_server_dir }}/{{ data_server_war | basename }}'
export V2_ENABLED='{{ data_server_v2_enabled }}'

# The WAR picks up its config from Java system properties, so set some variables we can use for
# those.
LOGS_DIR='{{ data_server_dir }}/'
DB_URL='{{ data_server_db_url }}'
DB_USERNAME='{{ data_server_db_username }}'
DB_PASSWORD='{{ data_server_db_password }}'
DB_CONNECTIONS_MAX='{{ data_server_db_connections_max }}'
BFD_V2_ENABLED='{{ data_server_v2_enabled }}'

# The New Relic agent running in the WAR needs some additional environment variables, so set those.
{% if data_server_new_relic_license_key is defined %}
export NEW_RELIC_HOST='gov-collector.newrelic.com'
export NEW_RELIC_LICENSE_KEY='{{ data_server_new_relic_license_key }}'
export NEW_RELIC_LOG_FILE_PATH="${LOGS_DIR}"
export NEW_RELIC_HIGH_SECURITY='false'
export NEW_RELIC_EXTENSIONS_DIR='{{ data_server_dir }}/newrelic/extensions/'
{% if data_server_proxy_host is defined %}
export NEW_RELIC_PROXY_HOST='{{ data_server_proxy_host }}'
{% endif %}
{% if data_server_proxy_port is defined %}
export NEW_RELIC_PROXY_PORT='{{ data_server_proxy_port }}'
{% endif %}
{% if data_server_new_relic_app_name is defined %}
export NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}
{% if data_server_new_relic_environment is defined %}
export NEW_RELIC_ENVIRONMENT='{{ data_server_new_relic_environment }}'
{% endif %}
{% endif %}

# The New Relic reporter sending Dropwizard metrics needs additional env vars.
# Some of those duplicate variables that the New Relic agent configuration also
# sets, but setting them to the same value here allows one to be run without the other.
{% if data_server_new_relic_metric_key is defined %}
export NEW_RELIC_METRIC_KEY='{{ data_server_new_relic_metric_key }}'

{% if data_server_new_relic_app_name is defined %}
export NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}

{% if data_server_new_relic_metric_host is defined %}
export NEW_RELIC_METRIC_HOST='{{ data_server_new_relic_metric_host }}'
{% endif %}

{% if data_server_new_relic_metric_path is defined %}
export NEW_RELIC_METRIC_PATH='{{ data_server_new_relic_metric_path }}'
{% endif %}

{% if data_server_new_relic_metric_period is defined %}
export NEW_RELIC_METRIC_PERIOD='{{ data_server_new_relic_metric_period }}'
{% endif %}

{% endif %}

# Begin smoke testing startup routine
STARTUP_TESTING_RETRIES='3'
STARTUP_TESTING_BOOT_TIMEOUT='60'
STARTUP_TESTING_REQ_TIMEOUT='15'
STARTUP_TESTING_REQ_BACKOFF_TIMEOUT='10'
STARTUP_TESTING_BENE_ID='-201'

##
# Prints out the specified message.
#
# Params:
# * $1: the message to log
##
log() {
  echo "$(date +%F\ %T): $1"
}

##
# Verifies that the specified endpoint/query can be queried via curl without error and produced the expected output.
#
# Params:
# * $1: the full URL to query via curl
# * $2: the value to confirm is present in the curl output; if not found, then the query should be regarded as unsuccessful
##
check_endpoint() {
  set -o pipefail
  curl --max-time $STARTUP_TESTING_REQ_TIMEOUT --silent --insecure --cert-type pem --cert "{{ data_server_dir }}/bluebutton-backend-test-data-server-client-test-keypair.pem" "$1" | grep "$2"
}

##
# Runs test queries to verify that the server is working as expected. If not, issues a 'kill -INT' on the server's process to shut it down.
##
stop_service_if_failing() {
  log "Waiting $STARTUP_TESTING_BOOT_TIMEOUT seconds for initial startup"
  sleep $STARTUP_TESTING_BOOT_TIMEOUT

  for I in $(seq $STARTUP_TESTING_RETRIES); do
    log "Checking metadata endpoint"
    STARTUP_TESTING_CHECK_METADATA=$(check_endpoint "https://localhost:7443/v1/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_METADATA_EXIT=$?

    log "Checking coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_DATABASE=$(check_endpoint "https://localhost:7443/v1/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_DATABASE_EXIT=$?

    if [[ $STARTUP_TESTING_CHECK_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_DATABASE_EXIT == 0 ]]; then
      log "Server started properly"
      return 0
    elif [[ $I -lt $STARTUP_TESTING_RETRIES ]]; then
      log "Server failed to start properly, backing off"
      sleep $STARTUP_TESTING_REQ_BACKOFF_TIMEOUT
    fi
  done

  log "Server failed to start properly, shutting down"
  STARTUP_TESTING_BFD_PID=$(ps -ef | grep 'DataServerLauncherApp' | grep -v grep | awk '{print $2}')
  STARTUP_TESTING_BFD_PID_EXIT=$?

  if [[ $STARTUP_TESTING_BFD_PID_EXIT == 0 ]] && kill -INT $STARTUP_TESTING_BFD_PID; then
    log "Server shut down gracefully"
  else
    log "Error shutting down server gracefully"
  fi
  return 1
}

(stop_service_if_failing >>"{{ data_server_dir }}/bfd-server-startup.log" 2>&1) &
# End smoke testing startup routine

# Set some additional variables.
JVM_ARGS='{{ data_server_appserver_jvmargs }}'

# 3... 2... 1... launch!
java \
  -javaagent:{{ data_server_dir }}/newrelic/newrelic.jar \
  ${JVM_ARGS} \
  "-DbfdServer.logs.dir=${LOGS_DIR}" \
  "-DbfdServer.db.url=${DB_URL}" \
  "-DbfdServer.db.username=${DB_USERNAME}" \
  "-DbfdServer.db.password=${DB_PASSWORD}" \
  "-DbfdServer.db.connections.max=${DB_CONNECTIONS_MAX}" \
  "-DbfdServer.v2.enabled=${BFD_V2_ENABLED}" \
  -jar "{{ data_server_dir }}/{{ data_server_launcher | basename }}" \
  >>"{{ data_server_dir }}/bluebutton-server-app-log.json" 2>&1

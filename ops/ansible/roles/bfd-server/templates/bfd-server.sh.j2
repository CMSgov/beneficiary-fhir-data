#!/bin/bash

# Force UTC time
export TZ=UTC

# The launcher picks up its config from environment variables, so set those.
export BFD_PORT='{{ service_port }}'
export BFD_PATHS_FILES_KEYSTORE='{{ ref_dir }}/bluebutton-appserver-keystore.pfx'
export BFD_PATHS_FILES_TRUSTSTORE='{{ ref_dir }}/bluebutton-appserver-truststore.pfx'
# shellcheck disable=SC1083
export BFD_PATHS_FILES_WAR="$(find {{ ref_dir }} -type f -name 'bfd-server-war-*.war')"

# The WAR picks up its config from Java system properties, so set some variables we can use for
# those.
export BFD_DB_URL='{{ db_url }}'
# shellcheck disable=SC1054,SC1064,SC1065,SC1072,SC1073
{{ '#' if db_password_override|default('', true)|length<1 else '' }}export BFD_DB_PASSWORD='{{ db_password_override|default('', true) }}'  {# application defaults to ssm db/password #}{{ '\n' }}
{{ '#' if db_username_override|default('', true)|length<1 else '' }}export BFD_DB_USERNAME='{{ db_username_override|default('', true) }}'  {# application defaults to ssm db/username #}{{ '\n' }}

# The New Relic agent running in the WAR needs some additional environment variables, so set those.
{% if license_key is defined %}
export NEW_RELIC_HOST='gov-collector.newrelic.com'
export NEW_RELIC_LICENSE_KEY='{{ license_key }}'
export NEW_RELIC_LOG_FILE_PATH='{{ logs }}'
{% if high_security_enabled is defined %}
export NEW_RELIC_HIGH_SECURITY='{{ high_security_enabled }}'
{% endif %}
export NEW_RELIC_EXTENSIONS_DIR='{{ ref_dir }}/newrelic/extensions/'
{% if proxy_host is defined %}
export NEW_RELIC_PROXY_HOST='{{ proxy_host }}'
{% endif %}
{% if proxy_port is defined %}
export NEW_RELIC_PROXY_PORT='{{ proxy_port }}'
{% endif %}
export NEW_RELIC_APP_NAME='{{ app_name }}'
export NEW_RELIC_ENVIRONMENT='{{ env_name_std }}'
{% endif %}

# Begin smoke testing startup routine
STARTUP_TESTING_REQ_TIMEOUT='{{ request_timeout_seconds }}'
STARTUP_TESTING_REQ_BACKOFF_TIMEOUT='{{ request_backoff_seconds }}'
STARTUP_TESTING_BENE_ID='{{ testing_bene_id }}'
# Lifecycle hook name, used to signal to the ASG that this instance has warmed-up and is ready for
# traffic
{% if launch_lifecycle_hook is defined %}
LAUNCH_LIFECYCLE_HOOK="{{ launch_lifecycle_hook }}"
{% endif %}

##
# Prints out the specified message.
#
# Params:
# * $1: the message to log
##
log() {
  echo "$(date +%F\ %T): $1"
}

##
# Verifies that the specified endpoint/query can be queried via curl without error and produced the expected output.
#
# Params:
# * $1: the full URL to query via curl
# * $2: the value to confirm is present in the curl output; if not found, then the query should be regarded as unsuccessful
##
check_endpoint() {
  set -o pipefail
  curl --max-time $STARTUP_TESTING_REQ_TIMEOUT --silent --insecure --cert-type pem --cert "{{ ref_dir }}/bluebutton-backend-test-data-server-client-test-keypair.pem" "$1" | grep "$2"
}

##
# Runs test queries to verify that the server is working as expected before allowing traffic in the firewall.
##

service_startup_check() {
  # Reject all external traffic to service port until the application has started successfully
  sudo iptables -A INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT

  while true; do
    log "Checking V1 metadata endpoint"
    STARTUP_TESTING_CHECK_V1_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V1_METADATA_EXIT=$?

    log "Checking V2 metadata endpoint"
    STARTUP_TESTING_CHECK_V2_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V2_METADATA_EXIT=$?

    log "Checking V1 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT=$?

    log "Checking V2 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT=$?

    log "Checking V1 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V1_EOB_EXIT=$?

    log "Checking V2 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V2_EOB_EXIT=$?

    if [[ $STARTUP_TESTING_CHECK_V1_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_EOB_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_EOB_EXIT == 0 ]]; then
      # Effectively allow traffic from external sources to reach service port
      sudo iptables -D INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT
      log "Server started properly"

      if [[ -z "$LAUNCH_LIFECYCLE_HOOK" ]]; then
        return 0
      fi

      log "Launch Lifecycle Hook $LAUNCH_LIFECYCLE_HOOK is enabled"
      instance_id="$(ec2-metadata --instance-id | sed 's/instance-id: \(.*\)$/\1/')"
      region="$(ec2-metadata --availability-zone | sed 's/placement: \(.*\).$/\1/')"
      if [[ -z "$instance_id" || -z "$region" ]]; then
        log "Instance ID or region not found from IMDS; is BFD Server running on an EC2 Instance?"
        return 0
      fi

      # Capturing the ASG name from Terraform -> User Data Init -> Ansible is not possible, as the
      # ASG name (as of writing) is based upon the Launch Template name and latest version. Trying
      # to pass this data within the launch template's Terraform resource definition would result in
      # a circular reference. Instead, we rely on AWS's default tagging behavior to get the ASG's
      # name
      asg_name="$(
        aws ec2 describe-tags \
          --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=aws:autoscaling:groupName" \
          --region "$region" |
          jq -r '.Tags | .[] | .Value'
      )"
      if [[ -z "$asg_name" ]]; then
        log "ASG name not found in instance tags; was instance launched within an ASG?"
        return 0
      fi

      log "ASG Name: $asg_name; Instance ID: $instance_id"
      log "Completing Lifecycle Action for Hook $LAUNCH_LIFECYCLE_HOOK..."
      aws autoscaling complete-lifecycle-action \
        --lifecycle-action-result CONTINUE \
        --instance-id "$instance_id" \
        --lifecycle-hook-name "$LAUNCH_LIFECYCLE_HOOK" \
        --auto-scaling-group-name "$asg_name" \
        --region "$region" 1>/dev/null 2>/dev/null &&
        log "Lifecycle Action completed with result CONTINUE for hook $LAUNCH_LIFECYCLE_HOOK" ||
        log "Failed to complete Lifecycle Action for hook $LAUNCH_LIFECYCLE_HOOK"
      return 0
    else
      log "Server failed to start properly, retrying..."
      sleep $STARTUP_TESTING_REQ_BACKOFF_TIMEOUT
    fi
  done
}

(service_startup_check >>"{{ ref_dir }}/bfd-server-startup.log" 2>&1) &
# End smoke testing startup routine

# Set some additional variables.
JVM_ARGS="-Xms{{ ((ansible_memtotal_mb * 0.80) | int) - 2048 }}m -Xmx{{ ((ansible_memtotal_mb * 0.80) | int) - 2048 }}m -XX:MaxMetaspaceSize=2048m -XX:MaxMetaspaceSize=2048m -Xlog:gc*:{{ ref_dir }}/gc.log:time,level,tags -XX:+PreserveFramePointer -Dsun.net.inetaddr.ttl=0"
SERVICE_SCRIPT="$(find {{ ref_dir }} -type f -name bfd-server-launcher.sh)"

CONFIG_SETTINGS_JSON=$(cat <<EOF
{"ssmHierarchies": [
    "/bfd/{{ env_name_std }}/common/sensitive/new_relic/",
    "/bfd/{{ env_name_std }}/common/nonsensitive/",
    "/bfd/{{ env_name_std }}/server/sensitive/",
    "/bfd/{{ env_name_std }}/server/nonsensitive/"
]}
EOF
)
export CONFIG_SETTINGS_JSON

# 3... 2... 1... launch!
"$SERVICE_SCRIPT" \
  -javaagent:{{ ref_dir }}/newrelic/newrelic.jar \
  ${JVM_ARGS} \
  "-DbfdServer.logs.dir={{ logs | regex_replace('\\/$', '') }}/" \
  "-Djava.io.tmpdir={{ tmp }}" \
  "-Dorg.jboss.logging.provider=slf4j" \
  >>"{{ ref_dir }}/bluebutton-server-app-log.json" 2>&1

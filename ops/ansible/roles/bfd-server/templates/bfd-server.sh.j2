#!/bin/bash

# The launcher picks up its config from environment variables, so set those.
export BFD_PORT='{{ data_server_appserver_https_port }}'
export BFD_PATHS_FILES_KEYSTORE='{{ data_server_dir }}/bluebutton-appserver-keystore.pfx'
export BFD_PATHS_FILES_TRUSTSTORE='{{ data_server_dir }}/bluebutton-appserver-truststore.pfx'
export BFD_PATHS_FILES_WAR="$(find {{ data_server_dir }} -type f -name 'bfd-server-war-*.war')"

# The WAR picks up its config from Java system properties, so set some variables we can use for
# those.
LOGS_DIR='{{ data_server_dir }}/'
export BFD_DB_URL='{{ data_server_db_url }}'
export BFD_DB_USERNAME='{{ data_server_db_username }}'
export BFD_DB_PASSWORD='{{ data_server_db_password }}'
{% if db_data_source_type is defined %}
export BFD_DB_DATA_SOURCE_TYPE='{{ db_data_source_type }}'
{% endif %}
{% if db_hikari_max_pool_size is defined %}
export BFD_DB_HIKARI_MAX_POOL_SIZE='{{ db_hikari_max_pool_size }}'
{% endif %}
{% if db_hikari_min_idle_connections is defined %}
export BFD_DB_HIKARI_MIN_IDLE_CONNECTIONS='{{ db_hikari_min_idle_connections }}'
{% endif %}
{% if db_hikari_idle_timeout_ms is defined %}
export BFD_DB_HIKARI_IDLE_TIMEOUT_MS='{{ db_hikari_idle_timeout_ms }}'
{% endif %}
{% if db_hikari_init_fail_timeout_ms is defined %}
export BFD_DB_HIKARI_INIT_FAIL_TIMEOUT_MS='{{ db_hikari_init_fail_timeout_ms }}'
{% endif %}
{% if db_hikari_connection_timeout_ms is defined %}
export BFD_DB_HIKARI_CONNECTION_TIMEOUT_MS='{{ db_hikari_connection_timeout_ms }}'
{% endif %}
{% if db_hikari_keepalive_timeout_ms is defined %}
export BFD_DB_HIKARI_KEEPALIVE_TIMEOUT_MS='{{ db_hikari_keepalive_timeout_ms }}'
{% endif %}
{% if db_hikari_validation_timeout_ms is defined %}
export BFD_DB_HIKARI_VALIDATION_TIMEOUT_MS='{{ db_hikari_validation_timeout_ms }}'
{% endif %}
{% if db_hikari_max_connection_lifetime_ms is defined %}
export BFD_DB_HIKARI_MAX_CONNECTION_LIFETIME_MS='{{ db_hikari_max_connection_lifetime_ms }}'
{% endif %}
{% if db_wrapper_use_custom_preset is defined %}
export BFD_DB_WRAPPER_USE_CUSTOM_PRESET='{{ db_wrapper_use_custom_preset }}'
{% endif %}
{% if db_wrapper_base_preset is defined %}
export BFD_DB_WRAPPER_BASE_PRESET='{{ db_wrapper_base_preset }}'
{% endif %}
{% if db_wrapper_plugins_csv is defined %}
export BFD_DB_WRAPPER_PLUGINS_CSV='{{ db_wrapper_plugins_csv }}'
{% endif %}
{% if db_wrapper_host_selection_strategy is defined %}
export BFD_DB_WRAPPER_HOST_SELECTION_STRATEGY='{{ db_wrapper_host_selection_strategy }}'
{% endif %}
{% if db_wrapper_init_connection_strategy is defined %}
export BFD_DB_WRAPPER_INIT_CONNECTION_STRATEGY='{{ db_wrapper_init_connection_strategy }}'
{% endif %}
export BFD_PAC_ENABLED='{{ pac_resources_enabled }}'
export BFD_PAC_CLAIM_SOURCE_TYPES='{{ pac_claim_source_types }}'

# The New Relic agent running in the WAR needs some additional environment variables, so set those.
{% if data_server_new_relic_license_key is defined %}
export NEW_RELIC_HOST='gov-collector.newrelic.com'
export NEW_RELIC_LICENSE_KEY='{{ data_server_new_relic_license_key }}'
export NEW_RELIC_LOG_FILE_PATH="${LOGS_DIR}"
export NEW_RELIC_HIGH_SECURITY='false'
export NEW_RELIC_EXTENSIONS_DIR='{{ data_server_dir }}/newrelic/extensions/'
{% if data_server_proxy_host is defined %}
export NEW_RELIC_PROXY_HOST='{{ data_server_proxy_host }}'
{% endif %}
{% if data_server_proxy_port is defined %}
export NEW_RELIC_PROXY_PORT='{{ data_server_proxy_port }}'
{% endif %}
{% if data_server_new_relic_app_name is defined %}
export NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}
{% if data_server_new_relic_environment is defined %}
export NEW_RELIC_ENVIRONMENT='{{ data_server_new_relic_environment }}'
{% endif %}
{% endif %}

# The New Relic reporter sending Dropwizard metrics needs additional env vars.
# Some of those duplicate variables that the New Relic agent configuration also
# sets, but setting them to the same value here allows one to be run without the other.
{% if data_server_new_relic_metric_key is defined %}
export BFD_NEW_RELIC_METRICS_LICENSE_KEY='{{ data_server_new_relic_metric_key }}'

{% if data_server_new_relic_app_name is defined %}
export BFD_NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}

{% if data_server_new_relic_metric_host is defined %}
export BFD_NEW_RELIC_METRICS_HOST='{{ data_server_new_relic_metric_host }}'
{% endif %}

{% if data_server_new_relic_metric_path is defined %}
export BFD_NEW_RELIC_METRICS_PATH='{{ data_server_new_relic_metric_path }}'
{% endif %}

{% if data_server_new_relic_metric_period is defined %}
export BFD_NEW_RELIC_METRICS_PERIOD='{{ data_server_new_relic_metric_period }}'
{% endif %}

{% endif %}

# Begin smoke testing startup routine
STARTUP_TESTING_REQ_TIMEOUT='15'
STARTUP_TESTING_REQ_BACKOFF_TIMEOUT='1'
STARTUP_TESTING_BENE_ID='-88888888888888'
# Lifecycle hook name, used to signal to the ASG that this instance has warmed-up and is ready for
# traffic
{% if launch_lifecycle_hook is defined %}
LAUNCH_LIFECYCLE_HOOK="{{ launch_lifecycle_hook }}"
{% endif %}

##
# Prints out the specified message.
#
# Params:
# * $1: the message to log
##
log() {
  echo "$(date +%F\ %T): $1"
}

##
# Verifies that the specified endpoint/query can be queried via curl without error and produced the expected output.
#
# Params:
# * $1: the full URL to query via curl
# * $2: the value to confirm is present in the curl output; if not found, then the query should be regarded as unsuccessful
##
check_endpoint() {
  set -o pipefail
  curl --max-time $STARTUP_TESTING_REQ_TIMEOUT --silent --insecure --cert-type pem --cert "{{ data_server_dir }}/bluebutton-backend-test-data-server-client-test-keypair.pem" "$1" | grep "$2"
}

##
# Runs test queries to verify that the server is working as expected before allowing traffic in the firewall.
##

service_startup_check() {
  # Reject all external traffic to service port until the application has started successfully
  sudo iptables -A INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT

  while true; do
    log "Checking V1 metadata endpoint"
    STARTUP_TESTING_CHECK_V1_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V1_METADATA_EXIT=$?

    log "Checking V2 metadata endpoint"
    STARTUP_TESTING_CHECK_V2_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V2_METADATA_EXIT=$?

    log "Checking V1 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT=$?

    log "Checking V2 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT=$?

    log "Checking V1 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V1_EOB_EXIT=$?

    log "Checking V2 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V2_EOB_EXIT=$?

    if [[ $STARTUP_TESTING_CHECK_V1_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_EOB_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_EOB_EXIT == 0 ]]; then
      # Effectively allow traffic from external sources to reach service port
      sudo iptables -D INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT
      log "Server started properly"

      if [[ -z "$LAUNCH_LIFECYCLE_HOOK" ]]; then
        return 0
      fi

      log "Launch Lifecycle Hook $LAUNCH_LIFECYCLE_HOOK is enabled"
      instance_id="$(ec2-metadata --instance-id | sed 's/instance-id: \(.*\)$/\1/')"
      region="$(ec2-metadata --availability-zone | sed 's/placement: \(.*\).$/\1/')"
      if [[ -z "$instance_id" || -z "$region" ]]; then
        log "Instance ID or region not found from IMDS; is BFD Server running on an EC2 Instance?"
        return 0
      fi

      # Capturing the ASG name from Terraform -> User Data Init -> Ansible is not possible, as the
      # ASG name (as of writing) is based upon the Launch Template name and latest version. Trying
      # to pass this data within the launch template's Terraform resource definition would result in
      # a circular reference. Instead, we rely on AWS's default tagging behavior to get the ASG's
      # name
      asg_name="$(
        aws ec2 describe-tags \
          --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=aws:autoscaling:groupName" \
          --region "$region" |
          jq -r '.Tags | .[] | .Value'
      )"
      if [[ -z "$asg_name" ]]; then
        log "ASG name not found in instance tags; was instance launched within an ASG?"
        return 0
      fi

      log "ASG Name: $asg_name; Instance ID: $instance_id"
      log "Completing Lifecycle Action for Hook $LAUNCH_LIFECYCLE_HOOK..."
      aws autoscaling complete-lifecycle-action \
        --lifecycle-action-result CONTINUE \
        --instance-id "$instance_id" \
        --lifecycle-hook-name "$LAUNCH_LIFECYCLE_HOOK" \
        --auto-scaling-group-name "$asg_name" \
        --region "$region" 1>/dev/null 2>/dev/null &&
        log "Lifecycle Action completed with result CONTINUE for hook $LAUNCH_LIFECYCLE_HOOK" ||
        log "Failed to complete Lifecycle Action for hook $LAUNCH_LIFECYCLE_HOOK"
      return 0
    else
      log "Server failed to start properly, retrying..."
      sleep $STARTUP_TESTING_REQ_BACKOFF_TIMEOUT
    fi
  done
}

(service_startup_check >>"{{ data_server_dir }}/bfd-server-startup.log" 2>&1) &
# End smoke testing startup routine

# Set some additional variables.
JVM_ARGS='{{ data_server_appserver_jvmargs }}'
SERVICE_SCRIPT="$(find {{ data_server_dir }} -type f -name bfd-server-launcher.sh)"

CONFIG_SETTINGS_JSON=$(cat <<EOF
{"ssmHierarchies": [
    "/bfd/{{ env_name_std }}/server/sensitive/",
    "/bfd/{{ env_name_std }}/server/nonsensitive/"
]}
EOF
)
export CONFIG_SETTINGS_JSON

# 3... 2... 1... launch!
"$SERVICE_SCRIPT" \
  -javaagent:{{ data_server_dir }}/newrelic/newrelic.jar \
  ${JVM_ARGS} \
  "-DbfdServer.logs.dir=${LOGS_DIR}" \
  "-Djava.io.tmpdir={{ data_server_tmp_dir }}" \
  "-Dorg.jboss.logging.provider=slf4j" \
  >>"{{ data_server_dir }}/bluebutton-server-app-log.json" 2>&1

#!/bin/bash
metadata_token_ttl_seconds=300

# The launcher picks up its config from environment variables, so set those.
export BFD_PORT='{{ data_server_appserver_https_port }}'
export BFD_KEYSTORE='{{ data_server_dir }}/bluebutton-appserver-keystore.pfx'
export BFD_TRUSTSTORE='{{ data_server_dir }}/bluebutton-appserver-truststore.pfx'
export BFD_WAR='{{ data_server_dir }}/{{ data_server_war | basename }}'

# The WAR picks up its config from Java system properties, so set some variables we can use for
# those.
LOGS_DIR='{{ data_server_dir }}/'
BFD_PAC_ENABLED='{{ pac_resources_enabled }}'
BFD_PAC_CLAIM_SOURCE_TYPES='{{ pac_claim_source_types }}'

DB_URL="${DB_URL:-"{{ data_server_db_url }}"}"
DB_USERNAME="${DB_USERNAME:-{{ data_server_db_username }}}"
DB_PASSWORD="${DB_PASSWORD:-{{ data_server_db_password }}}"
DB_CONNECTIONS_MAX="${DB_CONNECTIONS_MAX:-'{{ data_server_db_connections_max }}'}"

# If DB_USERNAME and DB_PASSWORD is set to "iam", we are using iam for authentication. The username and password will be
# replaced with the actual values from the metadata service and the generate-db-auth-token command.
if [[ "$DB_USERNAME" == "iam" && "$DB_PASSWORD" == "iam" ]]; then
  log "IAM authentication enabled for database connection"

  # Get the hostname from the DB_URL.
  DB_HOST=$(echo "$DB_URL" | sed -n 's/.*\/\/\(.*\):.*/\1/p')

  # Get the instance profile role from the metadata service. This is the database username.
  log "Retrieving auth token for $DB_HOST"
  if ! IMDSv2_TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: $metadata_token_ttl_seconds"); then
    log "Failed to retrieve IMDSv2 token from the AWS metadata service... Is this an EC2 instance?"
    exit 1
  fi
  if ! DB_USERNAME=$(curl -s -S -H "X-aws-ec2-metadata-token: $IMDSv2_TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/); then
    log "Failed to retrieve instance profile role from the AWS metadata service... Is this an EC2 instance?"
    exit 1
  fi
  for i in {1..3}; do
    if DB_PASSWORD="$(aws rds generate-db-auth-token --hostname "$DB_HOST" --port 5432 --username="$DB_USERNAME")"; then
      log "OK"
      break
    else
      log "Failed to obtain token for $DB_HOST retrying... (attempt $i/3)"
      sleep 1
    fi
  done
  if [[ -z "$DB_PASSWORD" ]]; then
    log "Failed to obtain token for $DB_HOST after 3 attempts, exiting..."
    exit 1
  fi
fi
export DB_URL
export DB_USERNAME
export DB_PASSWORD
export DB_CONNECTIONS_MAX

# The New Relic agent running in the WAR needs some additional environment variables, so set those.
{% if data_server_new_relic_license_key is defined %}
export NEW_RELIC_HOST='gov-collector.newrelic.com'
export NEW_RELIC_LICENSE_KEY='{{ data_server_new_relic_license_key }}'
export NEW_RELIC_LOG_FILE_PATH="${LOGS_DIR}"
export NEW_RELIC_HIGH_SECURITY='false'
export NEW_RELIC_EXTENSIONS_DIR='{{ data_server_dir }}/newrelic/extensions/'
{% if data_server_proxy_host is defined %}
export NEW_RELIC_PROXY_HOST='{{ data_server_proxy_host }}'
{% endif %}
{% if data_server_proxy_port is defined %}
export NEW_RELIC_PROXY_PORT='{{ data_server_proxy_port }}'
{% endif %}
{% if data_server_new_relic_app_name is defined %}
export NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}
{% if data_server_new_relic_environment is defined %}
export NEW_RELIC_ENVIRONMENT='{{ data_server_new_relic_environment }}'
{% endif %}
{% endif %}

# The New Relic reporter sending Dropwizard metrics needs additional env vars.
# Some of those duplicate variables that the New Relic agent configuration also
# sets, but setting them to the same value here allows one to be run without the other.
{% if data_server_new_relic_metric_key is defined %}
export NEW_RELIC_METRIC_KEY='{{ data_server_new_relic_metric_key }}'

{% if data_server_new_relic_app_name is defined %}
export NEW_RELIC_APP_NAME='{{ data_server_new_relic_app_name }}'
{% endif %}

{% if data_server_new_relic_metric_host is defined %}
export NEW_RELIC_METRIC_HOST='{{ data_server_new_relic_metric_host }}'
{% endif %}

{% if data_server_new_relic_metric_path is defined %}
export NEW_RELIC_METRIC_PATH='{{ data_server_new_relic_metric_path }}'
{% endif %}

{% if data_server_new_relic_metric_period is defined %}
export NEW_RELIC_METRIC_PERIOD='{{ data_server_new_relic_metric_period }}'
{% endif %}

{% endif %}

# Begin smoke testing startup routine
STARTUP_TESTING_REQ_TIMEOUT='15'
STARTUP_TESTING_REQ_BACKOFF_TIMEOUT='1'
STARTUP_TESTING_BENE_ID='-88888888888888'

##
# Prints out the specified message.
#
# Params:
# * $1: the message to log
##
log() {
  echo "$(date +%F\ %T): $1"
}

##
# Verifies that the specified endpoint/query can be queried via curl without error and produced the expected output.
#
# Params:
# * $1: the full URL to query via curl
# * $2: the value to confirm is present in the curl output; if not found, then the query should be regarded as unsuccessful
##
check_endpoint() {
  set -o pipefail
  curl --max-time $STARTUP_TESTING_REQ_TIMEOUT --silent --insecure --cert-type pem --cert "{{ data_server_dir }}/bluebutton-backend-test-data-server-client-test-keypair.pem" "$1" | grep "$2"
}

##
# Runs test queries to verify that the server is working as expected before allowing traffic in the firewall.
##

service_startup_check() {
  # Reject all external traffic to service port until the application has started successfully
  sudo iptables -A INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT

  while true; do
    log "Checking V1 metadata endpoint"
    STARTUP_TESTING_CHECK_V1_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V1_METADATA_EXIT=$?

    log "Checking V2 metadata endpoint"
    STARTUP_TESTING_CHECK_V2_METADATA=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/metadata?_format=application%2Fjson%2Bfhir" "status")
    STARTUP_TESTING_CHECK_V2_METADATA_EXIT=$?

    log "Checking V1 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT=$?

    log "Checking V2 Coverage resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_COVERAGE=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/Coverage?beneficiary=$STARTUP_TESTING_BENE_ID&_format=application%2Fjson%2Bfhir" "id")
    STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT=$?

    log "Checking V1 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V1_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v1/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V1_EOB_EXIT=$?

    log "Checking V2 EOB resource endpoint for bene $STARTUP_TESTING_BENE_ID"
    STARTUP_TESTING_CHECK_V2_EOB=$(check_endpoint "https://localhost:${BFD_PORT}/v2/fhir/ExplanationOfBenefit/?_format=application%2Ffhir%2Bjson&patient=$STARTUP_TESTING_BENE_ID" "id")
    STARTUP_TESTING_CHECK_V2_EOB_EXIT=$?

    if [[ $STARTUP_TESTING_CHECK_V1_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V1_EOB_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_METADATA_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_COVERAGE_EXIT == 0 ]] && [[ $STARTUP_TESTING_CHECK_V2_EOB_EXIT == 0 ]]; then
      # Effectively allow traffic from external sources to reach service port
      sudo iptables -D INPUT -p tcp ! -i lo --dport "$BFD_PORT" -j REJECT
      log "Server started properly"
      return 0
    else
      log "Server failed to start properly, retrying..."
      sleep $STARTUP_TESTING_REQ_BACKOFF_TIMEOUT
    fi
  done
}

(service_startup_check >>"{{ data_server_dir }}/bfd-server-startup.log" 2>&1) &
# End smoke testing startup routine

# Set some additional variables.
JVM_ARGS='{{ data_server_appserver_jvmargs }}'


# 3... 2... 1... launch!
bfd-server-launcher-1.0.0-SNAPSHOT/bfd-server-launcher.sh \
  -javaagent:{{ data_server_dir }}/newrelic/newrelic.jar \
  ${JVM_ARGS} \
  "-DbfdServer.logs.dir=${LOGS_DIR}" \
  "-DbfdServer.db.url=${DB_URL}" \
  "-DbfdServer.db.username=${DB_USERNAME}" \
  "-DbfdServer.db.password=${DB_PASSWORD}" \
  "-DbfdServer.db.connections.max=${DB_CONNECTIONS_MAX}" \
  "-DbfdServer.pac.enabled=${BFD_PAC_ENABLED}" \
  "-DbfdServer.pac.claimSourceTypes=${BFD_PAC_CLAIM_SOURCE_TYPES}" \
  "-Djava.io.tmpdir={{ data_server_tmp_dir }}" \
  "-Dorg.jboss.logging.provider=slf4j" \
  >>"{{ data_server_dir }}/bluebutton-server-app-log.json" 2>&1

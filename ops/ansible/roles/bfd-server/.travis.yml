---
language: python
python: "2.7"

# The tests will be run in Docker containers, to verify compatibility with 
# various OSes.
sudo: required
services:
  - docker
env:
  # CentOS is used as a standin for RHEL 7.
  - PLATFORM=centos_7 TEST_CASE=artifacts_local_and_non_ca_cert

addons:
  apt:
    packages:
      # Need this due to hardcoding Ansible hosts' passwords in our test inventory.
      - sshpass
      # Required by the `maven_artifact` Ansible module used during test setup.
      - python-dev
      - libxml2
      - libxml2-dev
      - libxslt-dev

install:
  # Prep the Docker container that will be used.
  - ./.travis/docker_launch.sh

  # Install ansible.
  - pip install -r requirements.freeze.txt
  - ansible --version
  - mkdir .travis/roles
  - ln -s `pwd` .travis/roles/karlmdavis.bluebutton_data_server

script:
  # Ensure that Ansible treats this folder as the project's base.
  - cd .travis/
  
  # Basic role syntax check
  - ansible-playbook test_base.yml --inventory-file=inventory --syntax-check

  # Run the Ansible test case.
  - ansible-playbook test_base.yml --inventory-file=inventory

after_script:
  # Inspect the management host environment a bit post-test. Just to aid in debugging.
  - pwd
  - ls -la ../
  - ls -la ./
  - ls -la ./roles/

  # Inspect the Docker container a bit post-test. Just to aid in debugging.
  - docker exec ansible_test_bluebutton_data_server.${PLATFORM} /usr/bin/ls /usr/local/bluebutton-data-server
  - docker exec ansible_test_bluebutton_data_server.${PLATFORM} /usr/bin/ls /usr/local/bluebutton-data-server/wildfly-8.1.0.Final
  - docker exec ansible_test_bluebutton_data_server.${PLATFORM} /usr/bin/cat /usr/local/bluebutton-data-server/wildfly-8.1.0.Final/server-config.log
  - docker exec ansible_test_bluebutton_data_server.${PLATFORM} /usr/bin/cat /usr/local/bluebutton-data-server/wildfly-8.1.0.Final/standalone/log/server.log
  - docker exec ansible_test_bluebutton_data_server.${PLATFORM} /usr/bin/cat /usr/local/bluebutton-data-server/bluebutton-server-app.log
  
  # Stop all Docker containers.
  - docker stop $(docker ps -a -q)

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/


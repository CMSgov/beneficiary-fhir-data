---

- name: Create App Server 'standalone.conf' File
  template:
    src: standalone.conf.j2
    dest: "{{ data_server_dir }}/{{ data_server_appserver_name }}/bin/standalone.conf"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true

# The AWS dev/test/prod environments aren't idempotent: the same base image 
# will be reused and just upgraded over time. accordingly, we have to assume 
# that the FHIR server's SSL certificate may already exist, and preserve it, if 
# so.

- name: Check for App Server SSL Keystore
  stat:
    path: "{{ data_server_dir }}/bluebutton-appserver-keystore.jks"
  register: stat_appserver_keystore
  changed_when: false
  become: true

- name: Create App Server SSL Keystore
  command: "keytool -genkeypair -alias server {{ data_server_ssl_server_genkeypair_args }} -keystore {{ data_server_dir }}/bluebutton-appserver-keystore.jks -storepass changeit"
  when: stat_appserver_keystore.stat.isreg is not defined
  become: true
  become_user: "{{ data_server_user }}"
  no_log: true  # Ensure that the key args aren't logged if this command fails.

# TODO: Export server's public cert and publish to S3 or somesuch (so the frontend and others can pick it up).

- name: Secure App Server SSL Keystore
  file:
    path: "{{ data_server_dir }}/bluebutton-appserver-keystore.jks"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=,o=
  become: true

- name: Create App Server SSL Truststore Working Directory
  file:
    state: directory
    path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rwx,o=rx
  become: true

- name: Delete Previous App Server SSL Truststore Working Copy
  file:
    state: absent
    path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
  changed_when: false
  become: true

- name: Create Empty App Server SSL Truststore Working Copy
  command: "{{ item }}"
  with_items:
    - "keytool -genkeypair -alias fake -dname cn=fake -keypass changeit -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit"
    - "keytool -delete -alias fake -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Save App Server SSL Truststore Certificates
  copy:
    content: "{{ item.certificate }}"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
  with_items: "{{ data_server_ssl_client_certificates }}"
  become: true
  become_user: "{{ data_server_user }}"

- name: Save App Server SSL Truststore Certificate Authorities
  copy:
    content: "{{ item.certificate }}"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
  with_items: "{{ data_server_ssl_client_cas }}"
  become: true
  become_user: "{{ data_server_user }}"

- name: Import Certificates into App Server SSL Truststore Working Copy
  java_cert:
    cert_alias: "{{ item.alias }}"
    cert_path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
    keystore_pass: changeit
    keystore_path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
  with_items: "{{ data_server_ssl_client_certificates }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Import Certificate Authorities into App Server SSL Truststore Working Copy
  command: "keytool -importcert -noprompt -trustcacerts -alias {{ item.alias }} -file {{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt -keypass changeit -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit"
  with_items: "{{ data_server_ssl_client_cas }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Update App Server SSL Truststore
  copy:
    remote_src: true
    src: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore.jks"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=rw,o=r
  become: true

- name: Configure App Server Roles
  template:
    src: 'templates/server-roles.properties.j2'
    dest: "{{ data_server_dir }}/bluebutton-appserver-roles.properties"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=rw,o=r
  become: true

# Note: We always Restart here, because JBoss occassionally needs it. See BLUEBUTTON-1110 for an example.
- name: Restart App Server Service
  service:
    name: "{{ data_server_appserver_service }}"
    state: restarted
  become: true

- name: Wait for App Server to Be Ready
  script: "files/bluebutton-appserver-wait.sh --serverhome {{ data_server_dir }}/{{ data_server_appserver_name }} --managementport {{ data_server_appserver_management_port }} --managementusername \"{{ data_server_appserver_management_username }}\" --managementpassword \"{{ data_server_appserver_management_password }}\""
  become: true
  become_user: "{{ data_server_user }}"

# Need to ensure service is running (and has been restarted if needed) before config, as it needs the server to be available.
- meta: flush_handlers

- name: Copy App Server Config Script
  copy:
    src: files/bluebutton-appserver-config.sh
    dest: "{{ data_server_dir }}/bluebutton-appserver-config.sh"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rwx,o=rx
  become: true

- name: Run App Server Config Script
  command: "{{ data_server_dir }}/bluebutton-appserver-config.sh --serverhome {{ data_server_dir }}/{{ data_server_appserver_name }} --managementport {{ data_server_appserver_management_port }} --managementusername \"{{ data_server_appserver_management_username }}\" --managementpassword \"{{ data_server_appserver_management_password }}\" --httpsport {{ data_server_appserver_https_port }} --keystore {{ data_server_dir }}/bluebutton-appserver-keystore.jks --truststore {{ data_server_dir }}/bluebutton-appserver-truststore.jks --dburl {{ data_server_db_url }} --dbusername {{ data_server_db_username }} --dbpassword {{ data_server_db_password }} --dbconnectionsmax {{ data_server_db_max_connections }} --rolesprops {{ data_server_dir }}/bluebutton-appserver-roles.properties"
  changed_when: true
  become: true
  become_user: "{{ data_server_user }}"
  no_log: true  # Ensure passwords aren't logged if this fails.


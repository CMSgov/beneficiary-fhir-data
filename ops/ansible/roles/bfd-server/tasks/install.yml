---

- name: Install Pre-requisites
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    # Needed to supply `keytool` and also to run the app server.
    - java-1.8.0-openjdk-devel
  become: true

- name: Create Server User
  user:
    name: "{{ data_server_user }}"
    shell: /bin/false
  become: true

- name: Create Server Directory
  file:
    path: "{{ data_server_dir }}"
    state: directory
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rx,o=rx
  become: true

# TODO: This can be removed once we've fully migrated away from JBoss.
# The first time we dpeloy the new Jetty-based server, we need to ensure that JBoss is stopped first (if it already exists).
- name: Stop Existing BFD Server Service
  service:
    name: "{{ data_server_appserver_service }}"
    state: stopped
  become: true
  ignore_errors: true

- name: Copy BFD Server Launcher
  copy:
    src: "{{ data_server_launcher }}"
    dest: "{{ data_server_dir }}/{{ data_server_launcher | basename }}"
  become: true
  notify:
    - 'Restart BFD Server Service'

- name: Copy BFD Server WAR
  copy:
    src: "{{ data_server_war }}"
    dest: "{{ data_server_dir }}/{{ data_server_war | basename }}"
  become: true
  notify:
    - 'Restart BFD Server Service'

- name: Copy App Server Launcher Script
  template:
    src: bfd-server.sh.j2
    dest: "{{ data_server_dir }}/bfd-server.sh"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rwx,o=rx
  become: true
  notify:
    - 'Restart BFD Server Service'

- name: Create BFD Server Service Definition
  template:
    src: bluebutton-appserver.service.j2
    dest: "/etc/systemd/system/{{ data_server_appserver_service }}.service"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  become: true
  notify:
    - 'Enable BFD Server Service'
    - 'Restart BFD Server Service'

- name: Check for BFD Server SSL Keystore
  stat:
    path: "{{ data_server_dir }}/bluebutton-appserver-keystore.jks"
  register: stat_appserver_keystore
  changed_when: false
  become: true

- name: Create BFD Server SSL Keystore
  command: "keytool -genkeypair -alias server {{ data_server_ssl_server_genkeypair_args }} -keystore {{ data_server_dir }}/bluebutton-appserver-keystore.jks -storepass changeit -keypass changeit"
  when: stat_appserver_keystore.stat.isreg is not defined
  become: true
  become_user: "{{ data_server_user }}"
  no_log: true  # Ensure that the key args aren't logged if this command fails.
  notify:
    - 'Restart BFD Server Service'

# TODO: Export server's public cert and publish to S3 or somesuch (so the frontend and others can pick it up).

- name: Secure BFD Server SSL Keystore
  file:
    path: "{{ data_server_dir }}/bluebutton-appserver-keystore.jks"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=,o=
  become: true
  notify:
    - 'Restart BFD Server Service'

- name: Create BFD Server SSL Truststore Working Directory
  file:
    state: directory
    path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rwx,g=rwx,o=rx
  become: true

- name: Delete Previous BFD Server SSL Truststore Working Copy
  file:
    state: absent
    path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
  changed_when: false
  become: true

- name: Create Empty App Server SSL Truststore Working Copy
  command: "{{ item }}"
  with_items:
    - "keytool -genkeypair -alias fake -dname cn=fake -keypass changeit -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit"
    - "keytool -delete -alias fake -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit -keypass changeit"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Save App Server SSL Truststore Certificates
  copy:
    content: "{{ item.certificate }}"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
  with_items: "{{ data_server_ssl_client_certificates }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Save App Server SSL Truststore Certificate Authorities
  copy:
    content: "{{ item.certificate }}"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
  with_items: "{{ data_server_ssl_client_cas }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Import Certificates into App Server SSL Truststore Working Copy
  java_cert:
    cert_alias: "{{ item.alias }}"
    cert_path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt"
    keystore_pass: changeit
    keystore_path: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
  with_items: "{{ data_server_ssl_client_certificates }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Import Certificate Authorities into App Server SSL Truststore Working Copy
  command: "keytool -importcert -noprompt -trustcacerts -alias {{ item.alias }} -file {{ data_server_dir }}/bluebutton-appserver-truststore-work/{{ item.alias }}.crt -keypass changeit -keystore {{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks -storepass changeit"
  with_items: "{{ data_server_ssl_client_cas }}"
  changed_when: false
  become: true
  become_user: "{{ data_server_user }}"

- name: Update App Server SSL Truststore
  copy:
    remote_src: true
    src: "{{ data_server_dir }}/bluebutton-appserver-truststore-work/bluebutton-appserver-truststore.jks"
    dest: "{{ data_server_dir }}/bluebutton-appserver-truststore.jks"
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=rw,o=r
  become: true
  notify:
    - 'Restart BFD Server Service'

# FIXME: Switch to the maven_artifact module after we move to the CCS.
- name: Download New Relic Java Agent Bundle
  get_url:
    url: 'https://search.maven.org/remotecontent?filepath=com/newrelic/agent/java/newrelic-java/5.6.0/newrelic-java-5.6.0.zip'
    dest: /tmp/newrelic-java.zip

- name: Unzip New Relic Java Agent Bundle
  unarchive:
    src: /tmp/newrelic-java.zip
    dest: /tmp
    creates: /tmp/newrelic
    remote_src: true

- name: Copy New Relic Java Agent
  copy:
    src: /tmp/newrelic/newrelic.jar
    dest: "{{ data_server_dir }}/newrelic.jar"
    remote_src: true
    owner: "{{ data_server_user }}"
    group: "{{ data_server_user }}"
    mode: u=rw,g=r,o=r
  become: true
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
  notify:
    - 'Restart BFD Server Service'
=======
  tags: 
    - pre-ami

- name: Run App Server Config Script
  command: "{{ data_server_dir }}/bluebutton-appserver-config.sh --serverhome {{ data_server_dir }}/{{ data_server_container_name }} --managementport {{ data_server_appserver_management_port }} --managementusername \"{{ data_server_appserver_management_username }}\" --managementpassword \"{{ data_server_appserver_management_password }}\" --httpsport {{ data_server_appserver_https_port }} --keystore {{ data_server_dir }}/bluebutton-appserver-keystore.jks --truststore {{ data_server_dir }}/bluebutton-appserver-truststore.jks --dburl {{ data_server_db_url }} --dbusername {{ data_server_db_username }} --dbpassword {{ data_server_db_password }} --dbconnectionsmax {{ data_server_db_max_connections }} --rolesprops {{ data_server_dir }}/bluebutton-appserver-roles.properties"
  changed_when: true
  become: true
  become_user: "{{ data_server_user }}"
  no_log: true  # Ensure passwords aren't logged if this fails.
<<<<<<< HEAD
  tags: 
    - post-ami
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
=======
=======
>>>>>>> Fix merge conflicts:ops/ansible/roles/bfd-server/tasks/appserver_config.yml
=======
<<<<<<< HEAD
=======
=======
>>>>>>> b78c40aeccc26373cb0197b8e6b2ea51706f7eff
>>>>>>> Revert "Fix merge conflicts":ops/ansible/roles/bfd-server/tasks/appserver_config.yml

- name: populate /etc/environment
  become: true
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}"
    line: "{{ item.key }}={{ item.value }}"
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
  with_items: "{{ os_environment_variables }}"
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
  no_log: true  # Ensure passwords aren't logged if this fails.

>>>>>>> Add New Relic to BFDS
>>>>>>> Add New Relic to BFDS:ops/ansible/roles/bfd-server/tasks/appserver_config.yml
=======
  no_log: true  # Ensure passwords aren't logged if this fails.
>>>>>>> Fix merge conflicts:ops/ansible/roles/bfd-server/tasks/appserver_config.yml
=======
  with_items: "{{ os_environment_variables }}"
<<<<<<< HEAD:ops/ansible/roles/bfd-server/tasks/install.yml
>>>>>>> Fix merge conflicts:ops/ansible/roles/bfd-server/tasks/appserver_config.yml
=======
  with_items: "{{ os_environment_variables }}"
  no_log: true  # Ensure passwords aren't logged if this fails.
>>>>>>> Revert "Fix merge conflicts":ops/ansible/roles/bfd-server/tasks/appserver_config.yml
=======
  no_log: true  # Ensure passwords aren't logged if this fails.
<<<<<<< HEAD

>>>>>>> Add New Relic to BFDS
=======
>>>>>>> b78c40aeccc26373cb0197b8e6b2ea51706f7eff
>>>>>>> Revert "Fix merge conflicts":ops/ansible/roles/bfd-server/tasks/appserver_config.yml

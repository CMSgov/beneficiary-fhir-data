---
##
# Manages the rollout/upgrade of Blue Button API backend systems. Note that all 
# of the variables prefixed with `vault_` are security-sensitive and are thus 
# stored in encrypted Ansible Vault files. Those files can be edited using the 
# `ansible-vault` command, e.g.:
# 
#     $ pipenv run ansible-vault edit group_vars/env_prod/vault.yml
##

- name: Add SSH Host Keys
  import_playbook: ssh_host_keys.yml

- name: Configure Systems for Ansible Pipelining
  hosts: all
  vars:
    ansible_ssh_pipelining: false
  roles:
    - rhel_ansible_pipelining

- name: Include Build Server Playbook
  import_playbook: build_server.yml

- name: Configure Data Pipeline System
  hosts: data_pipeline_systems
  tasks:
    - name: Apply Blue Button Data Pipeline Role
      import_role:
        name: bfd-pipeline
      vars:
        data_pipeline_dir: '/u01/bluebutton-data-pipeline'
        # Note: The `data_pipeline_jar` variable should have been provided by `--extra-vars` on the command line.
        data_pipeline_jvm_args: "-Xmx{{ ((data_pipeline_ec2_instance_type_mem_mib | int) * 0.80) | int }}m -XX:+PreserveFramePointer"
        data_pipeline_tmp_dir: "{{ data_pipeline_dir }}/tmp"
        data_pipeline_loader_threads: "{{ data_pipeline_ec2_instance_type_vcpu * 25 }}"
        data_pipeline_user: "{{ vault_data_pipeline_user }}"
        data_pipeline_s3_bucket: "{{ vault_data_pipeline_s3_bucket }}"
        data_pipeline_hicn_hash_iterations: "{{ vault_data_pipeline_hicn_hash_iterations }}"
        data_pipeline_hicn_hash_pepper: "{{ vault_data_pipeline_hicn_hash_pepper }}"
        # Primary (i.e. write) DB defined in `group_vars/env_<name>/vault.yml`:
        data_pipeline_db_url: "{{ vault_data_db_primary_url }}"
        data_pipeline_db_username: "{{ vault_data_pipeline_db_username }}"
        data_pipeline_db_password: "{{ vault_data_pipeline_db_password }}"
        #data_pipeline_idempotency_required: (see group_vars/env_*/main.yml)
   
    - name: Configure CloudWatch Logs Agent
      template:
        src: awslogs.conf.data-pipeline.j2
        dest: '/var/awslogs/etc/awslogs.conf'
        owner: root
        group: root
        mode: u=rw,g=,o=
      become: true
      notify:
        - Restart awslogs Service
  handlers:
    - import_tasks: handlers/main.yml

- name: Configure Data Server System
  hosts: data_server_systems
  serial: 1 # only take one Data Server out of rotation at a time

  # Needs to be specified here, as it's not configured properly on the host
  # itself. (Note: `169.254.169.254` is the EC2 instance metadata address, per
  # <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html>.)
  environment:
    no_proxy: 'localhost,169.254.169.254'
    http_proxy: "http://{{ vault_proxy_host }}:{{ vault_proxy_port }}"
    https_proxy: "http://{{ vault_proxy_host }}:{{ vault_proxy_port }}"

  tasks:

    # This will set a bunch of facts, including `ansible_ec2_instance_id`, which we need.
    - name: Gather EC2 Facts for Data Server
      ec2_metadata_facts:

    # This will also set the `ec2_elbs` fact, which we'll need below to re-add this instance.
    - name: Remove Data Server from Load Balancers
      elb_instance:
        region: "{{ aws_region }}"
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: absent
      delegate_to: localhost

    - name: Apply Blue Button Data Server Role
      import_role:
        name: bfd-server
      vars:
        data_server_dir: /u01/jboss
        data_server_user: "{{ vault_data_server_user }}"
        data_server_container: 'will_not_be_used'  # The JBoss instance used here is already (manually) installed.
        data_server_container_name: jboss-eap-7.0
        data_server_appserver_service: jboss
        data_server_appserver_jvmargs: "-Xmx{{ (((data_server_ec2_instance_type_mem_mib | int) * 0.80) - 2048) | int }}m -XX:MaxMetaspaceSize=2048m -XX:MaxMetaspaceSize=2048m -Xloggc:/u01/jboss/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution"
        data_server_appserver_management_port: "{{ vault_data_server_appserver_management_port }}"
        data_server_appserver_management_username: "{{ vault_data_server_appserver_management_username }}"
        data_server_appserver_management_password: "{{ vault_data_server_appserver_management_password }}"
        data_server_appserver_https_port: "{{ vault_data_server_appserver_https_port }}"
        # Note: the `data_server_war` variable should have been provided via `--extra-vars` on the command line.
        data_server_ssl_server_genkeypair_args: "{{ vault_data_server_ssl_genkeypair_args }}"
        # Note: the `data_server_ssl_client_certificates` variable is defined for each env/group in `group_vars/*/main.yml`.
        # Secondary (i.e. read-only) DBs defined in `group_vars/env_<name>_az_<x>/vault.yml`:
        data_server_db_url: "{{ vault_data_db_secondary_url }}"
        data_server_db_username: "{{ vault_data_server_db_username }}"
        data_server_db_password: "{{ vault_data_server_db_password }}"
        data_server_db_connections_max: 400

    - name: Copy Local Test SSL Keypair
      copy:
        # Note: This PEM file is encrypted within the project via Ansible Vault, which will
        # automagically decrypt it as part of the copy operation.
        src: "{{ data_server_ssl_client_certificate_test }}"
        dest: '/u01/jboss/bluebutton-backend-test-data-server-client-test-keypair.pem'
        owner: root
        group: root
        mode: 'u=rw,g=,o='
      become: true

    # Overwrite the bfd-server role generation of the keystore file with the one in the ansible vault 
    - name: Copy the appserver keystore  
      copy:
        # Note: this JKS file is encrypted via the Ansible Vault 
        src: "{{ data_server_appserver_keystore }}"
        dest: '/u01/jboss/bluebutton-appserver-keystore.jks'
        force: yes # overwrite the existing keystore
      when: data_server_appserver_keystore is defined
      become: true

    - name: Add Data Server Back to Load Balancers
      elb_instance:
        region: "{{ aws_region }}"
        ec2_elbs: "{{ item }}"
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: present
      delegate_to: localhost
      loop: "{{ ec2_elbs }}"

    - name: Configure CloudWatch Logs Agent
      template:
        src: awslogs.conf.data-server.j2
        dest: '/var/awslogs/etc/awslogs.conf'
        owner: root
        group: root
        mode: u=rw,g=,o=
      become: true
      notify:
        - Restart awslogs Service
  handlers:
    - import_tasks: handlers/main.yml

- name: Configure Load Balancers
  import_playbook: load_balancers.yml
